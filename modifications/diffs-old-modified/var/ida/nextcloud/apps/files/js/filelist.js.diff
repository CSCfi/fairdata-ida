--- /var/ida/nextcloud-old/apps/files/js/filelist.js	2021-10-27 10:25:30.396495088 +0000
+++ /var/ida/nextcloud-old/apps/files/js/filelist.js.original	2021-10-27 10:25:30.397495090 +0000
@@ -1,11 +1,4 @@
 /*
- * This file is part of the IDA research data storage service
- *
- * @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
- * @link     https://research.csc.fi/
- */
-
-/*
  * Copyright (c) 2014
  *
  * This file is licensed under the Affero General Public License version 3
@@ -831,7 +825,7 @@
 				this.updateSelectionSummary();
 			} else {
 				// clicked directly on the name
-				if (!this._detailsView || $(event.target).is('.nametext, .name') || $(event.target).closest('.nametext').length || $(event.target).is('.projectDetails') || $(event.target).closest('.projectDetails').length) {
+				if (!this._detailsView || $(event.target).is('.nametext, .name') || $(event.target).closest('.nametext').length) {
 					var filename = $tr.attr('data-file');
 					var renaming = $tr.data('renaming');
 					if (!renaming) {
@@ -1038,10 +1032,7 @@
 			if (!this.isAllSelected()) {
 				files = _.pluck(this.getSelectedFiles(), 'name');
 			}
-			var response = confirm(t('ida', 'Are you sure you want to delete the selected item(s)? THIS ACTION CANNOT BE UNDONE!'));
-			if (response) {
 				this.do_delete(files);
-			}
 			event.preventDefault();
 		},
 
@@ -1560,8 +1551,6 @@
 					: '118'
 			}
 
-			maxContrast = OCA.Accessibility && OCA.Accessibility.theme === 'themedark' ? '130' : '118';
-
 			// size column
 			if (typeof (fileData.size) !== 'undefined' && fileData.size >= 0) {
 				simpleSize = humanFileSize(parseInt(fileData.size, 10), true);
@@ -1633,42 +1622,6 @@
 			);
 			tr.find('.filesize').text(simpleSize);
 			tr.append(td);
-
-			try {
-				if (path != null && path == '/') {
-				    spans = tr.find("span.nametext");
-				    if (spans.length > 0) {
-					    path = '/' + name;
-					    projectName = OCA.IDA.Util.extractProjectName(path);
-					    projectTitle = OCA.IDA.Util.getProjectTitle(projectName);
-					    tr.attr('data-project-name', projectName);
-					    tr.attr('data-project-title', projectTitle);
-					    var projectArea = t('ida', 'Frozen');
-					    if (name.substr(name.length - 1) == '+') {
-						    projectArea = t('ida', 'Staging');
-					    }
-						var htmlInsertion = "<span class=\"projectDetails\">";
-                        // Use slightly tighter spacing in production since all project names are shorter
-						if (location.hostname == 'ida.fairdata.fi') {
-							htmlInsertion = "<span class=\"projectDetails projectDetailsTight\">";
-						}
-						htmlInsertion = htmlInsertion + "<span class=\"projectArea\">" + projectArea + "</span>";
-						if (projectTitle != projectName) {
-							if (projectTitle.length > 50) {
-								htmlInsertion = htmlInsertion + "<span class=\"projectTitle\" title=\"" + projectTitle + "\">" + projectTitle + "</span>";
-							}
-							else {
-								htmlInsertion = htmlInsertion + "<span class=\"projectTitle\">" + projectTitle + "</span>";
-							}
-						}
-						htmlInsertion = htmlInsertion + "</span>";
-						spans[0].insertAdjacentHTML('afterend', htmlInsertion);
-					}
-				}
-			} catch (error) {
-				;
-			}
-
 			return tr;
 		},
 
@@ -2238,10 +2191,6 @@
 
 		_updateDirectoryPermissions: function () {
 			var isCreatable = (this.dirInfo.permissions & OC.PERMISSION_CREATE) !== 0 && this.$el.find('#free_space').val() !== '0';
-			// IDA users are not allowed to create anything in their root folder
-			if (this.getCurrentDirectory() === '/') {
-				isCreatable = false;
-			}
 			this.$el.find('#permissions').val(this.dirInfo.permissions);
 			this.$el.find('.creatable').toggleClass('hidden', !isCreatable);
 			this.$el.find('.notCreatable').toggleClass('hidden', isCreatable);
@@ -2257,10 +2206,6 @@
 				// make sure to display according to permissions
 				var permissions = this.getDirectoryPermissions();
 				var isCreatable = (permissions & OC.PERMISSION_CREATE) !== 0;
-				// IDA users are not allowed to create anything in their root folder
-				if (this.getCurrentDirectory() === '/') {
-					isCreatable = false;
-				}
 				this.$el.find('.creatable').toggleClass('hidden', !isCreatable);
 				this.$el.find('.notCreatable').toggleClass('hidden', isCreatable);
 				// remove old style breadcrumbs (some apps might create them)
@@ -2690,22 +2635,6 @@
 
 					if (newName !== oldName) {
 						checkInput();
-						var dir = self.getCurrentDirectory();
-						var pathname = dir + '/' + newName;
-						var project = OCA.IDA.Util.extractProjectName(pathname);
-						var scope = OCA.IDA.Util.stripRootFolder(pathname);
-						try {
-						    var message = OCA.IDA.Util.scopeNotOK(project, scope);
-                            if (message !== false) {
-                                OC.Notification.show(t('ida', message), {type: 'error'});
-								updateInList(oldFileInfo);
-								return false;
-                            }
-						} catch (error) {
-							OC.Notification.show(error, { type: 'error' });
-							updateInList(oldFileInfo);
-							return false;
-						}
 						// mark as loading (temp element)
 						self.showFileBusyState(tr, true);
 						tr.attr('data-file', newName);
@@ -2822,14 +2751,6 @@
 			name = this.getUniqueName(name);
 			var targetPath = this.getCurrentDirectory() + '/' + name;
 
-			var project = OCA.IDA.Util.extractProjectName(targetPath);
-			var scope = OCA.IDA.Util.stripRootFolder(targetPath);
-
-			var message = OCA.IDA.Util.scopeNotOK(project, scope);
-            if (message !== false) {
-                throw t('ida', message);
-            }
-
 			self.filesClient.putFileContents(
 				targetPath,
 				' ', // dont create empty files which fails on some storage backends
@@ -2888,14 +2809,6 @@
 			name = this.getUniqueName(name);
 			var targetPath = this.getCurrentDirectory() + '/' + name;
 
-			var project = OCA.IDA.Util.extractProjectName(targetPath);
-			var scope = OCA.IDA.Util.stripRootFolder(targetPath);
-
-			var message = OCA.IDA.Util.scopeNotOK(project, scope);
-            if (message !== false) {
-                throw t('ida', message);
-            }
-
 			this.filesClient.createDirectory(targetPath)
 				.done(function () {
 					self.addAndFetchFileInfo(targetPath, '', { scrollTo: true }).then(function (status, data) {
@@ -3062,16 +2975,6 @@
 
 			dir = dir || this.getCurrentDirectory();
 
-			// This particular use case is a bit brute force and coarser granulartity than optimal, but is a
-			// compromise to having overly complex mods to the existing logic...
-			var project = OCA.IDA.Util.extractProjectName(dir);
-			var scope = OCA.IDA.Util.stripRootFolder(dir);
-
-			var message = OCA.IDA.Util.scopeNotOK(project, scope);
-            if (message !== false) {
-                throw t('ida', message);
-            }
-
 			var removeFunction = function (fileName) {
 				var $tr = self.findFileEl(fileName);
 				self.showFileBusyState($tr, true);
@@ -3123,10 +3026,6 @@
 		updateEmptyContent: function () {
 			var permissions = this.getDirectoryPermissions();
 			var isCreatable = (permissions & OC.PERMISSION_CREATE) !== 0;
-			// IDA users are not allowed to create anything in their root folder
-			if (this.getCurrentDirectory() === '/') {
-				isCreatable = false;
-			}
 			this.$el.find('#emptycontent').toggleClass('hidden', !this.isEmpty);
 			this.$el.find('#emptycontent').toggleClass('hidden', !this.isEmpty);
 			this.$el.find('#emptycontent .uploadmessage').toggleClass('hidden', !isCreatable || !this.isEmpty);
@@ -3417,7 +3316,7 @@
 		 * Shows a "permission denied" notification
 		 */
 		_showPermissionDeniedNotification: function () {
-			var message = t('ida', 'Files can be added only in the Staging area (root folder ending in +)');
+			var message = t('files', 'You donâ€™t have permission to upload or create files here');
 			OC.Notification.show(message, { type: 'error' });
 		},
 
@@ -3491,10 +3390,6 @@
 				} else {
 					// cancel uploads to current dir if no permission
 					var isCreatable = (self.getDirectoryPermissions() & OC.PERMISSION_CREATE) !== 0;
-					// IDA users are not allowed to create anything in their root folder
-					if (self.getCurrentDirectory() === '/') {
-						isCreatable = false;
-					}
 					if (!isCreatable) {
 						self._showPermissionDeniedNotification();
 						e.stopPropagation();
@@ -3505,48 +3400,10 @@
 					// upload the file to the current directory
 					data.targetDir = self.getCurrentDirectory();
 				}
-
-				// This particular use case is a bit brute force and coarser granulartity than optimal, but is a
-				// compromise to having overly complex mods to the existing logic...
-				var project = OCA.IDA.Util.extractProjectName(data.targetDir);
-				var scope = OCA.IDA.Util.stripRootFolder(data.targetDir);
-				try {
-			        var message = OCA.IDA.Util.scopeNotOK(project, scope);
-                    if (message !== false) {
-                        OC.Notification.show(t('ida', message), {type: 'error'});
-						e.stopPropagation();
-						return false;
-                    }
-				} catch (error) {
-					OC.Notification.show(error, { type: 'error' });
-					e.stopPropagation();
-					return false;
-				}
 			});
 			uploader.on('add', function (e, data) {
 				self._uploader.log('filelist handle fileuploadadd', e, data);
 
-				// This particular use case is a bit brute force and coarser granulartity than optimal, but is a
-				// compromise to having overly complex mods to the existing logic...
-				if (!data.targetDir) {
-					targetDir = self.getCurrentDirectory();
-				}
-				else {
-					targetDir = data.targetDir;
-				}
-				var project = OCA.IDA.Util.extractProjectName(targetDir);
-				var scope = OCA.IDA.Util.stripRootFolder(targetDir);
-				try {
-			        var message = OCA.IDA.Util.scopeNotOK(project, scope);
-                    if (message !== false) {
-                        OC.Notification.show(t('ida', message), {type: 'error'});
-                        return;
-                    }
-				} catch (error) {
-					OC.Notification.show(error, { type: 'error' });
-					return;
-				}
-
 				// add ui visualization to existing folder
 				if (data.context && data.context.data('type') === 'dir') {
 					// add to existing folder
