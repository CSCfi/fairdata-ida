--- /var/ida/nextcloud-new/apps/files/js/fileactions.js	2021-10-27 15:54:06.722752012 +0000
+++ /var/ida/nextcloud-old/apps/files/js/fileactions.js.original	2021-10-27 10:25:30.395495085 +0000
@@ -257,26 +257,13 @@
 		},
 
 		/**
-		 * Returns the default file action handler for the current file
-		 *
-		 * @return {OCA.Files.FileActions~actionSpec} action spec
-		 * @since 8.2
-		 */
-		getCurrentDefaultFileAction: function() {
-			var mime = this.getCurrentMimeType();
-			var type = this.getCurrentType();
-			var permissions = this.getCurrentPermissions();
-			return this.getDefaultFileAction(mime, type, permissions);
-		},
-
-		/**
 		 * Returns the default file action handler for the given conditions
 		 *
 		 * @param {string} mime mime type
 		 * @param {string} type "dir" or "file"
 		 * @param {int} permissions permissions
 		 *
-		 * @return {OCA.Files.FileActions~actionSpec} action spec
+		 * @return {OCA.Files.FileActions~actionHandler} action handler
 		 * @since 8.2
 		 */
 		getDefaultFileAction: function(mime, type, permissions) {
@@ -422,6 +409,8 @@
 					var fileName = $file.attr('data-file');
 
 					context.fileActions.currentFile = currentFile;
+					// also set on global object for legacy apps
+					window.FileActions.currentFile = currentFile;
 
 					var callContext = _.extend({}, context);
 
@@ -491,6 +480,8 @@
 
 			var fileName = fileInfoModel.get('name');
 			this.currentFile = fileName;
+			// also set on global object for legacy apps
+			window.FileActions.currentFile = fileName;
 
 			if (fileList) {
 				// compatibility with action handlers that expect these
@@ -694,14 +685,11 @@
 				name: 'Delete',
 				displayName: function(context) {
 					var mountType = context.$file.attr('data-mounttype');
-					var type = context.$file.attr('data-type');
-					var deleteTitle = (type && type === 'file')
-						? t('files', 'Delete file')
-						: t('files', 'Delete folder')
+					var deleteTitle = t('files', 'Delete');
 					if (mountType === 'external-root') {
 						deleteTitle = t('files', 'Disconnect storage');
 					} else if (mountType === 'shared-root') {
-						deleteTitle = t('files', 'Leave this share');
+						deleteTitle = t('files', 'Unshare');
 					}
 					return deleteTitle;
 				},
@@ -717,12 +705,6 @@
 					}
 					context.fileList.do_delete(fileName, context.dir);
 					$('.tipsy').remove();
-
-					// close sidebar on delete
-					const path = context.dir + '/' + fileName
-					if (OCA.Files.Sidebar && OCA.Files.Sidebar.file === path) {
-						OCA.Files.Sidebar.close()
-					}
 				}
 			});
 
@@ -829,4 +811,25 @@
 
 	// global file actions to be used by all lists
 	OCA.Files.fileActions = new OCA.Files.FileActions();
+	OCA.Files.legacyFileActions = new OCA.Files.FileActions();
+
+	// for backward compatibility
+	//
+	// legacy apps are expecting a stateful global FileActions object to register
+	// their actions on. Since legacy apps are very likely to break with other
+	// FileList views than the main one ("All files"), actions registered
+	// through window.FileActions will be limited to the main file list.
+	// @deprecated use OCA.Files.FileActions instead
+	window.FileActions = OCA.Files.legacyFileActions;
+	window.FileActions.register = function (mime, name, permissions, icon, action, displayName) {
+		console.warn('FileActions.register() is deprecated, please use OCA.Files.fileActions.register() instead', arguments);
+		OCA.Files.FileActions.prototype.register.call(
+				window.FileActions, mime, name, permissions, icon, action, displayName
+		);
+	};
+	window.FileActions.display = function (parent, triggerEvent, fileList) {
+		fileList = fileList || OCA.Files.App.fileList;
+		console.warn('FileActions.display() is deprecated, please use OCA.Files.fileActions.register() which automatically redisplays actions', mime, name);
+		OCA.Files.FileActions.prototype.display.call(window.FileActions, parent, triggerEvent, fileList);
+	};
 })();
