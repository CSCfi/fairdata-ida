--- /var/ida/nextcloud-new/lib/private/L10N/Factory.php	2021-10-27 15:54:10.698762465 +0000
+++ /var/ida/nextcloud-old/lib/private/L10N/Factory.php.original	2021-10-27 10:25:31.275497211 +0000
@@ -4,20 +4,13 @@
  * @copyright 2016 Roeland Jago Douma <roeland@famdouma.nl>
  * @copyright 2016 Lukas Reschke <lukas@statuscode.ch>
  *
- * @author Arthur Schiwon <blizzz@arthur-schiwon.de>
  * @author Bart Visscher <bartv@thisnet.nl>
- * @author Bjoern Schiessle <bjoern@schiessle.org>
- * @author Christoph Wurst <christoph@winzerhof-wurst.at>
- * @author Georg Ehrke <oc.list@georgehrke.com>
- * @author GretaD <gretadoci@gmail.com>
  * @author Joas Schilling <coding@schilljs.com>
- * @author John Molakvo√¶ (skjnldsv) <skjnldsv@protonmail.com>
  * @author Lukas Reschke <lukas@statuscode.ch>
  * @author Morris Jobke <hey@morrisjobke.de>
  * @author Robin Appelman <robin@icewind.nl>
  * @author Robin McCorkell <robin@mccorkell.me.uk>
  * @author Roeland Jago Douma <roeland@famdouma.nl>
- * @author Thomas Citharel <nextcloud@tcit.fr>
  *
  * @license AGPL-3.0
  *
@@ -66,11 +59,6 @@
 	/**
 	 * @var array
 	 */
-	protected $localeCache = [];
-
-	/**
-	 * @var array
-	 */
 	protected $availableLocales = [];
 
 	/**
@@ -78,7 +66,7 @@
 	 */
 	protected $pluralFunctions = [];
 
-	public const COMMON_LANGUAGE_CODES = [
+	const COMMON_LANGUAGE_CODES = [
 		'en', 'es', 'fr', 'de', 'de_DE', 'ja', 'ar', 'ru', 'nl', 'it',
 		'pt_BR', 'pt_PT', 'da', 'fi_FI', 'nb_NO', 'sv', 'tr', 'zh_CN', 'ko'
 	];
@@ -120,10 +108,9 @@
 	 * @return \OCP\IL10N
 	 */
 	public function get($app, $lang = null, $locale = null) {
-		return new LazyL10N(function () use ($app, $lang, $locale) {
 			$app = \OC_App::cleanAppId($app);
 			if ($lang !== null) {
-				$lang = str_replace(['\0', '/', '\\', '..'], '', $lang);
+			$lang = str_replace(array('\0', '/', '\\', '..'), '', (string) $lang);
 			}
 
 			$forceLang = $this->config->getSystemValue('force_language', false);
@@ -152,7 +139,6 @@
 			}
 
 			return $this->instances[$lang][$app];
-		});
 	}
 
 	/**
@@ -365,29 +351,6 @@
 	}
 
 	/**
-	 * Return the language to use when sending something to a user
-	 *
-	 * @param IUser|null $user
-	 * @return string
-	 * @since 20.0.0
-	 */
-	public function getUserLanguage(IUser $user = null): string {
-		$language = $this->config->getSystemValue('force_language', false);
-		if ($language !== false) {
-			return $language;
-		}
-
-		if ($user instanceof IUser) {
-			$language = $this->config->getUserValue($user->getUID(), 'core', 'lang', null);
-			if ($language !== null) {
-				return $language;
-			}
-		}
-
-		return $this->config->getSystemValue('default_language', 'en');
-	}
-
-	/**
 	 * @param string $locale
 	 * @return bool
 	 */
@@ -396,14 +359,12 @@
 			return true;
 		}
 
-		if ($this->localeCache === []) {
 			$locales = $this->findAvailableLocales();
-			foreach ($locales as $l) {
-				$this->localeCache[$l['code']] = true;
-			}
-		}
+		$userLocale = array_filter($locales, function($value) use ($locale) {
+			return $locale === $value['code'];
+		});
 
-		return isset($this->localeCache[$locale]);
+		return !empty($userLocale);
 	}
 
 	/**
@@ -505,6 +466,7 @@
 
 		if (($this->isSubDirectory($transFile, $this->serverRoot . '/core/l10n/')
 				|| $this->isSubDirectory($transFile, $this->serverRoot . '/lib/l10n/')
+				|| $this->isSubDirectory($transFile, $this->serverRoot . '/settings/l10n/')
 				|| $this->isSubDirectory($transFile, \OC_App::getAppPath($app) . '/l10n/')
 			)
 			&& file_exists($transFile)) {
@@ -531,7 +493,7 @@
 	 * @return string directory
 	 */
 	protected function findL10nDir($app = null) {
-		if (in_array($app, ['core', 'lib'])) {
+		if (in_array($app, ['core', 'lib', 'settings'])) {
 			if (file_exists($this->serverRoot . '/' . $app . '/l10n/')) {
 				return $this->serverRoot . '/' . $app . '/l10n/';
 			}
@@ -562,8 +524,8 @@
 			$plural = preg_replace('#[^n0-9:\(\)\?\|\&=!<>+*/\%-]#', '', $matches[2]);
 
 			$body = str_replace(
-				[ 'plural', 'n', '$n$plurals', ],
-				[ '$plural', '$n', '$nplurals', ],
+				array( 'plural', 'n', '$n$plurals', ),
+				array( '$plural', '$n', '$nplurals', ),
 				'nplurals='. $nplurals . '; plural=' . $plural
 			);
 
@@ -616,16 +578,7 @@
 	public function getLanguages() {
 		$forceLanguage = $this->config->getSystemValue('force_language', false);
 		if ($forceLanguage !== false) {
-			$l = $this->get('lib', $forceLanguage);
-			$potentialName = $l->t('__language_name__');
-
-			return [
-				'commonlanguages' => [[
-					'code' => $forceLanguage,
-					'name' => $potentialName,
-				]],
-				'languages' => [],
-			];
+			return [];
 		}
 
 		$languageCodes = $this->findAvailableLanguages();
@@ -636,22 +589,22 @@
 		foreach ($languageCodes as $lang) {
 			$l = $this->get('lib', $lang);
 			// TRANSLATORS this is the language name for the language switcher in the personal settings and should be the localized version
-			$potentialName = $l->t('__language_name__');
+			$potentialName = (string) $l->t('__language_name__');
 			if ($l->getLanguageCode() === $lang && $potentialName[0] !== '_') {//first check if the language name is in the translation file
-				$ln = [
+				$ln = array(
 					'code' => $lang,
 					'name' => $potentialName
-				];
+				);
 			} elseif ($lang === 'en') {
-				$ln = [
+				$ln = array(
 					'code' => $lang,
 					'name' => 'English (US)'
-				];
+				);
 			} else {//fallback to language code
-				$ln = [
+				$ln = array(
 					'code' => $lang,
 					'name' => $lang
-				];
+				);
 			}
 
 			// put appropriate languages into appropriate arrays, to print them sorted
