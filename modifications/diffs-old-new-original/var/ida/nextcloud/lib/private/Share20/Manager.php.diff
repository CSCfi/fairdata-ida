--- /var/ida/nextcloud-new/lib/private/Share20/Manager.php	2021-10-27 15:54:10.713762505 +0000
+++ /var/ida/nextcloud-old/lib/private/Share20/Manager.php.original	2021-10-27 10:25:31.293497254 +0000
@@ -5,12 +5,9 @@
  * @author Arthur Schiwon <blizzz@arthur-schiwon.de>
  * @author Bjoern Schiessle <bjoern@schiessle.org>
  * @author Björn Schießle <bjoern@schiessle.org>
- * @author Christoph Wurst <christoph@winzerhof-wurst.at>
  * @author Daniel Calviño Sánchez <danxuliu@gmail.com>
- * @author Daniel Kesselberg <mail@danielkesselberg.de>
  * @author Jan-Christoph Borchardt <hey@jancborchardt.net>
  * @author Joas Schilling <coding@schilljs.com>
- * @author John Molakvoæ (skjnldsv) <skjnldsv@protonmail.com>
  * @author Julius Härtl <jus@bitgrid.net>
  * @author Lukas Reschke <lukas@statuscode.ch>
  * @author Maxence Lange <maxence@artificial-owl.com>
@@ -19,7 +16,8 @@
  * @author Pauli Järvinen <pauli.jarvinen@gmail.com>
  * @author Robin Appelman <robin@icewind.nl>
  * @author Roeland Jago Douma <roeland@famdouma.nl>
- * @author Vincent Petry <vincent@nextcloud.com>
+ * @author Stephan Müller <mail@stephanmueller.eu>
+ * @author Vincent Petry <pvince81@owncloud.com>
  *
  * @license AGPL-3.0
  *
@@ -43,8 +41,6 @@
 use OC\Files\Mount\MoveableMount;
 use OC\HintException;
 use OC\Share20\Exception\ProviderException;
-use OCA\Files_Sharing\ISharedStorage;
-use OCP\EventDispatcher\IEventDispatcher;
 use OCP\Files\File;
 use OCP\Files\Folder;
 use OCP\Files\IRootFolder;
@@ -59,19 +55,17 @@
 use OCP\IUserManager;
 use OCP\L10N\IFactory;
 use OCP\Mail\IMailer;
-use OCP\Security\Events\ValidatePasswordPolicyEvent;
 use OCP\Security\IHasher;
 use OCP\Security\ISecureRandom;
-use OCP\Share;
-use OCP\Share\Exceptions\AlreadySharedException;
 use OCP\Share\Exceptions\GenericShareException;
 use OCP\Share\Exceptions\ShareNotFound;
 use OCP\Share\IManager;
 use OCP\Share\IProviderFactory;
 use OCP\Share\IShare;
-use OCP\Share\IShareProvider;
-use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Symfony\Component\EventDispatcher\GenericEvent;
+use OCP\Share\IShareProvider;
+use OCP\Share;
 
 /**
  * This class is the communication hub for all sharing related operations.
@@ -102,8 +96,8 @@
 	private $rootFolder;
 	/** @var CappedMemoryCache */
 	private $sharingDisabledForUsersCache;
-	/** @var EventDispatcherInterface */
-	private $legacyDispatcher;
+	/** @var EventDispatcher */
+	private $eventDispatcher;
 	/** @var LegacyHooks */
 	private $legacyHooks;
 	/** @var IMailer */
@@ -112,8 +106,6 @@
 	private $urlGenerator;
 	/** @var \OC_Defaults */
 	private $defaults;
-	/** @var IEventDispatcher */
-	private $dispatcher;
 
 
 	/**
@@ -130,7 +122,7 @@
 	 * @param IProviderFactory $factory
 	 * @param IUserManager $userManager
 	 * @param IRootFolder $rootFolder
-	 * @param EventDispatcherInterface $eventDispatcher
+	 * @param EventDispatcher $eventDispatcher
 	 * @param IMailer $mailer
 	 * @param IURLGenerator $urlGenerator
 	 * @param \OC_Defaults $defaults
@@ -147,11 +139,10 @@
 			IProviderFactory $factory,
 			IUserManager $userManager,
 			IRootFolder $rootFolder,
-			EventDispatcherInterface $legacyDispatcher,
+			EventDispatcher $eventDispatcher,
 			IMailer $mailer,
 			IURLGenerator $urlGenerator,
-			\OC_Defaults $defaults,
-			IEventDispatcher $dispatcher
+			\OC_Defaults $defaults
 	) {
 		$this->logger = $logger;
 		$this->config = $config;
@@ -164,13 +155,12 @@
 		$this->factory = $factory;
 		$this->userManager = $userManager;
 		$this->rootFolder = $rootFolder;
-		$this->legacyDispatcher = $legacyDispatcher;
+		$this->eventDispatcher = $eventDispatcher;
 		$this->sharingDisabledForUsersCache = new CappedMemoryCache();
-		$this->legacyHooks = new LegacyHooks($this->legacyDispatcher);
+		$this->legacyHooks = new LegacyHooks($this->eventDispatcher);
 		$this->mailer = $mailer;
 		$this->urlGenerator = $urlGenerator;
 		$this->defaults = $defaults;
-		$this->dispatcher = $dispatcher;
 	}
 
 	/**
@@ -201,7 +191,8 @@
 
 		// Let others verify the password
 		try {
-			$this->legacyDispatcher->dispatch(new ValidatePasswordPolicyEvent($password));
+			$event = new GenericEvent($password);
+			$this->eventDispatcher->dispatch('OCP\PasswordPolicy::validate', $event);
 		} catch (HintException $e) {
 			throw new \Exception($e->getHint());
 		}
@@ -210,46 +201,45 @@
 	/**
 	 * Check for generic requirements before creating a share
 	 *
-	 * @param IShare $share
+	 * @param \OCP\Share\IShare $share
 	 * @throws \InvalidArgumentException
 	 * @throws GenericShareException
 	 *
 	 * @suppress PhanUndeclaredClassMethod
 	 */
-	protected function generalCreateChecks(IShare $share) {
-		if ($share->getShareType() === IShare::TYPE_USER) {
+	protected function generalCreateChecks(\OCP\Share\IShare $share) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_USER) {
 			// We expect a valid user as sharedWith for user shares
 			if (!$this->userManager->userExists($share->getSharedWith())) {
 				throw new \InvalidArgumentException('SharedWith is not a valid user');
 			}
-		} elseif ($share->getShareType() === IShare::TYPE_GROUP) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_GROUP) {
 			// We expect a valid group as sharedWith for group shares
 			if (!$this->groupManager->groupExists($share->getSharedWith())) {
 				throw new \InvalidArgumentException('SharedWith is not a valid group');
 			}
-		} elseif ($share->getShareType() === IShare::TYPE_LINK) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_LINK) {
 			if ($share->getSharedWith() !== null) {
 				throw new \InvalidArgumentException('SharedWith should be empty');
 			}
-		} elseif ($share->getShareType() === IShare::TYPE_REMOTE) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_REMOTE) {
 			if ($share->getSharedWith() === null) {
 				throw new \InvalidArgumentException('SharedWith should not be empty');
 			}
-		} elseif ($share->getShareType() === IShare::TYPE_REMOTE_GROUP) {
+		}  else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_REMOTE_GROUP) {
 			if ($share->getSharedWith() === null) {
 				throw new \InvalidArgumentException('SharedWith should not be empty');
 			}
-		} elseif ($share->getShareType() === IShare::TYPE_EMAIL) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_EMAIL) {
 			if ($share->getSharedWith() === null) {
 				throw new \InvalidArgumentException('SharedWith should not be empty');
 			}
-		} elseif ($share->getShareType() === IShare::TYPE_CIRCLE) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_CIRCLE) {
 			$circle = \OCA\Circles\Api\v1\Circles::detailsCircle($share->getSharedWith());
 			if ($circle === null) {
 				throw new \InvalidArgumentException('SharedWith is not a valid circle');
 			}
-		} elseif ($share->getShareType() === IShare::TYPE_ROOM) {
-		} elseif ($share->getShareType() === IShare::TYPE_DECK) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_ROOM) {
 		} else {
 			// We can't handle other types yet
 			throw new \InvalidArgumentException('unknown share type');
@@ -261,7 +251,7 @@
 		}
 
 		// Cannot share with yourself
-		if ($share->getShareType() === IShare::TYPE_USER &&
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_USER &&
 			$share->getSharedWith() === $share->getSharedBy()) {
 			throw new \InvalidArgumentException('Can’t share with yourself');
 		}
@@ -280,16 +270,18 @@
 		// And you can't share your rootfolder
 		if ($this->userManager->userExists($share->getSharedBy())) {
 			$userFolder = $this->rootFolder->getUserFolder($share->getSharedBy());
+			$userFolderPath = $userFolder->getPath();
 		} else {
 			$userFolder = $this->rootFolder->getUserFolder($share->getShareOwner());
+			$userFolderPath = $userFolder->getPath();
 		}
-		if ($userFolder->getId() === $share->getNode()->getId()) {
+		if ($userFolderPath === $share->getNode()->getPath()) {
 			throw new \InvalidArgumentException('You can’t share your root folder');
 		}
 
 		// Check if we actually have share permissions
 		if (!$share->getNode()->isShareable()) {
-			$message_t = $this->l->t('You are not allowed to share %s', [$share->getNode()->getName()]);
+			$message_t = $this->l->t('You are not allowed to share %s', [$share->getNode()->getPath()]);
 			throw new GenericShareException($message_t, $message_t, 404);
 		}
 
@@ -298,37 +290,21 @@
 			throw new \InvalidArgumentException('A share requires permissions');
 		}
 
-		$isFederatedShare = $share->getNode()->getStorage()->instanceOfStorage('\OCA\Files_Sharing\External\Storage');
-		$permissions = 0;
-
-		if (!$isFederatedShare && $share->getNode()->getOwner() && $share->getNode()->getOwner()->getUID() !== $share->getSharedBy()) {
-			$userMounts = array_filter($userFolder->getById($share->getNode()->getId()), function ($mount) {
-				// We need to filter since there might be other mountpoints that contain the file
-				// e.g. if the user has access to the same external storage that the file is originating from
-				return $mount->getStorage()->instanceOfStorage(ISharedStorage::class);
-			});
-			$userMount = array_shift($userMounts);
-			if ($userMount === null) {
-				throw new GenericShareException('Could not get proper share mount for ' . $share->getNode()->getId() . '. Failing since else the next calls are called with null');
-			}
-			$mount = $userMount->getMountPoint();
+		$mount = $share->getNode()->getMountPoint();
+		if ($share->getNode()->getOwner()->getUID() !== $share->getSharedBy()) {
 			// When it's a reshare use the parent share permissions as maximum
 			$userMountPointId = $mount->getStorageRootId();
 			$userMountPoints = $userFolder->getById($userMountPointId);
 			$userMountPoint = array_shift($userMountPoints);
 
-			if ($userMountPoint === null) {
-				throw new GenericShareException('Could not get proper user mount for ' . $userMountPointId . '. Failing since else the next calls are called with null');
-			}
-
 			/* Check if this is an incoming share */
-			$incomingShares = $this->getSharedWith($share->getSharedBy(), IShare::TYPE_USER, $userMountPoint, -1, 0);
-			$incomingShares = array_merge($incomingShares, $this->getSharedWith($share->getSharedBy(), IShare::TYPE_GROUP, $userMountPoint, -1, 0));
-			$incomingShares = array_merge($incomingShares, $this->getSharedWith($share->getSharedBy(), IShare::TYPE_CIRCLE, $userMountPoint, -1, 0));
-			$incomingShares = array_merge($incomingShares, $this->getSharedWith($share->getSharedBy(), IShare::TYPE_ROOM, $userMountPoint, -1, 0));
+			$incomingShares = $this->getSharedWith($share->getSharedBy(), Share::SHARE_TYPE_USER, $userMountPoint, -1, 0);
+			$incomingShares = array_merge($incomingShares, $this->getSharedWith($share->getSharedBy(), Share::SHARE_TYPE_GROUP, $userMountPoint, -1, 0));
+			$incomingShares = array_merge($incomingShares, $this->getSharedWith($share->getSharedBy(), Share::SHARE_TYPE_ROOM, $userMountPoint, -1, 0));
 
-			/** @var IShare[] $incomingShares */
+			/** @var \OCP\Share\IShare[] $incomingShares */
 			if (!empty($incomingShares)) {
+				$permissions = 0;
 				foreach ($incomingShares as $incomingShare) {
 					$permissions |= $incomingShare->getPermissions();
 				}
@@ -340,23 +316,22 @@
 			 * while we 'most likely' do have that on the storage.
 			 */
 			$permissions = $share->getNode()->getPermissions();
-			if (!($share->getNode()->getMountPoint() instanceof MoveableMount)) {
+			if (!($mount instanceof MoveableMount)) {
 				$permissions |= \OCP\Constants::PERMISSION_DELETE | \OCP\Constants::PERMISSION_UPDATE;
 			}
 		}
 
 		// Check that we do not share with more permissions than we have
 		if ($share->getPermissions() & ~$permissions) {
-			$path = $userFolder->getRelativePath($share->getNode()->getPath());
-			$message_t = $this->l->t('Can’t increase permissions of %s', [$path]);
+			$message_t = $this->l->t('Can’t increase permissions of %s', [$share->getNode()->getPath()]);
 			throw new GenericShareException($message_t, $message_t, 404);
 		}
 
 
 		// Check that read permissions are always set
 		// Link shares are allowed to have no read permissions to allow upload to hidden folders
-		$noReadPermissionRequired = $share->getShareType() === IShare::TYPE_LINK
-			|| $share->getShareType() === IShare::TYPE_EMAIL;
+		$noReadPermissionRequired = $share->getShareType() === \OCP\Share::SHARE_TYPE_LINK
+			|| $share->getShareType() === \OCP\Share::SHARE_TYPE_EMAIL;
 		if (!$noReadPermissionRequired &&
 			($share->getPermissions() & \OCP\Constants::PERMISSION_READ) === 0) {
 			throw new \InvalidArgumentException('Shares need at least read permissions');
@@ -377,89 +352,14 @@
 	/**
 	 * Validate if the expiration date fits the system settings
 	 *
-	 * @param IShare $share The share to validate the expiration date of
-	 * @return IShare The modified share object
+	 * @param \OCP\Share\IShare $share The share to validate the expiration date of
+	 * @return \OCP\Share\IShare The modified share object
 	 * @throws GenericShareException
 	 * @throws \InvalidArgumentException
 	 * @throws \Exception
 	 */
-	protected function validateExpirationDateInternal(IShare $share) {
-		$expirationDate = $share->getExpirationDate();
-
-		if ($expirationDate !== null) {
-			//Make sure the expiration date is a date
-			$expirationDate->setTime(0, 0, 0);
-
-			$date = new \DateTime();
-			$date->setTime(0, 0, 0);
-			if ($date >= $expirationDate) {
-				$message = $this->l->t('Expiration date is in the past');
-				throw new GenericShareException($message, $message, 404);
-			}
-		}
-
-		// If expiredate is empty set a default one if there is a default
-		$fullId = null;
-		try {
-			$fullId = $share->getFullId();
-		} catch (\UnexpectedValueException $e) {
-			// This is a new share
-		}
-
-		if ($fullId === null && $expirationDate === null && $this->shareApiInternalDefaultExpireDate()) {
-			$expirationDate = new \DateTime();
-			$expirationDate->setTime(0,0,0);
-
-			$days = (int)$this->config->getAppValue('core', 'internal_defaultExpDays', (string)$this->shareApiInternalDefaultExpireDays());
-			if ($days > $this->shareApiInternalDefaultExpireDays()) {
-				$days = $this->shareApiInternalDefaultExpireDays();
-			}
-			$expirationDate->add(new \DateInterval('P'.$days.'D'));
-		}
-
-		// If we enforce the expiration date check that is does not exceed
-		if ($this->shareApiInternalDefaultExpireDateEnforced()) {
-			if ($expirationDate === null) {
-				throw new \InvalidArgumentException('Expiration date is enforced');
-			}
-
-			$date = new \DateTime();
-			$date->setTime(0, 0, 0);
-			$date->add(new \DateInterval('P' . $this->shareApiInternalDefaultExpireDays() . 'D'));
-			if ($date < $expirationDate) {
-				$message = $this->l->t('Can’t set expiration date more than %s days in the future', [$this->shareApiInternalDefaultExpireDays()]);
-				throw new GenericShareException($message, $message, 404);
-			}
-		}
-
-		$accepted = true;
-		$message = '';
-		\OCP\Util::emitHook('\OC\Share', 'verifyExpirationDate', [
-			'expirationDate' => &$expirationDate,
-			'accepted' => &$accepted,
-			'message' => &$message,
-			'passwordSet' => $share->getPassword() !== null,
-		]);
-
-		if (!$accepted) {
-			throw new \Exception($message);
-		}
-
-		$share->setExpirationDate($expirationDate);
-
-		return $share;
-	}
+	protected function validateExpirationDate(\OCP\Share\IShare $share) {
 
-	/**
-	 * Validate if the expiration date fits the system settings
-	 *
-	 * @param IShare $share The share to validate the expiration date of
-	 * @return IShare The modified share object
-	 * @throws GenericShareException
-	 * @throws \InvalidArgumentException
-	 * @throws \Exception
-	 */
-	protected function validateExpirationDateLink(IShare $share) {
 		$expirationDate = $share->getExpirationDate();
 
 		if ($expirationDate !== null) {
@@ -485,12 +385,7 @@
 		if ($fullId === null && $expirationDate === null && $this->shareApiLinkDefaultExpireDate()) {
 			$expirationDate = new \DateTime();
 			$expirationDate->setTime(0,0,0);
-
-			$days = (int)$this->config->getAppValue('core', 'link_defaultExpDays', $this->shareApiLinkDefaultExpireDays());
-			if ($days > $this->shareApiLinkDefaultExpireDays()) {
-				$days = $this->shareApiLinkDefaultExpireDays();
-			}
-			$expirationDate->add(new \DateInterval('P'.$days.'D'));
+			$expirationDate->add(new \DateInterval('P'.$this->shareApiLinkDefaultExpireDays().'D'));
 		}
 
 		// If we enforce the expiration date check that is does not exceed
@@ -529,10 +424,10 @@
 	/**
 	 * Check for pre share requirements for user shares
 	 *
-	 * @param IShare $share
+	 * @param \OCP\Share\IShare $share
 	 * @throws \Exception
 	 */
-	protected function userCreateChecks(IShare $share) {
+	protected function userCreateChecks(\OCP\Share\IShare $share) {
 		// Check if we can share with group members only
 		if ($this->shareWithGroupMembersOnly()) {
 			$sharedBy = $this->userManager->get($share->getSharedBy());
@@ -543,8 +438,7 @@
 					$this->groupManager->getUserGroupIds($sharedWith)
 			);
 			if (empty($groups)) {
-				$message_t = $this->l->t('Sharing is only allowed with group members');
-				throw new \Exception($message_t);
+				throw new \Exception('Sharing is only allowed with group members');
 			}
 		}
 
@@ -553,7 +447,7 @@
 		 *
 		 * Also this is not what we want in the future.. then we want to squash identical shares.
 		 */
-		$provider = $this->factory->getProviderForType(IShare::TYPE_USER);
+		$provider = $this->factory->getProviderForType(\OCP\Share::SHARE_TYPE_USER);
 		$existingShares = $provider->getSharesByPath($share->getNode());
 		foreach ($existingShares as $existingShare) {
 			// Ignore if it is the same share
@@ -565,21 +459,19 @@
 				//Shares are not identical
 			}
 
-			// Identical share already exists
+			// Identical share already existst
 			if ($existingShare->getSharedWith() === $share->getSharedWith() && $existingShare->getShareType() === $share->getShareType()) {
-				$message = $this->l->t('Sharing %s failed, because this item is already shared with user %s', [$share->getNode()->getName(), $share->getSharedWithDisplayName()]);
-				throw new AlreadySharedException($message, $existingShare);
+				throw new \Exception('Path is already shared with this user');
 			}
 
 			// The share is already shared with this user via a group share
-			if ($existingShare->getShareType() === IShare::TYPE_GROUP) {
+			if ($existingShare->getShareType() === \OCP\Share::SHARE_TYPE_GROUP) {
 				$group = $this->groupManager->get($existingShare->getSharedWith());
 				if (!is_null($group)) {
 					$user = $this->userManager->get($share->getSharedWith());
 
 					if ($group->inGroup($user) && $existingShare->getShareOwner() !== $share->getShareOwner()) {
-						$message = $this->l->t('Sharing %s failed, because this item is already shared with user %s', [$share->getNode()->getName(), $share->getSharedWithDisplayName()]);
-						throw new AlreadySharedException($message, $existingShare);
+						throw new \Exception('Path is already shared with this user');
 					}
 				}
 			}
@@ -589,10 +481,10 @@
 	/**
 	 * Check for pre share requirements for group shares
 	 *
-	 * @param IShare $share
+	 * @param \OCP\Share\IShare $share
 	 * @throws \Exception
 	 */
-	protected function groupCreateChecks(IShare $share) {
+	protected function groupCreateChecks(\OCP\Share\IShare $share) {
 		// Verify group shares are allowed
 		if (!$this->allowGroupSharing()) {
 			throw new \Exception('Group sharing is now allowed');
@@ -612,7 +504,7 @@
 		 *
 		 * Also this is not what we want in the future.. then we want to squash identical shares.
 		 */
-		$provider = $this->factory->getProviderForType(IShare::TYPE_GROUP);
+		$provider = $this->factory->getProviderForType(\OCP\Share::SHARE_TYPE_GROUP);
 		$existingShares = $provider->getSharesByPath($share->getNode());
 		foreach ($existingShares as $existingShare) {
 			try {
@@ -624,7 +516,7 @@
 			}
 
 			if ($existingShare->getSharedWith() === $share->getSharedWith() && $existingShare->getShareType() === $share->getShareType()) {
-				throw new AlreadySharedException('Path is already shared with this group', $existingShare);
+				throw new \Exception('Path is already shared with this group');
 			}
 		}
 	}
@@ -632,15 +524,20 @@
 	/**
 	 * Check for pre share requirements for link shares
 	 *
-	 * @param IShare $share
+	 * @param \OCP\Share\IShare $share
 	 * @throws \Exception
 	 */
-	protected function linkCreateChecks(IShare $share) {
+	protected function linkCreateChecks(\OCP\Share\IShare $share) {
 		// Are link shares allowed?
 		if (!$this->shareApiAllowLinks()) {
 			throw new \Exception('Link sharing is not allowed');
 		}
 
+		// Link shares by definition can't have share permissions
+		if ($share->getPermissions() & \OCP\Constants::PERMISSION_SHARE) {
+			throw new \InvalidArgumentException('Link shares can’t have reshare permissions');
+		}
+
 		// Check if public upload is allowed
 		if (!$this->shareApiLinkAllowPublicUpload() &&
 			($share->getPermissions() & (\OCP\Constants::PERMISSION_CREATE | \OCP\Constants::PERMISSION_UPDATE | \OCP\Constants::PERMISSION_DELETE))) {
@@ -657,9 +554,9 @@
 	 *
 	 * FIXME: Remove once multiple link shares can be properly displayed
 	 *
-	 * @param IShare $share
+	 * @param \OCP\Share\IShare $share
 	 */
-	protected function setLinkParent(IShare $share) {
+	protected function setLinkParent(\OCP\Share\IShare $share) {
 
 		// No sense in checking if the method is not there.
 		if (method_exists($share, 'setParent')) {
@@ -689,10 +586,10 @@
 	/**
 	 * Check if the user that is sharing can actually share
 	 *
-	 * @param IShare $share
+	 * @param \OCP\Share\IShare $share
 	 * @throws \Exception
 	 */
-	protected function canShare(IShare $share) {
+	protected function canShare(\OCP\Share\IShare $share) {
 		if (!$this->shareApiEnabled()) {
 			throw new \Exception('Sharing is disabled');
 		}
@@ -705,13 +602,13 @@
 	/**
 	 * Share a path
 	 *
-	 * @param IShare $share
-	 * @return IShare The share object
+	 * @param \OCP\Share\IShare $share
+	 * @return Share The share object
 	 * @throws \Exception
 	 *
 	 * TODO: handle link share permissions or check them
 	 */
-	public function createShare(IShare $share) {
+	public function createShare(\OCP\Share\IShare $share) {
 		$this->canShare($share);
 
 		$this->generalCreateChecks($share);
@@ -731,26 +628,15 @@
 			}
 			$share->setShareOwner($parent->getOwner()->getUID());
 		} else {
-			if ($share->getNode()->getOwner()) {
 				$share->setShareOwner($share->getNode()->getOwner()->getUID());
-			} else {
-				$share->setShareOwner($share->getSharedBy());
-			}
 		}
 
-		try {
 			//Verify share type
-			if ($share->getShareType() === IShare::TYPE_USER) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_USER) {
 				$this->userCreateChecks($share);
-
-				//Verify the expiration date
-				$share = $this->validateExpirationDateInternal($share);
-			} elseif ($share->getShareType() === IShare::TYPE_GROUP) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_GROUP) {
 				$this->groupCreateChecks($share);
-
-				//Verify the expiration date
-				$share = $this->validateExpirationDateInternal($share);
-			} elseif ($share->getShareType() === IShare::TYPE_LINK) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_LINK) {
 				$this->linkCreateChecks($share);
 				$this->setLinkParent($share);
 
@@ -765,7 +651,7 @@
 				);
 
 				//Verify the expiration date
-				$share = $this->validateExpirationDateLink($share);
+			$this->validateExpirationDate($share);
 
 				//Verify the password
 				$this->verifyPassword($share->getPassword());
@@ -774,7 +660,7 @@
 				if ($share->getPassword() !== null) {
 					$share->setPassword($this->hasher->hash($share->getPassword()));
 				}
-			} elseif ($share->getShareType() === IShare::TYPE_EMAIL) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_EMAIL) {
 				$share->setToken(
 					$this->secureRandom->generate(
 						\OC\Share\Constants::TOKEN_LENGTH,
@@ -784,7 +670,7 @@
 			}
 
 			// Cannot share with the owner
-			if ($share->getShareType() === IShare::TYPE_USER &&
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_USER &&
 				$share->getSharedWith() === $share->getShareOwner()) {
 				throw new \InvalidArgumentException('Can’t share with the share owner');
 			}
@@ -796,7 +682,7 @@
 
 			// Pre share event
 			$event = new GenericEvent($share);
-			$this->legacyDispatcher->dispatch('OCP\Share::preShare', $event);
+		$this->eventDispatcher->dispatch('OCP\Share::preShare', $event);
 			if ($event->isPropagationStopped() && $event->hasArgument('error')) {
 				throw new \Exception($event->getArgument('error'));
 			}
@@ -807,35 +693,23 @@
 			//reuse the node we already have
 			$share->setNode($oldShare->getNode());
 
-			// Reset the target if it is null for the new share
-			if ($share->getTarget() === '') {
-				$share->setTarget($target);
-			}
-		} catch (AlreadySharedException $e) {
-			// if a share for the same target already exists, dont create a new one, but do trigger the hooks and notifications again
-			$share = $e->getExistingShare();
-		}
-
 		// Post share event
 		$event = new GenericEvent($share);
-		$this->legacyDispatcher->dispatch('OCP\Share::postShare', $event);
-
-		$this->dispatcher->dispatchTyped(new Share\Events\ShareCreatedEvent($share));
+		$this->eventDispatcher->dispatch('OCP\Share::postShare', $event);
 
-		if ($this->config->getSystemValueBool('sharing.enable_share_mail', true)
-			&& $share->getShareType() === IShare::TYPE_USER) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_USER) {
 			$mailSend = $share->getMailSend();
 			if ($mailSend === true) {
 				$user = $this->userManager->get($share->getSharedWith());
 				if ($user !== null) {
 					$emailAddress = $user->getEMailAddress();
 					if ($emailAddress !== null && $emailAddress !== '') {
-						$userLang = $this->l10nFactory->getUserLanguage($user);
+						$userLang = $this->config->getUserValue($share->getSharedWith(), 'core', 'lang', null);
 						$l = $this->l10nFactory->get('lib', $userLang);
 						$this->sendMailNotification(
 							$l,
 							$share->getNode()->getName(),
-							$this->urlGenerator->linkToRouteAbsolute('files_sharing.Accept.accept', ['shareId' => $share->getFullId()]),
+							$this->urlGenerator->linkToRouteAbsolute('files.viewcontroller.showFile', ['fileid' => $share->getNode()->getId()]),
 							$share->getSharedBy(),
 							$emailAddress,
 							$share->getExpirationDate()
@@ -886,7 +760,7 @@
 			'shareWith' => $shareWith,
 		]);
 
-		$emailTemplate->setSubject($l->t('%1$s shared »%2$s« with you', [$initiatorDisplayName, $filename]));
+		$emailTemplate->setSubject($l->t('%1$s shared »%2$s« with you', array($initiatorDisplayName, $filename)));
 		$emailTemplate->addHeader();
 		$emailTemplate->addHeading($l->t('%1$s shared »%2$s« with you', [$initiatorDisplayName, $filename]), false);
 		$text = $l->t('%1$s shared »%2$s« with you.', [$initiatorDisplayName, $filename]);
@@ -911,16 +785,16 @@
 				$instanceName
 			]
 		);
-		$message->setFrom([\OCP\Util::getDefaultEmailAddress('noreply') => $senderName]);
+		$message->setFrom([\OCP\Util::getDefaultEmailAddress($instanceName) => $senderName]);
 
 		// The "Reply-To" is set to the sharer if an mail address is configured
 		// also the default footer contains a "Do not reply" which needs to be adjusted.
 		$initiatorEmail = $initiatorUser->getEMailAddress();
 		if ($initiatorEmail !== null) {
 			$message->setReplyTo([$initiatorEmail => $initiatorDisplayName]);
-			$emailTemplate->addFooter($instanceName . ($this->defaults->getSlogan($l->getLanguageCode()) !== '' ? ' - ' . $this->defaults->getSlogan($l->getLanguageCode()) : ''));
+			$emailTemplate->addFooter($instanceName . ($this->defaults->getSlogan() !== '' ? ' - ' . $this->defaults->getSlogan() : ''));
 		} else {
-			$emailTemplate->addFooter('', $l->getLanguageCode());
+			$emailTemplate->addFooter();
 		}
 
 		$message->useTemplate($emailTemplate);
@@ -938,11 +812,11 @@
 	/**
 	 * Update a share
 	 *
-	 * @param IShare $share
-	 * @return IShare The share object
+	 * @param \OCP\Share\IShare $share
+	 * @return \OCP\Share\IShare The share object
 	 * @throws \InvalidArgumentException
 	 */
-	public function updateShare(IShare $share) {
+	public function updateShare(\OCP\Share\IShare $share) {
 		$expirationDateUpdated = false;
 
 		$this->canShare($share);
@@ -960,56 +834,39 @@
 
 		// We can only change the recipient on user shares
 		if ($share->getSharedWith() !== $originalShare->getSharedWith() &&
-			$share->getShareType() !== IShare::TYPE_USER) {
+		    $share->getShareType() !== \OCP\Share::SHARE_TYPE_USER) {
 			throw new \InvalidArgumentException('Can only update recipient on user shares');
 		}
 
 		// Cannot share with the owner
-		if ($share->getShareType() === IShare::TYPE_USER &&
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_USER &&
 			$share->getSharedWith() === $share->getShareOwner()) {
 			throw new \InvalidArgumentException('Can’t share with the share owner');
 		}
 
 		$this->generalCreateChecks($share);
 
-		if ($share->getShareType() === IShare::TYPE_USER) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_USER) {
 			$this->userCreateChecks($share);
-
-			if ($share->getExpirationDate() != $originalShare->getExpirationDate()) {
-				//Verify the expiration date
-				$this->validateExpirationDateInternal($share);
-				$expirationDateUpdated = true;
-			}
-		} elseif ($share->getShareType() === IShare::TYPE_GROUP) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_GROUP) {
 			$this->groupCreateChecks($share);
-
-			if ($share->getExpirationDate() != $originalShare->getExpirationDate()) {
-				//Verify the expiration date
-				$this->validateExpirationDateInternal($share);
-				$expirationDateUpdated = true;
-			}
-		} elseif ($share->getShareType() === IShare::TYPE_LINK) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_LINK) {
 			$this->linkCreateChecks($share);
 
-			$plainTextPassword = $share->getPassword();
-
 			$this->updateSharePasswordIfNeeded($share, $originalShare);
 
-			if (empty($plainTextPassword) && $share->getSendPasswordByTalk()) {
-				throw new \InvalidArgumentException('Can’t enable sending the password by Talk with an empty password');
-			}
-
 			if ($share->getExpirationDate() != $originalShare->getExpirationDate()) {
 				//Verify the expiration date
-				$this->validateExpirationDateLink($share);
+				$this->validateExpirationDate($share);
 				$expirationDateUpdated = true;
 			}
-		} elseif ($share->getShareType() === IShare::TYPE_EMAIL) {
+		} else if ($share->getShareType() === \OCP\Share::SHARE_TYPE_EMAIL) {
 			// The new password is not set again if it is the same as the old
-			// one.
+			// one, unless when switching from sending by Talk to sending by
+			// mail.
 			$plainTextPassword = $share->getPassword();
-			$updatedPassword = $this->updateSharePasswordIfNeeded($share, $originalShare);
-			if (!empty($plainTextPassword) && !$updatedPassword) {
+			if (!empty($plainTextPassword) && !$this->updateSharePasswordIfNeeded($share, $originalShare) &&
+					!($originalShare->getSendPasswordByTalk() && !$share->getSendPasswordByTalk())) {
 				$plainTextPassword = null;
 			}
 			if (empty($plainTextPassword) && !$originalShare->getSendPasswordByTalk() && $share->getSendPasswordByTalk()) {
@@ -1017,8 +874,6 @@
 				// would already have access to the share without having to call
 				// the sharer to verify her identity
 				throw new \InvalidArgumentException('Can’t enable sending the password by Talk without setting a new password');
-			} elseif (empty($plainTextPassword) && $originalShare->getSendPasswordByTalk() && !$share->getSendPasswordByTalk()) {
-				throw new \InvalidArgumentException('Can’t disable sending the password by Talk without setting a new password');
 			}
 		}
 
@@ -1026,7 +881,7 @@
 
 		// Now update the share!
 		$provider = $this->factory->getProviderForType($share->getShareType());
-		if ($share->getShareType() === IShare::TYPE_EMAIL) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_EMAIL) {
 			$share = $provider->update($share, $plainTextPassword);
 		} else {
 			$share = $provider->update($share);
@@ -1057,7 +912,7 @@
 			} else {
 				$userFolder = $this->rootFolder->getUserFolder($share->getSharedBy());
 			}
-			\OC_Hook::emit(Share::class, 'post_update_permissions', [
+			\OC_Hook::emit(Share::class, 'post_update_permissions', array(
 				'itemType' => $share->getNode() instanceof \OCP\Files\File ? 'file' : 'folder',
 				'itemSource' => $share->getNode()->getId(),
 				'shareType' => $share->getShareType(),
@@ -1065,32 +920,8 @@
 				'uidOwner' => $share->getSharedBy(),
 				'permissions' => $share->getPermissions(),
 				'path' => $userFolder->getRelativePath($share->getNode()->getPath()),
-			]);
-		}
-
-		return $share;
-	}
-
-	/**
-	 * Accept a share.
-	 *
-	 * @param IShare $share
-	 * @param string $recipientId
-	 * @return IShare The share object
-	 * @throws \InvalidArgumentException
-	 * @since 9.0.0
-	 */
-	public function acceptShare(IShare $share, string $recipientId): IShare {
-		[$providerId, ] = $this->splitFullId($share->getFullId());
-		$provider = $this->factory->getProvider($providerId);
-
-		if (!method_exists($provider, 'acceptShare')) {
-			// TODO FIX ME
-			throw new \InvalidArgumentException('Share provider does not support accepting');
+			));
 		}
-		$provider->acceptShare($share, $recipientId);
-		$event = new GenericEvent($share);
-		$this->legacyDispatcher->dispatch('OCP\Share::postAcceptShare', $event);
 
 		return $share;
 	}
@@ -1099,37 +930,23 @@
 	 * Updates the password of the given share if it is not the same as the
 	 * password of the original share.
 	 *
-	 * @param IShare $share the share to update its password.
-	 * @param IShare $originalShare the original share to compare its
+	 * @param \OCP\Share\IShare $share the share to update its password.
+	 * @param \OCP\Share\IShare $originalShare the original share to compare its
 	 *        password with.
 	 * @return boolean whether the password was updated or not.
 	 */
-	private function updateSharePasswordIfNeeded(IShare $share, IShare $originalShare) {
-		$passwordsAreDifferent = ($share->getPassword() !== $originalShare->getPassword()) &&
-									(($share->getPassword() !== null && $originalShare->getPassword() === null) ||
-									 ($share->getPassword() === null && $originalShare->getPassword() !== null) ||
-									 ($share->getPassword() !== null && $originalShare->getPassword() !== null &&
-										!$this->hasher->verify($share->getPassword(), $originalShare->getPassword())));
-
+	private function updateSharePasswordIfNeeded(\OCP\Share\IShare $share, \OCP\Share\IShare $originalShare) {
 		// Password updated.
-		if ($passwordsAreDifferent) {
+		if ($share->getPassword() !== $originalShare->getPassword()) {
 			//Verify the password
 			$this->verifyPassword($share->getPassword());
 
 			// If a password is set. Hash it!
-			if (!empty($share->getPassword())) {
+			if ($share->getPassword() !== null) {
 				$share->setPassword($this->hasher->hash($share->getPassword()));
 
 				return true;
-			} else {
-				// Empty string and null are seen as NOT password protected
-				$share->setPassword(null);
-				return true;
 			}
-		} else {
-			// Reset the password to the original one, as it is either the same
-			// as the "new" password or a hashed version of it.
-			$share->setPassword($originalShare->getPassword());
 		}
 
 		return false;
@@ -1139,10 +956,10 @@
 	 * Delete all the children of this share
 	 * FIXME: remove once https://github.com/owncloud/core/pull/21660 is in
 	 *
-	 * @param IShare $share
-	 * @return IShare[] List of deleted shares
+	 * @param \OCP\Share\IShare $share
+	 * @return \OCP\Share\IShare[] List of deleted shares
 	 */
-	protected function deleteChildren(IShare $share) {
+	protected function deleteChildren(\OCP\Share\IShare $share) {
 		$deletedShares = [];
 
 		$provider = $this->factory->getProviderForType($share->getShareType());
@@ -1152,7 +969,6 @@
 			$deletedShares = array_merge($deletedShares, $deletedChildren);
 
 			$provider->delete($child);
-			$this->dispatcher->dispatchTyped(new Share\Events\ShareDeletedEvent($child));
 			$deletedShares[] = $child;
 		}
 
@@ -1162,11 +978,12 @@
 	/**
 	 * Delete a share
 	 *
-	 * @param IShare $share
+	 * @param \OCP\Share\IShare $share
 	 * @throws ShareNotFound
 	 * @throws \InvalidArgumentException
 	 */
-	public function deleteShare(IShare $share) {
+	public function deleteShare(\OCP\Share\IShare $share) {
+
 		try {
 			$share->getFullId();
 		} catch (\UnexpectedValueException $e) {
@@ -1174,7 +991,7 @@
 		}
 
 		$event = new GenericEvent($share);
-		$this->legacyDispatcher->dispatch('OCP\Share::preUnshare', $event);
+		$this->eventDispatcher->dispatch('OCP\Share::preUnshare', $event);
 
 		// Get all children and delete them as well
 		$deletedShares = $this->deleteChildren($share);
@@ -1183,14 +1000,12 @@
 		$provider = $this->factory->getProviderForType($share->getShareType());
 		$provider->delete($share);
 
-		$this->dispatcher->dispatchTyped(new Share\Events\ShareDeletedEvent($share));
-
 		// All the deleted shares caused by this delete
 		$deletedShares[] = $share;
 
 		// Emit post hook
 		$event->setArgument('deletedShares', $deletedShares);
-		$this->legacyDispatcher->dispatch('OCP\Share::postUnshare', $event);
+		$this->eventDispatcher->dispatch('OCP\Share::postUnshare', $event);
 	}
 
 
@@ -1200,16 +1015,16 @@
 	 * the users in a groups deletes that share. But the provider should
 	 * handle this.
 	 *
-	 * @param IShare $share
+	 * @param \OCP\Share\IShare $share
 	 * @param string $recipientId
 	 */
-	public function deleteFromSelf(IShare $share, $recipientId) {
+	public function deleteFromSelf(\OCP\Share\IShare $share, $recipientId) {
 		list($providerId, ) = $this->splitFullId($share->getFullId());
 		$provider = $this->factory->getProvider($providerId);
 
 		$provider->deleteFromSelf($share, $recipientId);
 		$event = new GenericEvent($share);
-		$this->legacyDispatcher->dispatch('OCP\Share::postUnshareFromSelf', $event);
+		$this->eventDispatcher->dispatch('OCP\Share::postUnshareFromSelf', $event);
 	}
 
 	public function restoreShare(IShare $share, string $recipientId): IShare {
@@ -1222,16 +1037,16 @@
 	/**
 	 * @inheritdoc
 	 */
-	public function moveShare(IShare $share, $recipientId) {
-		if ($share->getShareType() === IShare::TYPE_LINK) {
+	public function moveShare(\OCP\Share\IShare $share, $recipientId) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_LINK) {
 			throw new \InvalidArgumentException('Can’t change target of link share');
 		}
 
-		if ($share->getShareType() === IShare::TYPE_USER && $share->getSharedWith() !== $recipientId) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_USER && $share->getSharedWith() !== $recipientId) {
 			throw new \InvalidArgumentException('Invalid recipient');
 		}
 
-		if ($share->getShareType() === IShare::TYPE_GROUP) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_GROUP) {
 			$sharedWith = $this->groupManager->get($share->getSharedWith());
 			if (is_null($sharedWith)) {
 				throw new \InvalidArgumentException('Group "' . $share->getSharedWith() . '" does not exist');
@@ -1245,7 +1060,7 @@
 		list($providerId, ) = $this->splitFullId($share->getFullId());
 		$provider = $this->factory->getProvider($providerId);
 
-		return $provider->move($share, $recipientId);
+		$provider->move($share, $recipientId);
 	}
 
 	public function getSharesInFolder($userId, Folder $node, $reshares = false) {
@@ -1420,7 +1236,7 @@
 	 * Get the share by token possible with password
 	 *
 	 * @param string $token
-	 * @return IShare
+	 * @return Share
 	 *
 	 * @throws ShareNotFound
 	 */
@@ -1432,7 +1248,7 @@
 		$share = null;
 		try {
 			if ($this->shareApiAllowLinks()) {
-				$provider = $this->factory->getProviderForType(IShare::TYPE_LINK);
+				$provider = $this->factory->getProviderForType(\OCP\Share::SHARE_TYPE_LINK);
 				$share = $provider->getShareByToken($token);
 			}
 		} catch (ProviderException $e) {
@@ -1443,7 +1259,7 @@
 		// If it is not a link share try to fetch a federated share by token
 		if ($share === null) {
 			try {
-				$provider = $this->factory->getProviderForType(IShare::TYPE_REMOTE);
+				$provider = $this->factory->getProviderForType(\OCP\Share::SHARE_TYPE_REMOTE);
 				$share = $provider->getShareByToken($token);
 			} catch (ProviderException $e) {
 			} catch (ShareNotFound $e) {
@@ -1451,27 +1267,27 @@
 		}
 
 		// If it is not a link share try to fetch a mail share by token
-		if ($share === null && $this->shareProviderExists(IShare::TYPE_EMAIL)) {
+		if ($share === null && $this->shareProviderExists(\OCP\Share::SHARE_TYPE_EMAIL)) {
 			try {
-				$provider = $this->factory->getProviderForType(IShare::TYPE_EMAIL);
+				$provider = $this->factory->getProviderForType(\OCP\Share::SHARE_TYPE_EMAIL);
 				$share = $provider->getShareByToken($token);
 			} catch (ProviderException $e) {
 			} catch (ShareNotFound $e) {
 			}
 		}
 
-		if ($share === null && $this->shareProviderExists(IShare::TYPE_CIRCLE)) {
+		if ($share === null && $this->shareProviderExists(\OCP\Share::SHARE_TYPE_CIRCLE)) {
 			try {
-				$provider = $this->factory->getProviderForType(IShare::TYPE_CIRCLE);
+				$provider = $this->factory->getProviderForType(\OCP\Share::SHARE_TYPE_CIRCLE);
 				$share = $provider->getShareByToken($token);
 			} catch (ProviderException $e) {
 			} catch (ShareNotFound $e) {
 			}
 		}
 
-		if ($share === null && $this->shareProviderExists(IShare::TYPE_ROOM)) {
+		if ($share === null && $this->shareProviderExists(\OCP\Share::SHARE_TYPE_ROOM)) {
 			try {
-				$provider = $this->factory->getProviderForType(IShare::TYPE_ROOM);
+				$provider = $this->factory->getProviderForType(\OCP\Share::SHARE_TYPE_ROOM);
 				$share = $provider->getShareByToken($token);
 			} catch (ProviderException $e) {
 			} catch (ShareNotFound $e) {
@@ -1487,7 +1303,7 @@
 		/*
 		 * Reduce the permissions for link shares if public upload is not enabled
 		 */
-		if ($share->getShareType() === IShare::TYPE_LINK &&
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_LINK &&
 			!$this->shareApiLinkAllowPublicUpload()) {
 			$share->setPermissions($share->getPermissions() & ~(\OCP\Constants::PERMISSION_CREATE | \OCP\Constants::PERMISSION_UPDATE));
 		}
@@ -1496,7 +1312,8 @@
 	}
 
 	protected function checkExpireDate($share) {
-		if ($share->isExpired()) {
+		if ($share->getExpirationDate() !== null &&
+			$share->getExpirationDate() <= new \DateTime()) {
 			$this->deleteShare($share);
 			throw new ShareNotFound($this->l->t('The requested share does not exist anymore'));
 		}
@@ -1505,14 +1323,13 @@
 	/**
 	 * Verify the password of a public share
 	 *
-	 * @param IShare $share
+	 * @param \OCP\Share\IShare $share
 	 * @param string $password
 	 * @return bool
 	 */
-	public function checkPassword(IShare $share, $password) {
-		$passwordProtected = $share->getShareType() !== IShare::TYPE_LINK
-							 || $share->getShareType() !== IShare::TYPE_EMAIL
-							 || $share->getShareType() !== IShare::TYPE_CIRCLE;
+	public function checkPassword(\OCP\Share\IShare $share, $password) {
+		$passwordProtected = $share->getShareType() !== \OCP\Share::SHARE_TYPE_LINK
+			|| $share->getShareType() !== \OCP\Share::SHARE_TYPE_EMAIL;
 		if (!$passwordProtected) {
 			//TODO maybe exception?
 			return false;
@@ -1540,7 +1357,7 @@
 	 * @inheritdoc
 	 */
 	public function userDeleted($uid) {
-		$types = [IShare::TYPE_USER, IShare::TYPE_GROUP, IShare::TYPE_LINK, IShare::TYPE_REMOTE, IShare::TYPE_EMAIL];
+		$types = [\OCP\Share::SHARE_TYPE_USER, \OCP\Share::SHARE_TYPE_GROUP, \OCP\Share::SHARE_TYPE_LINK, \OCP\Share::SHARE_TYPE_REMOTE, \OCP\Share::SHARE_TYPE_EMAIL];
 
 		foreach ($types as $type) {
 			try {
@@ -1556,28 +1373,15 @@
 	 * @inheritdoc
 	 */
 	public function groupDeleted($gid) {
-		$provider = $this->factory->getProviderForType(IShare::TYPE_GROUP);
+		$provider = $this->factory->getProviderForType(\OCP\Share::SHARE_TYPE_GROUP);
 		$provider->groupDeleted($gid);
-
-		$excludedGroups = $this->config->getAppValue('core', 'shareapi_exclude_groups_list', '');
-		if ($excludedGroups === '') {
-			return;
-		}
-
-		$excludedGroups = json_decode($excludedGroups, true);
-		if (json_last_error() !== JSON_ERROR_NONE) {
-			return;
-		}
-
-		$excludedGroups = array_diff($excludedGroups, [$gid]);
-		$this->config->setAppValue('core', 'shareapi_exclude_groups_list', json_encode($excludedGroups));
 	}
 
 	/**
 	 * @inheritdoc
 	 */
 	public function userDeletedFromGroup($uid, $gid) {
-		$provider = $this->factory->getProviderForType(IShare::TYPE_GROUP);
+		$provider = $this->factory->getProviderForType(\OCP\Share::SHARE_TYPE_GROUP);
 		$provider->userDeletedFromGroup($uid, $gid);
 	}
 
@@ -1712,8 +1516,7 @@
 
 	/**
 	 * Create a new share
-	 *
-	 * @return IShare
+	 * @return \OCP\Share\IShare
 	 */
 	public function newShare() {
 		return new \OC\Share20\Share($this->rootFolder, $this->userManager);
@@ -1747,7 +1550,7 @@
 	}
 
 	/**
-	 * Is default link expire date enabled
+	 * Is default expire date enabled
 	 *
 	 * @return bool
 	 */
@@ -1756,7 +1559,7 @@
 	}
 
 	/**
-	 * Is default link expire date enforced
+	 * Is default expire date enforced
 	 *`
 	 * @return bool
 	 */
@@ -1765,9 +1568,9 @@
 			$this->config->getAppValue('core', 'shareapi_enforce_expire_date', 'no') === 'yes';
 	}
 
-
 	/**
-	 * Number of default link expire days
+	 * Number of default expire days
+	 *shareApiLinkAllowPublicUpload
 	 * @return int
 	 */
 	public function shareApiLinkDefaultExpireDays() {
@@ -1775,34 +1578,6 @@
 	}
 
 	/**
-	 * Is default internal expire date enabled
-	 *
-	 * @return bool
-	 */
-	public function shareApiInternalDefaultExpireDate(): bool {
-		return $this->config->getAppValue('core', 'shareapi_default_internal_expire_date', 'no') === 'yes';
-	}
-
-	/**
-	 * Is default expire date enforced
-	 *`
-	 * @return bool
-	 */
-	public function shareApiInternalDefaultExpireDateEnforced(): bool {
-		return $this->shareApiInternalDefaultExpireDate() &&
-			$this->config->getAppValue('core', 'shareapi_enforce_internal_expire_date', 'no') === 'yes';
-	}
-
-
-	/**
-	 * Number of default expire days
-	 * @return int
-	 */
-	public function shareApiInternalDefaultExpireDays(): int {
-		return (int)$this->config->getAppValue('core', 'shareapi_internal_expire_after_n_days', '7');
-	}
-
-	/**
 	 * Allow public upload on link shares
 	 *
 	 * @return bool
@@ -1827,24 +1602,6 @@
 		return $this->config->getAppValue('core', 'shareapi_allow_group_sharing', 'yes') === 'yes';
 	}
 
-	public function allowEnumeration(): bool {
-		return $this->config->getAppValue('core', 'shareapi_allow_share_dialog_user_enumeration', 'yes') === 'yes';
-	}
-
-	public function limitEnumerationToGroups(): bool {
-		return $this->allowEnumeration() &&
-			$this->config->getAppValue('core', 'shareapi_restrict_user_enumeration_to_group', 'no') === 'yes';
-	}
-
-	public function limitEnumerationToPhone(): bool {
-		return $this->allowEnumeration() &&
-			$this->config->getAppValue('core', 'shareapi_restrict_user_enumeration_to_phone', 'no') === 'yes';
-	}
-
-	public function allowEnumerationFullMatch(): bool {
-		return $this->config->getAppValue('core', 'shareapi_restrict_user_enumeration_full_match', 'yes') === 'yes';
-	}
-
 	/**
 	 * Copied from \OC_Util::isSharingDisabledForUser
 	 *
@@ -1914,15 +1671,4 @@
 		return true;
 	}
 
-	public function registerShareProvider(string $shareProviderClass): void {
-		$this->factory->registerProvider($shareProviderClass);
-	}
-
-	public function getAllShares(): iterable {
-		$providers = $this->factory->getAllProviders();
-
-		foreach ($providers as $provider) {
-			yield from $provider->getAllShares();
-		}
-	}
 }
