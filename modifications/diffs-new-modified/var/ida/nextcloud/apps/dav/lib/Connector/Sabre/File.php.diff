--- /var/ida/nextcloud/apps/dav/lib/Connector/Sabre/File.php	2021-11-29 13:44:49.823860099 +0000
+++ /var/ida/nextcloud/apps/dav/lib/Connector/Sabre/File.php.original	2021-11-03 10:50:54.798538961 +0000
@@ -134,69 +134,6 @@
 		// verify path of the target
 		$this->verifyPath();
 
-		// Special handling for zero size files
-		$zero_size = false;
-		try {
-			$filesize   = false;
-			$headers    = null;
-			$firstbyte  = null;
-			$test_basis = null;
-		
-			// Retrieve stream metadata
-			$metadata = stream_get_meta_data($data);
-		
-			if ($metadata != null && is_array($metadata) && isset($metadata['uri'])) {
-				// First, we'll attempt to get the filesize based on the URI defined in the
-				// stream metadata, assuming the stream wrapper type supports os.filesize;
-				// which if not, it will either return false or throw an exception
-				$test_basis = 'filesize-stat';
-				$file_uri = $metadata['uri'];
-				try {
-					$filesize = filesize($file_uri);
-					if ($filesize === 0) {
-						$zero_size = true;
-					}
-				} catch (Exception $e) {
-					$filesize = false;
-				}
-			}
-			if ($filesize === false) {
-				// If we're here, then either no URI was defined or the stream wrapper type does not
-				// support os.filesize, so we'll try to get the size from the content length header,
-				// if it exists
-				$test_basis = 'content-length-header';
-				$headers = get_headers($data, 1);
-				if ($headers != null && is_array($headers) && isset($headers['Content-Length'])) {
-					$filesize = (int)$headers['Content-Length'];
-					if ($filesize === 0) {
-						$zero_size = true;
-					}
-				}
-			}
-			if ($filesize === false) {
-				// OK, last recourse is to actually read from the stream, but only if it 
-				// is seekable and thus can be reset to the beginning so there is no loss
-				// of data during the actual copy operation...
-				$test_basis = 'read-first-byte';
-				if (isset($metadata['seekable']) && $metadata['seekable'] === true) {
-					$firstbyte = fread($data, 1);
-					fseek($data, 0);
-					if (strlen($firstbyte) === 0) {
-						$zero_size = true;
-					}
-				}
-			}
-			\OC::$server->getLogger()->debug('ZERO_SIZE_CHECK: '
-			. ' metadata: '   . json_encode($metadata)
-			. ' headers: '    . json_encode($headers)
-			. ' filesize: '   . json_encode($filesize)
-			. ' firstbyte: '  . json_encode(strlen($firstbyte))
-			. ' zero_size: '  . json_encode($zero_size)
-			. ' test_basis: ' . $test_basis);
-		} catch (Exception $e) {
-			\OC::$server->getLogger()->debug('ZERO_SIZE_CHECK: Error: ' . $e->getMessage());
-		}
-		
 		// chunked handling
 		if (isset($_SERVER['HTTP_OC_CHUNKED'])) {
 			try {
@@ -290,11 +227,6 @@
 				fclose($target);
 			}
 
-			// Special handling for zero size files
-			if ($zero_size === true && $count === 0) {
-				$result = true;
-			}
-
 			if ($result === false) {
 				$expected = -1;
 				if (isset($_SERVER['CONTENT_LENGTH'])) {
