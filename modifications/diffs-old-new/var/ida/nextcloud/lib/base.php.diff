--- /var/ida/nextcloud-new/lib/base.php	2021-10-27 15:54:10.615762248 +0000
+++ /var/ida/nextcloud-old/lib/base.php	2021-10-27 10:25:31.212497058 +0000
@@ -1,4 +1,11 @@
 <?php
+/*
+ * This file is part of the IDA research data storage service
+ *
+ * @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
+ * @link     https://research.csc.fi/
+ */
+
 /**
  * @copyright Copyright (c) 2016, ownCloud, Inc.
  *
@@ -9,26 +16,20 @@
  * @author Bernhard Posselt <dev@bernhard-posselt.com>
  * @author Bjoern Schiessle <bjoern@schiessle.org>
  * @author Björn Schießle <bjoern@schiessle.org>
- * @author Christoph Wurst <christoph@winzerhof-wurst.at>
+ * @author Christoph Wurst <christoph@owncloud.com>
  * @author Damjan Georgievski <gdamjan@gmail.com>
- * @author Daniel Kesselberg <mail@danielkesselberg.de>
  * @author davidgumberg <davidnoizgumberg@gmail.com>
- * @author Eric Masseran <rico.masseran@gmail.com>
  * @author Florin Peter <github@florin-peter.de>
- * @author Greta Doci <gretadoci@gmail.com>
+ * @author Individual IT Services <info@individual-it.net>
  * @author Jakob Sack <mail@jakobsack.de>
- * @author jaltek <jaltek@mailbox.org>
  * @author Jan-Christoph Borchardt <hey@jancborchardt.net>
  * @author Joachim Sokolowski <github@sokolowski.org>
  * @author Joas Schilling <coding@schilljs.com>
  * @author John Molakvoæ (skjnldsv) <skjnldsv@protonmail.com>
- * @author Jörn Friedrich Dreyer <jfd@butonic.de>
- * @author Jose Quinteiro <github@quinteiro.org>
  * @author Juan Pablo Villafáñez <jvillafanez@solidgear.es>
- * @author Julius Härtl <jus@bitgrid.net>
+ * @author Jörn Friedrich Dreyer <jfd@butonic.de>
  * @author Ko- <k.stoffelen@cs.ru.nl>
  * @author Lukas Reschke <lukas@statuscode.ch>
- * @author MartB <mart.b@outlook.de>
  * @author Michael Gapczynski <GapczynskiM@gmail.com>
  * @author Morris Jobke <hey@morrisjobke.de>
  * @author Owen Winkler <a_github@midnightcircus.com>
@@ -41,8 +42,7 @@
  * @author Stefan Weil <sw@weilnetz.de>
  * @author Thomas Müller <thomas.mueller@tmit.eu>
  * @author Thomas Tanghus <thomas@tanghus.net>
- * @author Tobia De Koninck <tobia@ledfan.be>
- * @author Vincent Petry <vincent@nextcloud.com>
+ * @author Vincent Petry <pvince81@owncloud.com>
  * @author Volkan Gezer <volkangezer@gmail.com>
  *
  * @license AGPL-3.0
@@ -61,13 +61,13 @@
  *
  */
 
-use OCP\EventDispatcher\IEventDispatcher;
-use OCP\Group\Events\UserRemovedEvent;
 use OCP\ILogger;
 use OCP\Share;
 use OC\Encryption\HookManager;
 use OC\Files\Filesystem;
 use OC\Share20\Hooks;
+use OCP\Util;
+use \Firebase\JWT\JWT;
 
 require_once 'public/Constants.php';
 
@@ -80,7 +80,7 @@
 	/**
 	 * Associative array for autoloading. classname => filename
 	 */
-	public static $CLASSPATH = [];
+	public static $CLASSPATH = array();
 	/**
 	 * The installation path for Nextcloud  on the server (e.g. /srv/http/nextcloud)
 	 */
@@ -97,7 +97,7 @@
 	 * The installation path array of the apps folder on the server (e.g. /srv/http/nextcloud) 'path' and
 	 * web path in 'url'
 	 */
-	public static $APPSROOTS = [];
+	public static $APPSROOTS = array();
 
 	/**
 	 * @var string
@@ -159,7 +159,7 @@
 				'SCRIPT_FILENAME' => $_SERVER['SCRIPT_FILENAME'],
 			],
 		];
-		$fakeRequest = new \OC\AppFramework\Http\Request($params, new \OC\Security\SecureRandom(), new \OC\AllConfig(new \OC\SystemConfig(self::$config)));
+		$fakeRequest = new \OC\AppFramework\Http\Request($params, null, new \OC\AllConfig(new \OC\SystemConfig(self::$config)));
 		$scriptName = $fakeRequest->getScriptName();
 		if (substr($scriptName, -1) == '/') {
 			$scriptName .= 'index.php';
@@ -200,7 +200,7 @@
 		}
 
 		// search the apps folder
-		$config_paths = self::$config->getValue('apps_paths', []);
+		$config_paths = self::$config->getValue('apps_paths', array());
 		if (!empty($config_paths)) {
 			foreach ($config_paths as $paths) {
 				if (isset($paths['url']) && isset($paths['path'])) {
@@ -210,19 +210,26 @@
 				}
 			}
 		} elseif (file_exists(OC::$SERVERROOT . '/apps')) {
-			OC::$APPSROOTS[] = ['path' => OC::$SERVERROOT . '/apps', 'url' => '/apps', 'writable' => true];
+			OC::$APPSROOTS[] = array('path' => OC::$SERVERROOT . '/apps', 'url' => '/apps', 'writable' => true);
+		} elseif (file_exists(OC::$SERVERROOT . '/../apps')) {
+			OC::$APPSROOTS[] = array(
+				'path' => rtrim(dirname(OC::$SERVERROOT), '/') . '/apps',
+				'url' => '/apps',
+				'writable' => true
+			);
 		}
 
 		if (empty(OC::$APPSROOTS)) {
 			throw new \RuntimeException('apps directory not found! Please put the Nextcloud apps folder in the Nextcloud folder'
-				. '. You can also configure the location in the config.php file.');
+				. ' or the folder above. You can also configure the location in the config.php file.');
 		}
-		$paths = [];
+		$paths = array();
 		foreach (OC::$APPSROOTS as $path) {
 			$paths[] = $path['path'];
 			if (!is_dir($path['path'])) {
 				throw new \RuntimeException(sprintf('App directory "%s" not found! Please put the Nextcloud apps folder in the'
-					. ' Nextcloud folder. You can also configure the location in the config.php file.', $path['path']));
+					. ' Nextcloud folder or the folder above. You can also configure the location in the'
+					. ' config.php file.', $path['path']));
 			}
 		}
 
@@ -250,6 +258,7 @@
 			if (self::$CLI) {
 				echo $l->t('Cannot write into "config" directory!')."\n";
 				echo $l->t('This can usually be fixed by giving the webserver write access to the config directory')."\n";
+				echo $l->t('See %s', [ $urlGenerator->linkToDocs('admin-dir_permissions') ])."\n";
 				echo "\n";
 				echo $l->t('Or, if you prefer to keep config.php file read only, set the option "config_is_read_only" to true in it.')."\n";
 				echo $l->t('See %s', [ $urlGenerator->linkToDocs('admin-config') ])."\n";
@@ -257,7 +266,8 @@
 			} else {
 				OC_Template::printErrorPage(
 					$l->t('Cannot write into "config" directory!'),
-					$l->t('This can usually be fixed by giving the webserver write access to the config directory.') . '. '
+					$l->t('This can usually be fixed by giving the webserver write access to the config directory. See %s',
+					[ $urlGenerator->linkToDocs('admin-dir_permissions') ]) . '. '
 					. $l->t('Or, if you prefer to keep config.php file read only, set the option "config_is_read_only" to true in it. See %s',
 					[ $urlGenerator->linkToDocs('admin-config') ]),
 					503
@@ -266,12 +276,12 @@
 		}
 	}
 
-	public static function checkInstalled(\OC\SystemConfig $systemConfig) {
+	public static function checkInstalled() {
 		if (defined('OC_CONSOLE')) {
 			return;
 		}
 		// Redirect to installer if not installed
-		if (!$systemConfig->getValue('installed', false) && OC::$SUBURI !== '/index.php' && OC::$SUBURI !== '/status.php') {
+		if (!\OC::$server->getSystemConfig()->getValue('installed', false) && OC::$SUBURI !== '/index.php' && OC::$SUBURI !== '/status.php') {
 			if (OC::$CLI) {
 				throw new Exception('Not installed');
 			} else {
@@ -282,16 +292,16 @@
 		}
 	}
 
-	public static function checkMaintenanceMode(\OC\SystemConfig $systemConfig) {
+	public static function checkMaintenanceMode() {
 		// Allow ajax update script to execute without being stopped
-		if (((bool) $systemConfig->getValue('maintenance', false)) && OC::$SUBURI != '/core/ajax/update.php') {
+		if (((bool) \OC::$server->getSystemConfig()->getValue('maintenance', false)) && OC::$SUBURI != '/core/ajax/update.php') {
 			// send http status 503
 			http_response_code(503);
 			header('Retry-After: 120');
 
 			// render error page
 			$template = new OC_Template('', 'update.user', 'guest');
-			OC_Util::addScript('dist/maintenance');
+			OC_Util::addScript('maintenance-check');
 			OC_Util::addStyle('core', 'guest');
 			$template->printPage();
 			die();
@@ -364,6 +374,7 @@
 
 		$oldTheme = $systemConfig->getValue('theme');
 		$systemConfig->setValue('theme', '');
+		OC_Util::addScript('config'); // needed for web root
 		OC_Util::addScript('update');
 
 		/** @var \OC\App\AppManager $appManager */
@@ -413,8 +424,14 @@
 		$sessionName = OC_Util::getInstanceId();
 
 		try {
+			// Allow session apps to create a custom session object
+			$useCustomSession = false;
+			$session = self::$server->getSession();
+			OC_Hook::emit('OC', 'initSession', array('session' => &$session, 'sessionName' => &$sessionName, 'useCustomSession' => &$useCustomSession));
+			if (!$useCustomSession) {
 			// set the session name to the instance id - which is unique
 			$session = new \OC\Session\Internal($sessionName);
+			}
 
 			$cryptoWrapper = \OC::$server->getSessionCryptoWrapper();
 			$session = $cryptoWrapper->wrapSession($session);
@@ -496,14 +513,14 @@
 	 * We use an additional cookie since we want to protect logout CSRF and
 	 * also we can't directly interfere with PHP's session mechanism.
 	 */
-	private static function performSameSiteCookieProtection(\OCP\IConfig $config) {
+	private static function performSameSiteCookieProtection() {
 		$request = \OC::$server->getRequest();
 
 		// Some user agents are notorious and don't really properly follow HTTP
 		// specifications. For those, have an automated opt-out. Since the protection
 		// for remote.php is applied in base.php as starting point we need to opt out
 		// here.
-		$incompatibleUserAgents = $config->getSystemValue('csrf.optout');
+		$incompatibleUserAgents = \OC::$server->getConfig()->getSystemValue('csrf.optout');
 
 		// Fallback, if csrf.optout is unset
 		if (!is_array($incompatibleUserAgents)) {
@@ -534,7 +551,7 @@
 				self::sendSameSiteCookies();
 				// Debug mode gets access to the resources without strict cookie
 				// due to the fact that the SabreDAV browser also lives there.
-				if (!$config->getSystemValue('debug', false)) {
+				if(!\OC::$server->getConfig()->getSystemValue('debug', false)) {
 					http_response_code(\OCP\AppFramework\Http::STATUS_SERVICE_UNAVAILABLE);
 					exit();
 				}
@@ -557,7 +574,7 @@
 		if (defined('PHPUNIT_RUN')) {
 			self::$loader->addValidRoot(OC::$SERVERROOT . '/tests');
 		}
-		spl_autoload_register([self::$loader, 'load']);
+		spl_autoload_register(array(self::$loader, 'load'));
 		$loaderEnd = microtime(true);
 
 		self::$CLI = (php_sapi_name() == 'cli');
@@ -585,17 +603,11 @@
 
 		// setup the basic server
 		self::$server = new \OC\Server(\OC::$WEBROOT, self::$config);
-		self::$server->boot();
-		$eventLogger = \OC::$server->getEventLogger();
-		$eventLogger->log('autoloader', 'Autoloader', $loaderStart, $loaderEnd);
-		$eventLogger->start('boot', 'Initialize');
-
-		// Override php.ini and log everything if we're troubleshooting
-		if (self::$config->getValue('loglevel') === ILogger::DEBUG) {
-			error_reporting(E_ALL);
-		}
+		\OC::$server->getEventLogger()->log('autoloader', 'Autoloader', $loaderStart, $loaderEnd);
+		\OC::$server->getEventLogger()->start('boot', 'Initialize');
 
 		// Don't display errors and log them
+		error_reporting(E_ALL | E_STRICT);
 		@ini_set('display_errors', '0');
 		@ini_set('log_errors', '1');
 
@@ -607,60 +619,49 @@
 		//this doesn´t work always depending on the webserver and php configuration.
 		//Let´s try to overwrite some defaults anyway
 
-		//try to set the maximum execution time to 60min
+        //try to set execution time limits to 30 days
 		if (strpos(@ini_get('disable_functions'), 'set_time_limit') === false) {
-			@set_time_limit(3600);
+            @set_time_limit(2592000);
 		}
-		@ini_set('max_execution_time', '3600');
-		@ini_set('max_input_time', '3600');
+        @ini_set('max_execution_time',2592000);
+        @ini_set('max_input_time', 2592000);
+
+        //try to set the maximum filesize to 10TB and upload of up to 1 million files
+        @ini_set('upload_max_filesize', '10000G');
+        @ini_set('post_max_size', '10000G');
+        @ini_set('file_uploads', '1000000');
 
 		self::setRequiredIniValues();
 		self::handleAuthHeaders();
-		$systemConfig = \OC::$server->get(\OC\SystemConfig::class);
-		self::registerAutoloaderCache($systemConfig);
+		self::registerAutoloaderCache();
 
-		// initialize intl fallback if necessary
+		// initialize intl fallback is necessary
+		\Patchwork\Utf8\Bootup::initIntl();
 		OC_Util::isSetLocaleWorking();
 
-		$config = \OC::$server->get(\OCP\IConfig::class);
 		if (!defined('PHPUNIT_RUN')) {
 			OC\Log\ErrorHandler::setLogger(\OC::$server->getLogger());
-			$debug = $config->getSystemValue('debug', false);
+			$debug = \OC::$server->getConfig()->getSystemValue('debug', false);
 			OC\Log\ErrorHandler::register($debug);
 		}
 
-		/** @var \OC\AppFramework\Bootstrap\Coordinator $bootstrapCoordinator */
-		$bootstrapCoordinator = \OC::$server->query(\OC\AppFramework\Bootstrap\Coordinator::class);
-		$bootstrapCoordinator->runInitialRegistration();
-
-		$eventLogger->start('init_session', 'Initialize session');
-		OC_App::loadApps(['session']);
+		\OC::$server->getEventLogger()->start('init_session', 'Initialize session');
+		OC_App::loadApps(array('session'));
 		if (!self::$CLI) {
 			self::initSession();
 		}
-		$eventLogger->end('init_session');
+		\OC::$server->getEventLogger()->end('init_session');
 		self::checkConfig();
-		self::checkInstalled($systemConfig);
+		self::checkInstalled();
 
 		OC_Response::addSecurityHeaders();
 
-		self::performSameSiteCookieProtection($config);
+		self::performSameSiteCookieProtection();
 
 		if (!defined('OC_CONSOLE')) {
-			$errors = OC_Util::checkServer($systemConfig);
+			$errors = OC_Util::checkServer(\OC::$server->getSystemConfig());
 			if (count($errors) > 0) {
-				if (!self::$CLI) {
-					http_response_code(503);
-					OC_Util::addStyle('guest');
-					try {
-						OC_Template::printGuestPage('', 'error', ['errors' => $errors]);
-						exit;
-					} catch (\Exception $e) {
-						// In case any error happens when showing the error page, we simply fall back to posting the text.
-						// This might be the case when e.g. the data directory is broken and we can not load/write SCSS to/from it.
-					}
-				}
-
+				if (self::$CLI) {
 				// Convert l10n string into regular string for usage in database
 				$staticErrors = [];
 				foreach ($errors as $error) {
@@ -673,19 +674,27 @@
 				}
 
 				try {
-					$config->setAppValue('core', 'cronErrors', json_encode($staticErrors));
+						\OC::$server->getConfig()->setAppValue('core', 'cronErrors', json_encode($staticErrors));
 				} catch (\Exception $e) {
 					echo('Writing to database failed');
 				}
 				exit(1);
-			} elseif (self::$CLI && $config->getSystemValue('installed', false)) {
-				$config->deleteAppValue('core', 'cronErrors');
+				} else {
+					http_response_code(503);
+					OC_Util::addStyle('guest');
+					OC_Template::printGuestPage('', 'error', array('errors' => $errors));
+					exit;
+				}
+			} elseif (self::$CLI && \OC::$server->getConfig()->getSystemValue('installed', false)) {
+				\OC::$server->getConfig()->deleteAppValue('core', 'cronErrors');
 			}
 		}
 		//try to set the session lifetime
 		$sessionLifeTime = self::getSessionLifeTime();
 		@ini_set('gc_maxlifetime', (string)$sessionLifeTime);
 
+		$systemConfig = \OC::$server->getSystemConfig();
+
 		// User and Groups
 		if (!$systemConfig->getValue("installed", false)) {
 			self::$server->getSession()->set('user_id', '');
@@ -710,24 +719,25 @@
 			OC_User::setIncognitoMode(true);
 		}
 
-		self::registerCleanupHooks($systemConfig);
+		self::registerCleanupHooks();
 		self::registerFilesystemHooks();
-		self::registerShareHooks($systemConfig);
-		self::registerEncryptionWrapperAndHooks();
+		self::registerShareHooks();
+		self::registerEncryptionWrapper();
+		self::registerEncryptionHooks();
 		self::registerAccountHooks();
 		self::registerResourceCollectionHooks();
-		self::registerAppRestrictionsHooks();
 
 		// Make sure that the application class is not loaded before the database is setup
 		if ($systemConfig->getValue("installed", false)) {
-			OC_App::loadApp('settings');
+			$settings = new \OC\Settings\Application();
+			$settings->register();
 		}
 
 		//make sure temporary files are cleaned up
 		$tmpManager = \OC::$server->getTempManager();
-		register_shutdown_function([$tmpManager, 'clean']);
+		register_shutdown_function(array($tmpManager, 'clean'));
 		$lockProvider = \OC::$server->getLockingProvider();
-		register_shutdown_function([$lockProvider, 'releaseAll']);
+		register_shutdown_function(array($lockProvider, 'releaseAll'));
 
 		// Check whether the sample configuration has been copied
 		if ($systemConfig->getValue('copied_sample_config', false)) {
@@ -747,8 +757,11 @@
 		 * FIXME: Should not be in here at all :see_no_evil:
 		 */
 		if (!OC::$CLI
+			// overwritehost is always trusted, workaround to not have to make
+			// \OC\AppFramework\Http\Request::getOverwriteHost public
+			&& self::$server->getConfig()->getSystemValue('overwritehost') === ''
 			&& !\OC::$server->getTrustedDomainHelper()->isTrustedDomain($host)
-			&& $config->getSystemValue('installed', false)
+			&& self::$server->getConfig()->getSystemValue('installed', false)
 		) {
 			// Allow access to CSS resources
 			$isScssRequest = false;
@@ -782,20 +795,20 @@
 				exit();
 			}
 		}
-		$eventLogger->end('boot');
+		\OC::$server->getEventLogger()->end('boot');
 	}
 
 	/**
 	 * register hooks for the cleanup of cache and bruteforce protection
 	 */
-	public static function registerCleanupHooks(\OC\SystemConfig $systemConfig) {
+	public static function registerCleanupHooks() {
 		//don't try to do this before we are properly setup
-		if ($systemConfig->getValue('installed', false) && !\OCP\Util::needUpgrade()) {
+		if (\OC::$server->getSystemConfig()->getValue('installed', false) && !\OCP\Util::needUpgrade()) {
 
 			// NOTE: This will be replaced to use OCP
 			$userSession = self::$server->getUserSession();
 			$userSession->listen('\OC\User', 'postLogin', function () use ($userSession) {
-				if (!defined('PHPUNIT_RUN') && $userSession->isLoggedIn()) {
+				if (!defined('PHPUNIT_RUN')) {
 					// reset brute force delay for this IP address and username
 					$uid = \OC::$server->getUserSession()->getUser()->getUID();
 					$request = \OC::$server->getRequest();
@@ -824,11 +837,13 @@
 		}
 	}
 
-	private static function registerEncryptionWrapperAndHooks() {
+	private static function registerEncryptionWrapper() {
 		$manager = self::$server->getEncryptionManager();
 		\OCP\Util::connectHook('OC_Filesystem', 'preSetup', $manager, 'setupStorage');
+	}
 
-		$enabled = $manager->isEnabled();
+	private static function registerEncryptionHooks() {
+		$enabled = self::$server->getEncryptionManager()->isEnabled();
 		if ($enabled) {
 			\OCP\Util::connectHook(Share::class, 'post_shared', HookManager::class, 'postShared');
 			\OCP\Util::connectHook(Share::class, 'post_unshare', HookManager::class, 'postUnshared');
@@ -838,33 +853,10 @@
 	}
 
 	private static function registerAccountHooks() {
-		$hookHandler = \OC::$server->get(\OC\Accounts\Hooks::class);
+		$hookHandler = new \OC\Accounts\Hooks(\OC::$server->getLogger());
 		\OCP\Util::connectHook('OC_User', 'changeUser', $hookHandler, 'changeUserHook');
 	}
 
-	private static function registerAppRestrictionsHooks() {
-		/** @var \OC\Group\Manager $groupManager */
-		$groupManager = self::$server->query(\OCP\IGroupManager::class);
-		$groupManager->listen('\OC\Group', 'postDelete', function (\OCP\IGroup $group) {
-			$appManager = self::$server->getAppManager();
-			$apps = $appManager->getEnabledAppsForGroup($group);
-			foreach ($apps as $appId) {
-				$restrictions = $appManager->getAppRestriction($appId);
-				if (empty($restrictions)) {
-					continue;
-				}
-				$key = array_search($group->getGID(), $restrictions);
-				unset($restrictions[$key]);
-				$restrictions = array_values($restrictions);
-				if (empty($restrictions)) {
-					$appManager->disableApp($appId);
-				} else {
-					$appManager->enableAppForGroups($appId, $restrictions);
-				}
-			}
-		});
-	}
-
 	private static function registerResourceCollectionHooks() {
 		\OC\Collaboration\Resources\Listener::register(\OC::$server->getEventDispatcher());
 	}
@@ -881,25 +873,22 @@
 	/**
 	 * register hooks for sharing
 	 */
-	public static function registerShareHooks(\OC\SystemConfig $systemConfig) {
-		if ($systemConfig->getValue('installed')) {
+	public static function registerShareHooks() {
+		if (\OC::$server->getSystemConfig()->getValue('installed')) {
 			OC_Hook::connect('OC_User', 'post_deleteUser', Hooks::class, 'post_deleteUser');
+			OC_Hook::connect('OC_User', 'post_removeFromGroup', Hooks::class, 'post_removeFromGroup');
 			OC_Hook::connect('OC_User', 'post_deleteGroup', Hooks::class, 'post_deleteGroup');
-
-			/** @var IEventDispatcher $dispatcher */
-			$dispatcher = \OC::$server->get(IEventDispatcher::class);
-			$dispatcher->addServiceListener(UserRemovedEvent::class, \OC\Share20\UserRemovedListener::class);
 		}
 	}
 
-	protected static function registerAutoloaderCache(\OC\SystemConfig $systemConfig) {
+	protected static function registerAutoloaderCache() {
 		// The class loader takes an optional low-latency cache, which MUST be
 		// namespaced. The instanceid is used for namespacing, but might be
 		// unavailable at this point. Furthermore, it might not be possible to
 		// generate an instanceid via \OC_Util::getInstanceId() because the
 		// config file may not be writable. As such, we only register a class
 		// loader cache if instanceid is available without trying to create one.
-		$instanceId = $systemConfig->getValue('instanceid', null);
+		$instanceId = \OC::$server->getSystemConfig()->getValue('instanceid', null);
 		if ($instanceId) {
 			try {
 				$memcacheFactory = \OC::$server->getMemCacheFactory();
@@ -913,6 +902,8 @@
 	 * Handle the request
 	 */
 	public static function handleRequest() {
+        Util::writeLog('ida', 'base.php: handleRequest', \OCP\Util::DEBUG);
+
 		\OC::$server->getEventLogger()->start('handle_request', 'Handle request');
 		$systemConfig = \OC::$server->getSystemConfig();
 
@@ -921,7 +912,7 @@
 			\OC::$server->getSession()->clear();
 			$setupHelper = new OC\Setup(
 				$systemConfig,
-				\OC::$server->get(\bantu\IniGetWrapper\IniGetWrapper::class),
+				\OC::$server->getIniWrapper(),
 				\OC::$server->getL10N('lib'),
 				\OC::$server->query(\OCP\Defaults::class),
 				\OC::$server->getLogger(),
@@ -939,7 +930,7 @@
 			return;
 		}
 		if (substr($requestPath, -3) !== '.js') { // we need these files during the upgrade
-			self::checkMaintenanceMode($systemConfig);
+			self::checkMaintenanceMode();
 
 			if (\OCP\Util::needUpgrade()) {
 				if (function_exists('opcache_reset')) {
@@ -979,7 +970,7 @@
 				OC_App::loadApps();
 			} else {
 				// For guests: Load only filesystem and logging
-				OC_App::loadApps(['filesystem', 'logging']);
+				OC_App::loadApps(array('filesystem', 'logging'));
 				self::handleLogin($request);
 			}
 		}
@@ -987,10 +978,11 @@
 		if (!self::$CLI) {
 			try {
 				if (!((bool) $systemConfig->getValue('maintenance', false)) && !\OCP\Util::needUpgrade()) {
-					OC_App::loadApps(['filesystem', 'logging']);
+					OC_App::loadApps(array('filesystem', 'logging'));
 					OC_App::loadApps();
 				}
-				OC::$server->get(\OC\Route\Router::class)->match($request->getRawPathInfo());
+				OC_Util::setupFS();
+				OC::$server->getRouter()->match(\OC::$server->getRequest()->getRawPathInfo());
 				return;
 			} catch (Symfony\Component\Routing\Exception\ResourceNotFoundException $e) {
 				//header('HTTP/1.0 404 Not Found');
@@ -1029,23 +1021,49 @@
 	 * @param OCP\IRequest $request
 	 * @return boolean
 	 */
-	public static function handleLogin(OCP\IRequest $request) {
+	static function handleLogin(OCP\IRequest $request) {
+        Util::writeLog('ida', 'base.php: handleLogin', \OCP\Util::DEBUG);
 		$userSession = self::$server->getUserSession();
+		$hostname = $_SERVER['SERVER_NAME'];
+		$domain = substr($hostname, strpos($hostname, '.') + 1);
+		$prefix = preg_replace('/[^a-zA-Z0-9]/', '_', $domain);
+
 		if (OC_User::handleApacheAuth()) {
 			return true;
 		}
 		if ($userSession->tryTokenLogin($request)) {
 			return true;
 		}
-		if (isset($_COOKIE['nc_username'])
-			&& isset($_COOKIE['nc_token'])
-			&& isset($_COOKIE['nc_session_id'])
-			&& $userSession->loginWithCookie($_COOKIE['nc_username'], $_COOKIE['nc_token'], $_COOKIE['nc_session_id'])) {
+		if ($userSession->tryBasicAuthLogin($request, \OC::$server->getBruteForceThrottler())) {
 			return true;
 		}
-		if ($userSession->tryBasicAuthLogin($request, \OC::$server->getBruteForceThrottler())) {
+
+		if (isset($_COOKIE[$prefix . '_fd_sso_session'])) {
+
+		    Util::writeLog('ida', 'base.php: handleLogin: domain=' . $domain
+		                  . ' fd_sso_session_id=' . $_COOKIE[$prefix . '_fd_sso_session_id']
+		                  . ' fd_sso_session=' . $_COOKIE[$prefix . '_fd_sso_session']
+						  , \OCP\Util::DEBUG);
+
+			$key =\OC::$server->getSystemConfig()->getValue('SSO_KEY');
+
+			$session = JWT::decode($_COOKIE[$prefix . '_fd_sso_session'], $key, array('HS256'));
+
+			if ($session) {
+
+			    Util::writeLog('ida', 'base.php: handleLogin: session=' . json_encode($session), \OCP\Util::DEBUG);
+
+				if ($session->id == $_COOKIE[$prefix . '_fd_sso_session_id']
+				    && $session->fairdata_user
+				    && $session->fairdata_user->id
+				    && $session->services 
+				    && $session->services->IDA 
+			        && $userSession->loginWithSSOSession($session->id, $session->fairdata_user->id)) {
 			return true;
 		}
+			}
+		}
+
 		return false;
 	}
 
@@ -1056,21 +1074,19 @@
 		}
 
 		// Extract PHP_AUTH_USER/PHP_AUTH_PW from other headers if necessary.
-		$vars = [
+		$vars = array(
 			'HTTP_AUTHORIZATION', // apache+php-cgi work around
 			'REDIRECT_HTTP_AUTHORIZATION', // apache+php-cgi alternative
-		];
+		);
 		foreach ($vars as $var) {
 			if (isset($_SERVER[$var]) && preg_match('/Basic\s+(.*)$/i', $_SERVER[$var], $matches)) {
-				$credentials = explode(':', base64_decode($matches[1]), 2);
-				if (count($credentials) === 2) {
-					$_SERVER['PHP_AUTH_USER'] = $credentials[0];
-					$_SERVER['PHP_AUTH_PW'] = $credentials[1];
+				list($name, $password) = explode(':', base64_decode($matches[1]), 2);
+				$_SERVER['PHP_AUTH_USER'] = $name;
+				$_SERVER['PHP_AUTH_PW'] = $password;
 					break;
 				}
 			}
 		}
-	}
 }
 
 OC::init();
