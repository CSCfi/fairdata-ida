--- /var/ida/nextcloud-new/apps/files_sharing/lib/Controller/ShareAPIController.php	2021-10-27 15:54:07.080752953 +0000
+++ /var/ida/nextcloud-old/apps/files_sharing/lib/Controller/ShareAPIController.php	2021-10-27 10:25:30.494495324 +0000
@@ -1,7 +1,12 @@
 <?php
+/*
+ * This file is part of the IDA research data storage service
+ *
+ * @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
+ * @link     https://research.csc.fi/
+ */
 
 declare(strict_types=1);
-
 /**
  * @copyright Copyright (c) 2016, ownCloud, Inc.
  *
@@ -6,24 +11,13 @@
  * @copyright Copyright (c) 2016, ownCloud, Inc.
  *
  * @author Bjoern Schiessle <bjoern@schiessle.org>
- * @author Christoph Wurst <christoph@winzerhof-wurst.at>
- * @author Daniel Calviño Sánchez <danxuliu@gmail.com>
- * @author Daniel Kesselberg <mail@danielkesselberg.de>
- * @author Gary Kim <gary@garykim.dev>
- * @author Georg Ehrke <oc.list@georgehrke.com>
  * @author Joas Schilling <coding@schilljs.com>
- * @author John Molakvoæ (skjnldsv) <skjnldsv@protonmail.com>
- * @author Julius Härtl <jus@bitgrid.net>
  * @author Lukas Reschke <lukas@statuscode.ch>
- * @author Maxence Lange <maxence@artificial-owl.com>
  * @author Maxence Lange <maxence@nextcloud.com>
  * @author Michael Jobst <mjobst+github@tecratech.de>
- * @author Morris Jobke <hey@morrisjobke.de>
- * @author Richard Steinmetz <richard@steinmetz.cloud>
  * @author Robin Appelman <robin@icewind.nl>
  * @author Roeland Jago Douma <roeland@famdouma.nl>
- * @author Vincent Petry <vincent@nextcloud.com>
- * @author waleczny <michal@walczak.xyz>
+ * @author Vincent Petry <pvince81@owncloud.com>
  *
  * @license AGPL-3.0
  *
@@ -40,11 +34,8 @@
  * along with this program. If not, see <http://www.gnu.org/licenses/>
  *
  */
-
 namespace OCA\Files_Sharing\Controller;
 
-use OCA\Files_Sharing\Exceptions\SharingRightsException;
-use OCA\Files_Sharing\External\Storage;
 use OCA\Files\Helper;
 use OCP\App\IAppManager;
 use OCP\AppFramework\Http\DataResponse;
@@ -55,27 +46,24 @@
 use OCP\AppFramework\OCSController;
 use OCP\AppFramework\QueryException;
 use OCP\Constants;
-use OCP\Files\InvalidPathException;
-use OCP\Files\IRootFolder;
-use OCP\Files\Folder;
 use OCP\Files\Node;
 use OCP\Files\NotFoundException;
 use OCP\IConfig;
 use OCP\IGroupManager;
 use OCP\IL10N;
-use OCP\IPreview;
+use OCP\IUserManager;
 use OCP\IRequest;
 use OCP\IServerContainer;
 use OCP\IURLGenerator;
-use OCP\IUserManager;
-use OCP\Lock\ILockingProvider;
+use OCP\Files\IRootFolder;
 use OCP\Lock\LockedException;
 use OCP\Share;
-use OCP\Share\Exceptions\GenericShareException;
-use OCP\Share\Exceptions\ShareNotFound;
 use OCP\Share\IManager;
+use OCP\Share\Exceptions\ShareNotFound;
+use OCP\Share\Exceptions\GenericShareException;
+use OCP\Lock\ILockingProvider;
 use OCP\Share\IShare;
-use OCP\UserStatus\IManager as IUserStatusManager;
+use OCA\Files_Sharing\External\Storage;
 
 /**
  * Class Share20OCS
@@ -106,10 +94,6 @@
 	private $appManager;
 	/** @var IServerContainer */
 	private $serverContainer;
-	/** @var IUserStatusManager */
-	private $userStatusManager;
-	/** @var IPreview */
-	private $previewManager;
 
 	/**
 	 * Share20OCS constructor.
@@ -126,7 +110,6 @@
 	 * @param IConfig $config
 	 * @param IAppManager $appManager
 	 * @param IServerContainer $serverContainer
-	 * @param IUserStatusManager $userStatusManager
 	 */
 	public function __construct(
 		string $appName,
@@ -140,9 +123,7 @@
 		IL10N $l10n,
 		IConfig $config,
 		IAppManager $appManager,
-		IServerContainer $serverContainer,
-		IUserStatusManager $userStatusManager,
-		IPreview $previewManager
+		IServerContainer $serverContainer
 	) {
 		parent::__construct($appName, $request);
 
@@ -157,8 +138,6 @@
 		$this->config = $config;
 		$this->appManager = $appManager;
 		$this->serverContainer = $serverContainer;
-		$this->userStatusManager = $userStatusManager;
-		$this->previewManager = $previewManager;
 	}
 
 	/**
@@ -171,7 +150,7 @@
 	 *
 	 * @suppress PhanUndeclaredClassMethod
 	 */
-	protected function formatShare(IShare $share, Node $recipientNode = null): array {
+	protected function formatShare(\OCP\Share\IShare $share, Node $recipientNode = null): array {
 		$sharedBy = $this->userManager->get($share->getSharedBy());
 		$shareOwner = $this->userManager->get($share->getShareOwner());
 
@@ -180,11 +159,7 @@
 			'share_type' => $share->getShareType(),
 			'uid_owner' => $share->getSharedBy(),
 			'displayname_owner' => $sharedBy !== null ? $sharedBy->getDisplayName() : $share->getSharedBy(),
-			// recipient permissions
 			'permissions' => $share->getPermissions(),
-			// current user permissions on this share
-			'can_edit' => $this->canEditShare($share),
-			'can_delete' => $this->canDeleteShare($share),
 			'stime' => $share->getShareTime()->getTimestamp(),
 			'parent' => null,
 			'expiration' => null,
@@ -207,12 +182,12 @@
 					throw new NotFoundException();
 				}
 			} else {
-				$node = reset($nodes);
+				$node = $nodes[0];
 			}
 		}
 
 		$result['path'] = $userFolder->getRelativePath($node->getPath());
-		if ($node instanceof Folder) {
+		if ($node instanceOf \OCP\Files\Folder) {
 			$result['item_type'] = 'folder';
 		} else {
 			$result['item_type'] = 'file';
@@ -217,9 +192,7 @@
 		} else {
 			$result['item_type'] = 'file';
 		}
-
 		$result['mimetype'] = $node->getMimetype();
-		$result['has_preview'] = $this->previewManager->isAvailable($node);
 		$result['storage_id'] = $node->getStorage()->getId();
 		$result['storage'] = $node->getStorage()->getCache()->getNumericStorageId();
 		$result['item_source'] = $node->getId();
@@ -232,37 +205,20 @@
 			$result['expiration'] = $expiration->format('Y-m-d 00:00:00');
 		}
 
-		if ($share->getShareType() === IShare::TYPE_USER) {
+		if ($share->getShareType() === Share::SHARE_TYPE_USER) {
 			$sharedWith = $this->userManager->get($share->getSharedWith());
 			$result['share_with'] = $share->getSharedWith();
 			$result['share_with_displayname'] = $sharedWith !== null ? $sharedWith->getDisplayName() : $share->getSharedWith();
-			$result['share_with_displayname_unique'] = $sharedWith !== null ? (
-				 $sharedWith->getEMailAddress() !== '' ? $sharedWith->getEMailAddress() : $sharedWith->getUID()
-			) : $share->getSharedWith();
-			$result['status'] = [];
-
-			$userStatuses = $this->userStatusManager->getUserStatuses([$share->getSharedWith()]);
-			$userStatus = array_shift($userStatuses);
-			if ($userStatus) {
-				$result['status'] = [
-					'status' => $userStatus->getStatus(),
-					'message' => $userStatus->getMessage(),
-					'icon' => $userStatus->getIcon(),
-					'clearAt' => $userStatus->getClearAt()
-						? (int)$userStatus->getClearAt()->format('U')
-						: null,
-				];
-			}
-		} elseif ($share->getShareType() === IShare::TYPE_GROUP) {
+		} else if ($share->getShareType() === Share::SHARE_TYPE_GROUP) {
 			$group = $this->groupManager->get($share->getSharedWith());
 			$result['share_with'] = $share->getSharedWith();
 			$result['share_with_displayname'] = $group !== null ? $group->getDisplayName() : $share->getSharedWith();
-		} elseif ($share->getShareType() === IShare::TYPE_LINK) {
+		} else if ($share->getShareType() === Share::SHARE_TYPE_LINK) {
 
 			// "share_with" and "share_with_displayname" for passwords of link
 			// shares was deprecated in Nextcloud 15, use "password" instead.
 			$result['share_with'] = $share->getPassword();
-			$result['share_with_displayname'] = '(' . $this->l->t('Shared link') . ')';
+			$result['share_with_displayname'] = $share->getPassword();
 
 			$result['password'] = $share->getPassword();
 
@@ -270,17 +226,18 @@
 
 			$result['token'] = $share->getToken();
 			$result['url'] = $this->urlGenerator->linkToRouteAbsolute('files_sharing.sharecontroller.showShare', ['token' => $share->getToken()]);
-		} elseif ($share->getShareType() === IShare::TYPE_REMOTE || $share->getShareType() === IShare::TYPE_REMOTE_GROUP) {
+
+		} else if ($share->getShareType() === Share::SHARE_TYPE_REMOTE || $share->getShareType() === Share::SHARE_TYPE_REMOTE_GROUP) {
 			$result['share_with'] = $share->getSharedWith();
 			$result['share_with_displayname'] = $this->getDisplayNameFromAddressBook($share->getSharedWith(), 'CLOUD');
 			$result['token'] = $share->getToken();
-		} elseif ($share->getShareType() === IShare::TYPE_EMAIL) {
+		} else if ($share->getShareType() === Share::SHARE_TYPE_EMAIL) {
 			$result['share_with'] = $share->getSharedWith();
 			$result['password'] = $share->getPassword();
 			$result['send_password_by_talk'] = $share->getSendPasswordByTalk();
 			$result['share_with_displayname'] = $this->getDisplayNameFromAddressBook($share->getSharedWith(), 'EMAIL');
 			$result['token'] = $share->getToken();
-		} elseif ($share->getShareType() === IShare::TYPE_CIRCLE) {
+		} else if ($share->getShareType() === Share::SHARE_TYPE_CIRCLE) {
 			// getSharedWith() returns either "name (type, owner)" or
 			// "name (type, owner) [id]", depending on the Circles app version.
 			$hasCircleId = (substr($share->getSharedWith(), -1) === ']');
@@ -299,7 +256,7 @@
 				$shareWithLength = -1;
 			}
 			$result['share_with'] = substr($share->getSharedWith(), $shareWithStart, $shareWithLength);
-		} elseif ($share->getShareType() === IShare::TYPE_ROOM) {
+		} else if ($share->getShareType() === Share::SHARE_TYPE_ROOM) {
 			$result['share_with'] = $share->getSharedWith();
 			$result['share_with_displayname'] = '';
 
@@ -307,14 +264,6 @@
 				$result = array_merge($result, $this->getRoomShareHelper()->formatShare($share));
 			} catch (QueryException $e) {
 			}
-		} elseif ($share->getShareType() === IShare::TYPE_DECK) {
-			$result['share_with'] = $share->getSharedWith();
-			$result['share_with_displayname'] = '';
-
-			try {
-				$result = array_merge($result, $this->getDeckShareHelper()->formatShare($share));
-			} catch (QueryException $e) {
-			}
 		}
 
 
@@ -337,7 +286,7 @@
 		$result = \OC::$server->getContactsManager()->search($query, [$property]);
 		foreach ($result as $r) {
 			foreach ($r[$property] as $value) {
-				if ($value === $query && $r['FN']) {
+				if ($value === $query) {
 					return $r['FN'];
 				}
 			}
@@ -362,14 +311,14 @@
 			throw new OCSNotFoundException($this->l->t('Wrong share ID, share doesn\'t exist'));
 		}
 
-		try {
 			if ($this->canAccessShare($share)) {
+			try {
 				$share = $this->formatShare($share);
 				return new DataResponse([$share]);
-			}
 		} catch (NotFoundException $e) {
 			// Fall trough
 		}
+		}
 
 		throw new OCSNotFoundException($this->l->t('Wrong share ID, share doesn\'t exist'));
 	}
@@ -393,24 +342,20 @@
 		try {
 			$this->lock($share->getNode());
 		} catch (LockedException $e) {
-			throw new OCSNotFoundException($this->l->t('Could not delete share'));
+			throw new OCSNotFoundException($this->l->t('could not delete share'));
 		}
 
 		if (!$this->canAccessShare($share)) {
-			throw new OCSNotFoundException($this->l->t('Wrong share ID, share doesn\'t exist'));
+			throw new OCSNotFoundException($this->l->t('Could not delete share'));
 		}
 
-		// if it's a group share or a room share
-		// we don't delete the share, but only the
-		// mount point. Allowing it to be restored
-		// from the deleted shares
-		if ($this->canDeleteShareFromSelf($share)) {
-			$this->shareManager->deleteFromSelf($share, $this->currentUser);
+		if (($share->getShareType() === Share::SHARE_TYPE_GROUP ||
+				$share->getShareType() === Share::SHARE_TYPE_ROOM) &&
+			$share->getShareOwner() !== $this->currentUser &&
+			$share->getSharedBy() !== $this->currentUser) {
+            // If node is a shared project folder, do nothing and throw exception
+            throw new OCSForbiddenException($this->l->t('Root project folders may not be modified.'));
 		} else {
-			if (!$this->canDeleteShare($share)) {
-				throw new OCSForbiddenException($this->l->t('Could not delete share'));
-			}
-
 			$this->shareManager->deleteShare($share);
 		}
 
@@ -436,7 +381,7 @@
 	 * @throws OCSException
 	 * @throws OCSForbiddenException
 	 * @throws OCSNotFoundException
-	 * @throws InvalidPathException
+	 * @throws \OCP\Files\InvalidPathException
 	 * @suppress PhanUndeclaredClassMethod
 	 */
 	public function createShare(
@@ -489,7 +434,7 @@
 			$permissions &= ~Constants::PERMISSION_CREATE;
 		}
 
-		/**
+		/*
 		 * Hack for https://github.com/owncloud/core/issues/22587
 		 * We check the permissions via webdav. But the permissions of the mount point
 		 * do not equal the share permissions. Here we fix that for federated mounts.
@@ -498,14 +443,14 @@
 			$permissions &= ~($permissions & ~$path->getPermissions());
 		}
 
-		if ($shareType === IShare::TYPE_USER) {
+		if ($shareType === Share::SHARE_TYPE_USER) {
 			// Valid user is required to share
 			if ($shareWith === null || !$this->userManager->userExists($shareWith)) {
 				throw new OCSNotFoundException($this->l->t('Please specify a valid user'));
 			}
 			$share->setSharedWith($shareWith);
 			$share->setPermissions($permissions);
-		} elseif ($shareType === IShare::TYPE_GROUP) {
+		} else if ($shareType === Share::SHARE_TYPE_GROUP) {
 			if (!$this->shareManager->allowGroupSharing()) {
 				throw new OCSNotFoundException($this->l->t('Group sharing is disabled by the administrator'));
 			}
@@ -516,9 +461,7 @@
 			}
 			$share->setSharedWith($shareWith);
 			$share->setPermissions($permissions);
-		} elseif ($shareType === IShare::TYPE_LINK
-			|| $shareType === IShare::TYPE_EMAIL) {
-
+		} else if ($shareType === Share::SHARE_TYPE_LINK) {
 			// Can we even share links?
 			if (!$this->shareManager->shareApiAllowLinks()) {
 				throw new OCSNotFoundException($this->l->t('Public link sharing is disabled by the administrator'));
@@ -535,35 +478,25 @@
 					throw new OCSNotFoundException($this->l->t('Public upload is only possible for publicly shared folders'));
 				}
 
-				$permissions = Constants::PERMISSION_READ |
+				$share->setPermissions(
+					Constants::PERMISSION_READ |
 					Constants::PERMISSION_CREATE |
 					Constants::PERMISSION_UPDATE |
-					Constants::PERMISSION_DELETE;
+					Constants::PERMISSION_DELETE
+				);
 			} else {
-				$permissions = Constants::PERMISSION_READ;
+				$share->setPermissions(Constants::PERMISSION_READ);
 			}
 
-			// TODO: It might make sense to have a dedicated setting to allow/deny converting link shares into federated ones
-			if (($permissions & Constants::PERMISSION_READ) && $this->shareManager->outgoingServer2ServerSharesAllowed()) {
-				$permissions |= Constants::PERMISSION_SHARE;
-			}
-
-			$share->setPermissions($permissions);
-
 			// Set password
 			if ($password !== '') {
 				$share->setPassword($password);
 			}
 
-			// Only share by mail have a recipient
-			if ($shareType === IShare::TYPE_EMAIL) {
-				$share->setSharedWith($shareWith);
-			} else {
-				// Only link share have a label
+
 				if (!empty($label)) {
 					$share->setLabel($label);
 				}
-			}
 
 			if ($sendPasswordByTalk === 'true') {
 				if (!$this->appManager->isEnabledForUser('spreed')) {
@@ -582,21 +515,37 @@
 					throw new OCSNotFoundException($this->l->t('Invalid date, date format must be YYYY-MM-DD'));
 				}
 			}
-		} elseif ($shareType === IShare::TYPE_REMOTE) {
+
+		} else if ($shareType === Share::SHARE_TYPE_REMOTE) {
 			if (!$this->shareManager->outgoingServer2ServerSharesAllowed()) {
 				throw new OCSForbiddenException($this->l->t('Sharing %1$s failed because the back end does not allow shares from type %2$s', [$path->getPath(), $shareType]));
 			}
 
 			$share->setSharedWith($shareWith);
 			$share->setPermissions($permissions);
-		} elseif ($shareType === IShare::TYPE_REMOTE_GROUP) {
+		}  else if ($shareType === Share::SHARE_TYPE_REMOTE_GROUP) {
 			if (!$this->shareManager->outgoingServer2ServerGroupSharesAllowed()) {
 				throw new OCSForbiddenException($this->l->t('Sharing %1$s failed because the back end does not allow shares from type %2$s', [$path->getPath(), $shareType]));
 			}
 
 			$share->setSharedWith($shareWith);
 			$share->setPermissions($permissions);
-		} elseif ($shareType === IShare::TYPE_CIRCLE) {
+		} else if ($shareType === Share::SHARE_TYPE_EMAIL) {
+			if ($share->getNodeType() === 'file') {
+				$share->setPermissions(Constants::PERMISSION_READ);
+			} else {
+				$share->setPermissions($permissions);
+			}
+			$share->setSharedWith($shareWith);
+
+			if ($sendPasswordByTalk === 'true') {
+				if (!$this->appManager->isEnabledForUser('spreed')) {
+					throw new OCSForbiddenException($this->l->t('Sharing %s sending the password by Nextcloud Talk failed because Nextcloud Talk is not enabled', [$path->getPath()]));
+				}
+
+				$share->setSendPasswordByTalk(true);
+			}
+		} else if ($shareType === Share::SHARE_TYPE_CIRCLE) {
 			if (!\OC::$server->getAppManager()->isEnabledForUser('circles') || !class_exists('\OCA\Circles\ShareByCircleProvider')) {
 				throw new OCSNotFoundException($this->l->t('You cannot share to a Circle if the app is not enabled'));
 			}
@@ -609,18 +558,12 @@
 			}
 			$share->setSharedWith($shareWith);
 			$share->setPermissions($permissions);
-		} elseif ($shareType === IShare::TYPE_ROOM) {
+		} else if ($shareType === Share::SHARE_TYPE_ROOM) {
 			try {
 				$this->getRoomShareHelper()->createShare($share, $shareWith, $permissions, $expireDate);
 			} catch (QueryException $e) {
 				throw new OCSForbiddenException($this->l->t('Sharing %s failed because the back end does not support room shares', [$path->getPath()]));
 			}
-		} elseif ($shareType === IShare::TYPE_DECK) {
-			try {
-				$this->getDeckShareHelper()->createShare($share, $shareWith, $permissions, $expireDate);
-			} catch (QueryException $e) {
-				throw new OCSForbiddenException($this->l->t('Sharing %s failed because the back end does not support room shares', [$path->getPath()]));
-			}
 		} else {
 			throw new OCSBadRequestException($this->l->t('Unknown share type'));
 		}
@@ -631,11 +574,9 @@
 		try {
 			$share = $this->shareManager->createShare($share);
 		} catch (GenericShareException $e) {
-			\OC::$server->getLogger()->logException($e);
 			$code = $e->getCode() === 0 ? 403 : $e->getCode();
 			throw new OCSException($e->getHint(), $code);
 		} catch (\Exception $e) {
-			\OC::$server->getLogger()->logException($e);
 			throw new OCSForbiddenException($e->getMessage(), $e);
 		}
 
@@ -645,26 +586,25 @@
 	}
 
 	/**
-	 * @param null|Node $node
+	 * @param \OCP\Files\File|\OCP\Files\Folder $node
 	 * @param boolean $includeTags
-	 *
-	 * @return array
+	 * @return DataResponse
 	 */
-	private function getSharedWithMe($node, bool $includeTags): array {
-		$userShares = $this->shareManager->getSharedWith($this->currentUser, IShare::TYPE_USER, $node, -1, 0);
-		$groupShares = $this->shareManager->getSharedWith($this->currentUser, IShare::TYPE_GROUP, $node, -1, 0);
-		$circleShares = $this->shareManager->getSharedWith($this->currentUser, IShare::TYPE_CIRCLE, $node, -1, 0);
-		$roomShares = $this->shareManager->getSharedWith($this->currentUser, IShare::TYPE_ROOM, $node, -1, 0);
-		$deckShares = $this->shareManager->getSharedWith($this->currentUser, IShare::TYPE_DECK, $node, -1, 0);
+	private function getSharedWithMe($node = null, bool $includeTags): DataResponse {
 
-		$shares = array_merge($userShares, $groupShares, $circleShares, $roomShares, $deckShares);
+		$userShares = $this->shareManager->getSharedWith($this->currentUser, Share::SHARE_TYPE_USER, $node, -1, 0);
+		$groupShares = $this->shareManager->getSharedWith($this->currentUser, Share::SHARE_TYPE_GROUP, $node, -1, 0);
+		$circleShares = $this->shareManager->getSharedWith($this->currentUser, Share::SHARE_TYPE_CIRCLE, $node, -1, 0);
+		$roomShares = $this->shareManager->getSharedWith($this->currentUser, Share::SHARE_TYPE_ROOM, $node, -1, 0);
 
-		$filteredShares = array_filter($shares, function (IShare $share) {
+		$shares = array_merge($userShares, $groupShares, $circleShares, $roomShares);
+
+		$shares = array_filter($shares, function (IShare $share) {
 			return $share->getShareOwner() !== $this->currentUser;
 		});
 
 		$formatted = [];
-		foreach ($filteredShares as $share) {
+		foreach ($shares as $share) {
 			if ($this->canAccessShare($share)) {
 				try {
 					$formatted[] = $this->formatShare($share);
@@ -678,17 +618,15 @@
 			$formatted = Helper::populateTags($formatted, 'file_source', \OC::$server->getTagManager());
 		}
 
-		return $formatted;
+		return new DataResponse($formatted);
 	}
 
 	/**
-	 * @param \OCP\Files\Node $folder
-	 *
-	 * @return array
+	 * @param \OCP\Files\Folder $folder
+	 * @return DataResponse
 	 * @throws OCSBadRequestException
-	 * @throws NotFoundException
 	 */
-	private function getSharesInDir(Node $folder): array {
+	private function getSharesInDir(Node $folder): DataResponse {
 		if (!($folder instanceof \OCP\Files\Folder)) {
 			throw new OCSBadRequestException($this->l->t('Not a directory'));
 		}
@@ -694,16 +632,21 @@
 		}
 
 		$nodes = $folder->getDirectoryListing();
-
 		/** @var \OCP\Share\IShare[] $shares */
-		$shares = array_reduce($nodes, function ($carry, $node) {
-			$carry = array_merge($carry, $this->getAllShares($node, true));
-			return $carry;
-		}, []);
-
-		// filter out duplicate shares
-		$known = [];
+		$shares = [];
+		foreach ($nodes as $node) {
 
+			$shares = array_merge($shares, $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_USER, $node, true, -1, 0));
+			$shares = array_merge($shares, $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_GROUP, $node, true, -1, 0));
+			$shares = array_merge($shares, $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_LINK, $node, true, -1, 0));
+			if ($this->shareManager->shareProviderExists(Share::SHARE_TYPE_EMAIL)) {
+				$shares = array_merge($shares, $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_EMAIL, $node, true, -1, 0));
+			}
+			if ($this->shareManager->outgoingServer2ServerSharesAllowed()) {
+				$shares = array_merge($shares, $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_REMOTE, $node, true, -1, 0));
+			}
+			$shares = array_merge($shares, $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_ROOM, $node, true, -1, 0));
+		}
 
 		$formatted = $miniFormatted = [];
 		$resharingRight = false;
@@ -733,7 +676,7 @@
 			$formatted = $miniFormatted;
 		}
 
-		return $formatted;
+		return new DataResponse($formatted);
 	}
 
 	/**
@@ -752,115 +695,91 @@
 	 * - Get shares for a specific path (?path=...)
 	 * - Get all shares in a folder (?subfiles=true&path=..)
 	 *
-	 * @param string $include_tags
-	 *
 	 * @return DataResponse
-	 * @throws NotFoundException
-	 * @throws OCSBadRequestException
 	 * @throws OCSNotFoundException
 	 */
 	public function getShares(
 		string $shared_with_me = 'false',
 		string $reshares = 'false',
 		string $subfiles = 'false',
-		string $path = '',
+		string $path = null,
 		string $include_tags = 'false'
 	): DataResponse {
-		$node = null;
-		if ($path !== '') {
+
+		if ($path !== null) {
 			$userFolder = $this->rootFolder->getUserFolder($this->currentUser);
 			try {
-				$node = $userFolder->get($path);
-				$this->lock($node);
-			} catch (NotFoundException $e) {
-				throw new OCSNotFoundException(
-					$this->l->t('Wrong path, file/folder doesn\'t exist')
-				);
+				$path = $userFolder->get($path);
+				$this->lock($path);
+			} catch (\OCP\Files\NotFoundException $e) {
+				throw new OCSNotFoundException($this->l->t('Wrong path, file/folder doesn\'t exist'));
 			} catch (LockedException $e) {
-				throw new OCSNotFoundException($this->l->t('Could not lock node'));
+				throw new OCSNotFoundException($this->l->t('Could not lock path'));
 			}
 		}
 
-		$shares = $this->getFormattedShares(
-			$this->currentUser,
-			$node,
-			($shared_with_me === 'true'),
-			($reshares === 'true'),
-			($subfiles === 'true'),
-			($include_tags === 'true')
-		);
+		$include_tags = $include_tags === 'true';
 
-		return new DataResponse($shares);
+		if ($shared_with_me === 'true') {
+			$result = $this->getSharedWithMe($path, $include_tags);
+			return $result;
 	}
 
+		if ($subfiles === 'true') {
+			$result = $this->getSharesInDir($path);
+			return $result;
+		}
 
-	/**
-	 * @param string $viewer
-	 * @param Node $node
-	 * @param bool $sharedWithMe
-	 * @param bool $reShares
-	 * @param bool $subFiles
-	 * @param bool $includeTags
-	 *
-	 * @return array
-	 * @throws NotFoundException
-	 * @throws OCSBadRequestException
-	 */
-	private function getFormattedShares(
-		string $viewer,
-		$node = null,
-		bool $sharedWithMe = false,
-		bool $reShares = false,
-		bool $subFiles = false,
-		bool $includeTags = false
-	): array {
-		if ($sharedWithMe) {
-			return $this->getSharedWithMe($node, $includeTags);
+		if ($reshares === 'true') {
+			$reshares = true;
+		} else {
+			$reshares = false;
 		}
 
-		if ($subFiles) {
-			return $this->getSharesInDir($node);
+		// Get all shares
+		$userShares = $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_USER, $path, $reshares, -1, 0);
+		$groupShares = $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_GROUP, $path, $reshares, -1, 0);
+		$linkShares = $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_LINK, $path, $reshares, -1, 0);
+		if ($this->shareManager->shareProviderExists(Share::SHARE_TYPE_EMAIL)) {
+			$mailShares = $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_EMAIL, $path, $reshares, -1, 0);
+		} else {
+			$mailShares = [];
+		}
+		if ($this->shareManager->shareProviderExists(Share::SHARE_TYPE_CIRCLE)) {
+			$circleShares = $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_CIRCLE, $path, $reshares, -1, 0);
+		} else {
+			$circleShares = [];
 		}
+		$roomShares = $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_ROOM, $path, $reshares, -1, 0);
 
-		$shares = $this->getSharesFromNode($viewer, $node, $reShares);
+		$shares = array_merge($userShares, $groupShares, $linkShares, $mailShares, $circleShares, $roomShares);
 
-		$known = $formatted = $miniFormatted = [];
-		$resharingRight = false;
-		foreach ($shares as $share) {
-			try {
-				$share->getNode();
-			} catch (NotFoundException $e) {
-				/*
-				 * Ignore shares where we can't get the node
-				 * For example deleted shares
-				 */
-				continue;
+		if ($this->shareManager->outgoingServer2ServerSharesAllowed()) {
+			$federatedShares = $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_REMOTE, $path, $reshares, -1, 0);
+			$shares = array_merge($shares, $federatedShares);
 			}
 
-			if (in_array($share->getId(), $known)
-				|| ($share->getSharedWith() === $this->currentUser && $share->getShareType() === IShare::TYPE_USER)) {
-				continue;
+		if ($this->shareManager->outgoingServer2ServerGroupSharesAllowed()) {
+			$federatedShares = $this->shareManager->getSharesBy($this->currentUser, Share::SHARE_TYPE_REMOTE_GROUP, $path, $reshares, -1, 0);
+			$shares = array_merge($shares, $federatedShares);
 			}
 
-			$known[] = $share->getId();
-			try {
+		$formatted = $miniFormatted = [];
+		$resharingRight = false;
+		foreach ($shares as $share) {
 				/** @var IShare $share */
-				$format = $this->formatShare($share, $node);
+			try {
+				$format = $this->formatShare($share, $path);
 				$formatted[] = $format;
-
-				// let's also build a list of shares created
-				// by the current user only, in case
-				// there is no resharing rights
 				if ($share->getSharedBy() === $this->currentUser) {
 					$miniFormatted[] = $format;
 				}
 
-				// check if one of those share is shared with me
-				// and if I have resharing rights on it
-				if (!$resharingRight && $this->shareProviderResharingRights($this->currentUser, $share, $node)) {
+				if (!$resharingRight && $this->shareProviderResharingRights($this->currentUser, $share, $path)) {
 					$resharingRight = true;
 				}
-			} catch (InvalidPathException | NotFoundException $e) {
+			} catch (\Exception $e) {
+				//Ignore share
 			}
 		}
 
@@ -868,108 +787,13 @@
 			$formatted = $miniFormatted;
 		}
 
-		if ($includeTags) {
-			$formatted =
-				Helper::populateTags($formatted, 'file_source', \OC::$server->getTagManager());
-		}
-
-		return $formatted;
-	}
-
-
-	/**
-	 * The getInheritedShares function.
-	 * returns all shares relative to a file, including parent folders shares rights.
-	 *
-	 * @NoAdminRequired
-	 *
-	 * @param string $path
-	 *
-	 * - Get shares by the current user
-	 * - Get shares by the current user and reshares (?reshares=true)
-	 * - Get shares with the current user (?shared_with_me=true)
-	 * - Get shares for a specific path (?path=...)
-	 * - Get all shares in a folder (?subfiles=true&path=..)
-	 *
-	 * @return DataResponse
-	 * @throws InvalidPathException
-	 * @throws NotFoundException
-	 * @throws OCSNotFoundException
-	 * @throws OCSBadRequestException
-	 * @throws SharingRightsException
-	 */
-	public function getInheritedShares(string $path): DataResponse {
-
-		// get Node from (string) path.
-		$userFolder = $this->rootFolder->getUserFolder($this->currentUser);
-		try {
-			$node = $userFolder->get($path);
-			$this->lock($node);
-		} catch (\OCP\Files\NotFoundException $e) {
-			throw new OCSNotFoundException($this->l->t('Wrong path, file/folder doesn\'t exist'));
-		} catch (LockedException $e) {
-			throw new OCSNotFoundException($this->l->t('Could not lock path'));
-		}
-
-		if (!($node->getPermissions() & Constants::PERMISSION_SHARE)) {
-			throw new SharingRightsException('no sharing rights on this item');
-		}
-
-		// The current top parent we have access to
-		$parent = $node;
-
-		// initiate real owner.
-		$owner = $node->getOwner()
-					  ->getUID();
-		if (!$this->userManager->userExists($owner)) {
-			return new DataResponse([]);
-		}
-
-		// get node based on the owner, fix owner in case of external storage
-		$userFolder = $this->rootFolder->getUserFolder($owner);
-		if ($node->getId() !== $userFolder->getId() && !$userFolder->isSubNode($node)) {
-			$owner = $node->getOwner()
-						  ->getUID();
-			$userFolder = $this->rootFolder->getUserFolder($owner);
-			$nodes = $userFolder->getById($node->getId());
-			$node = array_shift($nodes);
-		}
-		$basePath = $userFolder->getPath();
-
-		// generate node list for each parent folders
-		/** @var Node[] $nodes */
-		$nodes = [];
-		while ($node->getPath() !== $basePath) {
-			$node = $node->getParent();
-			$nodes[] = $node;
-		}
-
-		// The user that is requesting this list
-		$currentUserFolder = $this->rootFolder->getUserFolder($this->currentUser);
-
-		// for each nodes, retrieve shares.
-		$shares = [];
-
-		foreach ($nodes as $node) {
-			$getShares = $this->getFormattedShares($owner, $node, false, true);
-
-			$currentUserNodes = $currentUserFolder->getById($node->getId());
-			if (!empty($currentUserNodes)) {
-				$parent = array_pop($currentUserNodes);
-			}
-
-			$subPath = $currentUserFolder->getRelativePath($parent->getPath());
-			foreach ($getShares as &$share) {
-				$share['via_fileid'] = $parent->getId();
-				$share['via_path'] = $subPath;
-			}
-			$this->mergeFormattedShares($shares, $getShares);
+		if ($include_tags) {
+			$formatted = Helper::populateTags($formatted, 'file_source', \OC::$server->getTagManager());
 		}
 
-		return new DataResponse(array_values($shares));
+		return new DataResponse($formatted);
 	}
 
-
 	/**
 	 * @NoAdminRequired
 	 *
@@ -1012,12 +836,11 @@
 			throw new OCSNotFoundException($this->l->t('Wrong share ID, share doesn\'t exist'));
 		}
 
-		if (!$this->canEditShare($share)) {
+		if ($share->getShareOwner() !== $this->currentUser && $share->getSharedBy() !== $this->currentUser) {
 			throw new OCSForbiddenException('You are not allowed to edit incoming shares');
 		}
 
-		if (
-			$permissions === null &&
+		if ($permissions === null &&
 			$password === null &&
 			$sendPasswordByTalk === null &&
 			$publicUpload === null &&
@@ -1033,23 +856,10 @@
 			$share->setNote($note);
 		}
 
-		/**
+		/*
 		 * expirationdate, password and publicUpload only make sense for link shares
 		 */
-		if ($share->getShareType() === IShare::TYPE_LINK
-			|| $share->getShareType() === IShare::TYPE_EMAIL) {
-
-			/**
-			 * We do not allow editing link shares that the current user
-			 * doesn't own. This is confusing and lead to errors when
-			 * someone else edit a password or expiration date without
-			 * the share owner knowing about it.
-			 * We only allow deletion
-			 */
-
-			if ($share->getSharedBy() !== $this->currentUser) {
-				throw new OCSForbiddenException('You are not allowed to edit link shares that you don\'t own');
-			}
+		if ($share->getShareType() === Share::SHARE_TYPE_LINK) {
 
 			// Update hide download state
 			if ($hideDownload === 'true') {
@@ -1066,7 +876,7 @@
 			}
 
 			if ($permissions !== null) {
-				$newPermissions = $permissions;
+				$newPermissions = (int)$permissions;
 				$newPermissions = $newPermissions & ~Constants::PERMISSION_SHARE;
 			}
 
@@ -1101,11 +911,6 @@
 			}
 
 			if ($newPermissions !== null) {
-				// TODO: It might make sense to have a dedicated setting to allow/deny converting link shares into federated ones
-				if (($newPermissions & Constants::PERMISSION_READ) && $this->shareManager->outgoingServer2ServerSharesAllowed()) {
-					$newPermissions |= Constants::PERMISSION_SHARE;
-				}
-
 				$share->setPermissions($newPermissions);
 				$permissions = $newPermissions;
 			}
@@ -1127,11 +932,7 @@
 				$share->setPassword($password);
 			}
 
-			// only link shares have labels
-			if ($share->getShareType() === IShare::TYPE_LINK && $label !== null) {
-				if (strlen($label) > 255) {
-					throw new OCSBadRequestException("Maxmimum label length is 255");
-				}
+			if ($label !== null) {
 				$share->setLabel($label);
 			}
 
@@ -1144,14 +945,30 @@
 			} elseif ($sendPasswordByTalk !== null) {
 				$share->setSendPasswordByTalk(false);
 			}
-		}
-
-		// NOT A LINK SHARE
-		else {
+		} else {
 			if ($permissions !== null) {
+				$permissions = (int)$permissions;
 				$share->setPermissions($permissions);
 			}
 
+			if ($share->getShareType() === Share::SHARE_TYPE_EMAIL) {
+				if ($password === '') {
+					$share->setPassword(null);
+				} else if ($password !== null) {
+					$share->setPassword($password);
+				}
+
+				if ($sendPasswordByTalk === 'true') {
+					if (!$this->appManager->isEnabledForUser('spreed')) {
+						throw new OCSForbiddenException($this->l->t('Sharing sending the password by Nextcloud Talk failed because Nextcloud Talk is not enabled'));
+					}
+
+					$share->setSendPasswordByTalk(true);
+				} else {
+					$share->setSendPasswordByTalk(false);
+				}
+			}
+
 			if ($expireDate === '') {
 				$share->setExpirationDate(null);
 			} elseif ($expireDate !== null) {
@@ -1177,95 +994,6 @@
 	}
 
 	/**
-	 * @NoAdminRequired
-	 */
-	public function pendingShares(): DataResponse {
-		$pendingShares = [];
-
-		$shareTypes = [
-			IShare::TYPE_USER,
-			IShare::TYPE_GROUP
-		];
-
-		foreach ($shareTypes as $shareType) {
-			$shares = $this->shareManager->getSharedWith($this->currentUser, $shareType, null, -1, 0);
-
-			foreach ($shares as $share) {
-				if ($share->getStatus() === IShare::STATUS_PENDING || $share->getStatus() === IShare::STATUS_REJECTED) {
-					$pendingShares[] = $share;
-				}
-			}
-		}
-
-		$result = array_filter(array_map(function (IShare $share) {
-			$userFolder = $this->rootFolder->getUserFolder($share->getSharedBy());
-			$nodes = $userFolder->getById($share->getNodeId());
-			if (empty($nodes)) {
-				// fallback to guessing the path
-				$node = $userFolder->get($share->getTarget());
-				if ($node === null || $share->getTarget() === '') {
-					return null;
-				}
-			} else {
-				$node = $nodes[0];
-			}
-
-			try {
-				$formattedShare = $this->formatShare($share, $node);
-				$formattedShare['status'] = $share->getStatus();
-				$formattedShare['path'] = $share->getNode()->getName();
-				$formattedShare['permissions'] = 0;
-				return $formattedShare;
-			} catch (NotFoundException $e) {
-				return null;
-			}
-		}, $pendingShares), function ($entry) {
-			return $entry !== null;
-		});
-
-		return new DataResponse($result);
-	}
-
-	/**
-	 * @NoAdminRequired
-	 *
-	 * @param string $id
-	 * @return DataResponse
-	 * @throws OCSNotFoundException
-	 * @throws OCSException
-	 * @throws OCSBadRequestException
-	 */
-	public function acceptShare(string $id): DataResponse {
-		try {
-			$share = $this->getShareById($id);
-		} catch (ShareNotFound $e) {
-			throw new OCSNotFoundException($this->l->t('Wrong share ID, share doesn\'t exist'));
-		}
-
-		if (!$this->canAccessShare($share)) {
-			throw new OCSNotFoundException($this->l->t('Wrong share ID, share doesn\'t exist'));
-		}
-
-		try {
-			$this->shareManager->acceptShare($share, $this->currentUser);
-		} catch (GenericShareException $e) {
-			$code = $e->getCode() === 0 ? 403 : $e->getCode();
-			throw new OCSException($e->getHint(), $code);
-		} catch (\Exception $e) {
-			throw new OCSBadRequestException($e->getMessage(), $e);
-		}
-
-		return new DataResponse();
-	}
-
-	/**
-	 * Does the user have read permission on the share
-	 *
-	 * @param \OCP\Share\IShare $share the share to check
-	 * @param boolean $checkGroups check groups as well?
-	 * @return boolean
-	 * @throws NotFoundException
-	 *
 	 * @suppress PhanUndeclaredClassMethod
 	 */
 	protected function canAccessShare(\OCP\Share\IShare $share, bool $checkGroups = true): bool {
@@ -1275,145 +1003,20 @@
 		}
 
 		// Owner of the file and the sharer of the file can always get share
-		if ($share->getShareOwner() === $this->currentUser
-			|| $share->getSharedBy() === $this->currentUser) {
-			return true;
-		}
-
-		// If the share is shared with you, you can access it!
-		if ($share->getShareType() === IShare::TYPE_USER
-			&& $share->getSharedWith() === $this->currentUser) {
-			return true;
-		}
-
-		// Have reshare rights on the shared file/folder ?
-		// Does the currentUser have access to the shared file?
-		$userFolder = $this->rootFolder->getUserFolder($this->currentUser);
-		$files = $userFolder->getById($share->getNodeId());
-		if (!empty($files) && $this->shareProviderResharingRights($this->currentUser, $share, $files[0])) {
-			return true;
-		}
-
-		// If in the recipient group, you can see the share
-		if ($checkGroups && $share->getShareType() === IShare::TYPE_GROUP) {
-			$sharedWith = $this->groupManager->get($share->getSharedWith());
-			$user = $this->userManager->get($this->currentUser);
-			if ($user !== null && $sharedWith !== null && $sharedWith->inGroup($user)) {
-				return true;
-			}
-		}
-
-		if ($share->getShareType() === IShare::TYPE_CIRCLE) {
-			// TODO: have a sanity check like above?
-			return true;
-		}
-
-		if ($share->getShareType() === IShare::TYPE_ROOM) {
-			try {
-				return $this->getRoomShareHelper()->canAccessShare($share, $this->currentUser);
-			} catch (QueryException $e) {
-				return false;
-			}
-		}
-
-		if ($share->getShareType() === IShare::TYPE_DECK) {
-			try {
-				return $this->getDeckShareHelper()->canAccessShare($share, $this->currentUser);
-			} catch (QueryException $e) {
-				return false;
-			}
-		}
-
-		return false;
-	}
-
-	/**
-	 * Does the user have edit permission on the share
-	 *
-	 * @param \OCP\Share\IShare $share the share to check
-	 * @return boolean
-	 */
-	protected function canEditShare(\OCP\Share\IShare $share): bool {
-		// A file with permissions 0 can't be accessed by us. So Don't show it
-		if ($share->getPermissions() === 0) {
-			return false;
-		}
-
-		// The owner of the file and the creator of the share
-		// can always edit the share
 		if ($share->getShareOwner() === $this->currentUser ||
 			$share->getSharedBy() === $this->currentUser
 		) {
 			return true;
 		}
 
-		//! we do NOT support some kind of `admin` in groups.
-		//! You cannot edit shares shared to a group you're
-		//! a member of if you're not the share owner or the file owner!
-
-		return false;
-	}
-
-	/**
-	 * Does the user have delete permission on the share
-	 *
-	 * @param \OCP\Share\IShare $share the share to check
-	 * @return boolean
-	 */
-	protected function canDeleteShare(\OCP\Share\IShare $share): bool {
-		// A file with permissions 0 can't be accessed by us. So Don't show it
-		if ($share->getPermissions() === 0) {
-			return false;
-		}
-
-		// if the user is the recipient, i can unshare
-		// the share with self
-		if ($share->getShareType() === IShare::TYPE_USER &&
+		// If the share is shared with you (or a group you are a member of)
+		if ($share->getShareType() === Share::SHARE_TYPE_USER &&
 			$share->getSharedWith() === $this->currentUser
 		) {
 			return true;
 		}
 
-		// The owner of the file and the creator of the share
-		// can always delete the share
-		if ($share->getShareOwner() === $this->currentUser ||
-			$share->getSharedBy() === $this->currentUser
-		) {
-			return true;
-		}
-
-		return false;
-	}
-
-	/**
-	 * Does the user have delete permission on the share
-	 * This differs from the canDeleteShare function as it only
-	 * remove the share for the current user. It does NOT
-	 * completely delete the share but only the mount point.
-	 * It can then be restored from the deleted shares section.
-	 *
-	 * @param \OCP\Share\IShare $share the share to check
-	 * @return boolean
-	 *
-	 * @suppress PhanUndeclaredClassMethod
-	 */
-	protected function canDeleteShareFromSelf(\OCP\Share\IShare $share): bool {
-		if ($share->getShareType() !== IShare::TYPE_GROUP &&
-			$share->getShareType() !== IShare::TYPE_ROOM &&
-			$share->getShareType() !== IShare::TYPE_DECK
-		) {
-			return false;
-		}
-
-		if ($share->getShareOwner() === $this->currentUser ||
-			$share->getSharedBy() === $this->currentUser
-		) {
-			// Delete the whole share, not just for self
-			return false;
-		}
-
-		// If in the recipient group, you can delete the share from self
-		if ($share->getShareType() === IShare::TYPE_GROUP) {
+		if ($checkGroups && $share->getShareType() === Share::SHARE_TYPE_GROUP) {
 			$sharedWith = $this->groupManager->get($share->getSharedWith());
 			$user = $this->userManager->get($this->currentUser);
 			if ($user !== null && $sharedWith !== null && $sharedWith->inGroup($user)) {
@@ -1421,17 +1024,14 @@
 			}
 		}
 
-		if ($share->getShareType() === IShare::TYPE_ROOM) {
-			try {
-				return $this->getRoomShareHelper()->canAccessShare($share, $this->currentUser);
-			} catch (QueryException $e) {
-				return false;
-			}
+		if ($share->getShareType() === Share::SHARE_TYPE_CIRCLE) {
+			// TODO: have a sanity check like above?
+			return true;
 		}
 
-		if ($share->getShareType() === IShare::TYPE_DECK) {
+		if ($share->getShareType() === Share::SHARE_TYPE_ROOM) {
 			try {
-				return $this->getDeckShareHelper()->canAccessShare($share, $this->currentUser);
+				return $this->getRoomShareHelper()->canAccessShare($share, $this->currentUser);
 			} catch (QueryException $e) {
 				return false;
 			}
@@ -1487,7 +1087,7 @@
 
 
 		try {
-			if ($this->shareManager->shareProviderExists(IShare::TYPE_CIRCLE)) {
+			if ($this->shareManager->shareProviderExists(Share::SHARE_TYPE_CIRCLE)) {
 				$share = $this->shareManager->getShareById('ocCircleShare:' . $id, $this->currentUser);
 				return $share;
 			}
@@ -1496,7 +1096,7 @@
 		}
 
 		try {
-			if ($this->shareManager->shareProviderExists(IShare::TYPE_EMAIL)) {
+			if ($this->shareManager->shareProviderExists(Share::SHARE_TYPE_EMAIL)) {
 				$share = $this->shareManager->getShareById('ocMailShare:' . $id, $this->currentUser);
 				return $share;
 			}
@@ -1511,15 +1111,6 @@
 			// Do nothing, just try the other share type
 		}
 
-		try {
-			if ($this->shareManager->shareProviderExists(IShare::TYPE_DECK)) {
-				$share = $this->shareManager->getShareById('deck:' . $id, $this->currentUser);
-				return $share;
-			}
-		} catch (ShareNotFound $e) {
-			// Do nothing, just try the other share type
-		}
-
 		if (!$this->shareManager->outgoingServer2ServerSharesAllowed()) {
 			throw new ShareNotFound();
 		}
@@ -1541,7 +1132,7 @@
 
 	/**
 	 * Cleanup the remaining locks
-	 * @throws LockedException
+	 * @throws @LockedException
 	 */
 	public function cleanup() {
 		if ($this->lockedNode !== null) {
@@ -1555,7 +1146,7 @@
 	 * If the Talk application is not enabled or the helper is not available
 	 * a QueryException is thrown instead.
 	 *
-	 * @return \OCA\Talk\Share\Helper\ShareAPIController
+	 * @return \OCA\Spreed\Share\Helper\ShareAPIController
 	 * @throws QueryException
 	 */
 	private function getRoomShareHelper() {
@@ -1563,111 +1154,7 @@
 			throw new QueryException();
 		}
 
-		return $this->serverContainer->get('\OCA\Talk\Share\Helper\ShareAPIController');
-	}
-
-	/**
-	 * Returns the helper of ShareAPIHelper for deck shares.
-	 *
-	 * If the Deck application is not enabled or the helper is not available
-	 * a QueryException is thrown instead.
-	 *
-	 * @return \OCA\Deck\Sharing\ShareAPIHelper
-	 * @throws QueryException
-	 */
-	private function getDeckShareHelper() {
-		if (!$this->appManager->isEnabledForUser('deck')) {
-			throw new QueryException();
-		}
-
-		return $this->serverContainer->get('\OCA\Deck\Sharing\ShareAPIHelper');
-	}
-
-	/**
-	 * @param string $viewer
-	 * @param Node $node
-	 * @param bool $reShares
-	 *
-	 * @return IShare[]
-	 */
-	private function getSharesFromNode(string $viewer, $node, bool $reShares): array {
-		$providers = [
-			IShare::TYPE_USER,
-			IShare::TYPE_GROUP,
-			IShare::TYPE_LINK,
-			IShare::TYPE_EMAIL,
-			IShare::TYPE_EMAIL,
-			IShare::TYPE_CIRCLE,
-			IShare::TYPE_ROOM,
-			IShare::TYPE_DECK
-		];
-
-		// Should we assume that the (currentUser) viewer is the owner of the node !?
-		$shares = [];
-		foreach ($providers as $provider) {
-			if (!$this->shareManager->shareProviderExists($provider)) {
-				continue;
-			}
-
-			$providerShares =
-				$this->shareManager->getSharesBy($viewer, $provider, $node, $reShares, -1, 0);
-			$shares = array_merge($shares, $providerShares);
-		}
-
-		if ($this->shareManager->outgoingServer2ServerSharesAllowed()) {
-			$federatedShares = $this->shareManager->getSharesBy(
-				$this->currentUser, IShare::TYPE_REMOTE, $node, $reShares, -1, 0
-			);
-			$shares = array_merge($shares, $federatedShares);
-		}
-
-		if ($this->shareManager->outgoingServer2ServerGroupSharesAllowed()) {
-			$federatedShares = $this->shareManager->getSharesBy(
-				$this->currentUser, IShare::TYPE_REMOTE_GROUP, $node, $reShares, -1, 0
-			);
-			$shares = array_merge($shares, $federatedShares);
-		}
-
-		return $shares;
-	}
-
-
-	/**
-	 * @param Node $node
-	 *
-	 * @throws SharingRightsException
-	 */
-	private function confirmSharingRights(Node $node): void {
-		if (!$this->hasResharingRights($this->currentUser, $node)) {
-			throw new SharingRightsException('no sharing rights on this item');
-		}
-	}
-
-
-	/**
-	 * @param string $viewer
-	 * @param Node $node
-	 *
-	 * @return bool
-	 */
-	private function hasResharingRights($viewer, $node): bool {
-		if ($viewer === $node->getOwner()->getUID()) {
-			return true;
-		}
-
-		foreach ([$node, $node->getParent()] as $node) {
-			$shares = $this->getSharesFromNode($viewer, $node, true);
-			foreach ($shares as $share) {
-				try {
-					if ($this->shareProviderResharingRights($viewer, $share, $node)) {
-						return true;
-					}
-				} catch (InvalidPathException | NotFoundException $e) {
-				}
-			}
-		}
-
-		return false;
+		return $this->serverContainer->query('\OCA\Spreed\Share\Helper\ShareAPIController');
 	}
 
 
@@ -1679,12 +1166,12 @@
 	 * @param string $userId
 	 * @param IShare $share
 	 * @param Node $node
-	 *
 	 * @return bool
 	 * @throws NotFoundException
-	 * @throws InvalidPathException
+	 * @throws \OCP\Files\InvalidPathException
 	 */
 	private function shareProviderResharingRights(string $userId, IShare $share, $node): bool {
+
 		if ($share->getShareOwner() === $userId) {
 			return true;
 		}
@@ -1690,7 +1177,7 @@
 		}
 
 		// we check that current user have parent resharing rights on the current file
-		if ($node !== null && ($node->getPermissions() & Constants::PERMISSION_SHARE) !== 0) {
+		if ($node !== null && ($node->getPermissions() & \OCP\Constants::PERMISSION_SHARE) !== 0) {
 			return true;
 		}
 
@@ -1698,24 +1185,23 @@
 			return false;
 		}
 
-		if ($share->getShareType() === IShare::TYPE_USER && $share->getSharedWith() === $userId) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_USER && $share->getSharedWith() === $userId) {
 			return true;
 		}
 
-		if ($share->getShareType() === IShare::TYPE_GROUP && $this->groupManager->isInGroup($userId, $share->getSharedWith())) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_GROUP && $this->groupManager->isInGroup($userId, $share->getSharedWith())) {
 			return true;
 		}
 
-		if ($share->getShareType() === IShare::TYPE_CIRCLE && \OC::$server->getAppManager()->isEnabledForUser('circles')
-			&& class_exists('\OCA\Circles\Api\v1\Circles')) {
+		if ($share->getShareType() === \OCP\Share::SHARE_TYPE_CIRCLE && \OC::$server->getAppManager()->isEnabledForUser('circles') &&
+			class_exists('\OCA\Circles\Api\v1\Circles')) {
 			$hasCircleId = (substr($share->getSharedWith(), -1) === ']');
 			$shareWithStart = ($hasCircleId ? strrpos($share->getSharedWith(), '[') + 1 : 0);
 			$shareWithLength = ($hasCircleId ? -1 : strpos($share->getSharedWith(), ' '));
-			if ($shareWithLength === false) {
-				$sharedWith = substr($share->getSharedWith(), $shareWithStart);
-			} else {
-				$sharedWith = substr($share->getSharedWith(), $shareWithStart, $shareWithLength);
+			if (is_bool($shareWithLength)) {
+				$shareWithLength = -1;
 			}
+			$sharedWith = substr($share->getSharedWith(), $shareWithStart, $shareWithLength);
 			try {
 				$member = \OCA\Circles\Api\v1\Circles::getMember($sharedWith, $userId, 1);
 				if ($member->getLevel() >= 4) {
@@ -1730,59 +1216,4 @@
 		return false;
 	}
 
-	/**
-	 * Get all the shares for the current user
-	 *
-	 * @param Node|null $path
-	 * @param boolean $reshares
-	 * @return IShare[]
-	 */
-	private function getAllShares(?Node $path = null, bool $reshares = false) {
-		// Get all shares
-		$userShares = $this->shareManager->getSharesBy($this->currentUser, IShare::TYPE_USER, $path, $reshares, -1, 0);
-		$groupShares = $this->shareManager->getSharesBy($this->currentUser, IShare::TYPE_GROUP, $path, $reshares, -1, 0);
-		$linkShares = $this->shareManager->getSharesBy($this->currentUser, IShare::TYPE_LINK, $path, $reshares, -1, 0);
-
-		// EMAIL SHARES
-		$mailShares = $this->shareManager->getSharesBy($this->currentUser, IShare::TYPE_EMAIL, $path, $reshares, -1, 0);
-
-		// CIRCLE SHARES
-		$circleShares = $this->shareManager->getSharesBy($this->currentUser, IShare::TYPE_CIRCLE, $path, $reshares, -1, 0);
-
-		// TALK SHARES
-		$roomShares = $this->shareManager->getSharesBy($this->currentUser, IShare::TYPE_ROOM, $path, $reshares, -1, 0);
-
-		$deckShares = $this->shareManager->getSharesBy($this->currentUser, IShare::TYPE_DECK, $path, $reshares, -1, 0);
-
-		// FEDERATION
-		if ($this->shareManager->outgoingServer2ServerSharesAllowed()) {
-			$federatedShares = $this->shareManager->getSharesBy($this->currentUser, IShare::TYPE_REMOTE, $path, $reshares, -1, 0);
-		} else {
-			$federatedShares = [];
-		}
-		if ($this->shareManager->outgoingServer2ServerGroupSharesAllowed()) {
-			$federatedGroupShares = $this->shareManager->getSharesBy($this->currentUser, IShare::TYPE_REMOTE_GROUP, $path, $reshares, -1, 0);
-		} else {
-			$federatedGroupShares = [];
-		}
-
-		return array_merge($userShares, $groupShares, $linkShares, $mailShares, $circleShares, $roomShares, $deckShares, $federatedShares, $federatedGroupShares);
-	}
-
-
-	/**
-	 * merging already formatted shares.
-	 * We'll make an associative array to easily detect duplicate Ids.
-	 * Keys _needs_ to be removed after all shares are retrieved and merged.
-	 *
-	 * @param array $shares
-	 * @param array $newShares
-	 */
-	private function mergeFormattedShares(array &$shares, array $newShares) {
-		foreach ($newShares as $newShare) {
-			if (!array_key_exists($newShare['id'], $shares)) {
-				$shares[$newShare['id']] = $newShare;
-			}
-		}
-	}
 }
