#!/bin/bash
#--------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2018 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
#--------------------------------------------------------------------------------
. `dirname $0`/../lib/init_script.sh

USAGE="Usage: $SCRIPT [ ADD proj_name quota | MODIFY proj_name quota | DISABLE proj_name | SHARE proj_name | UNSHARE proj_name | TITLE proj_name proj_title ]"

# checks

if [ -e "${STORAGE_OC_DATA_ROOT}/control/OFFLINE" ]; then
    errorExit "The IDA service is in OFFLINE mode. Ignoring request: $SCRIPT $*"
fi

for NEEDS_PROG in curl php
do
    PROG_LOCATION=`/usr/bin/which $NEEDS_PROG 2>/dev/null`
    if [ ! -e "$PROG_LOCATION" ]
        then
        errorExit "Can't find $NEEDS_PROG in your \$PATH"
    fi
done

if [ "$1" = "ADD" -o "$1" = "MODIFY" -o "$1" = "TITLE" ]; then
    if [ $# -ne 3 ]; then
        errorExit "$USAGE"
    fi
    if [ -z "$2" -o -z "$3" ]; then
        errorExit "$USAGE"
    fi
elif [ "$1" = "DISABLE" -o "$1" = "SHARE" -o "$1" = "UNSHARE" ]; then
    if [ $# -ne 2 ]; then
        errorExit "$USAGE"
    fi
    if [ -z "$2" ]; then
        errorExit "$USAGE"
    fi
else
    errorExit "$USAGE"
fi

if [ "$ROOT" = "" ]; then
    errorExit "The ROOT variable must be defined"
fi

if [ "$OCC" = "" ]; then
    errorExit "The OCC variable must be defined"
fi

if [ "$CURL_GET" = "" ]; then
    errorExit "The CURL_GET variable must be defined"
fi

if [ "$CURL_POST" = "" ]; then
    errorExit "The CURL_POST variable must be defined"
fi

if [ "$CURL_MKCOL" = "" ]; then
    errorExit "The CURL_MKCOL variable must be defined"
fi

if [ "$CURL_DELETE" = "" ]; then
    errorExit "The CURL_DELETE variable must be defined"
fi

if [ "$STORAGE_OC_DATA_ROOT" = "" ]; then
    errorExit "The STORAGE_OC_DATA_ROOT variable must be defined"
fi

if [ "$IDA_API" = "" ]; then
    errorExit "The IDA_API variable must be defined"
fi

if [ "$SHARE_API" = "" ]; then
    errorExit "The SHARE_API variable must be defined"
fi

if [ "$PROJECT_USER_PREFIX" = "" ]; then
    errorExit "The PROJECT_USER_PREFIX variable must be defined"
fi

if [ "$STAGING_FOLDER_SUFFIX" = "" ]; then
    errorExit "The STAGING_FOLDER_SUFFIX variable must be defined"
fi

if [ "$IDA_MODE_HEADER" = "" ]; then
    errorExit "The IDA_MODE_HEADER variable must be defined"
fi

OPERATION="$1"
PROJECT="$2"
PROJECT_QUOTA="$3"

PROJECT_STAGING_FOLDER="${PROJECT}${STAGING_FOLDER_SUFFIX}"
PROJECT_FROZEN_FOLDER="${PROJECT}"
PROJECT_STAGING_FOLDER_ENCODED=$(echo $PROJECT_STAGING_FOLDER | sed -f $ROOT/lib/urlencode.sed)
PROJECT_FROZEN_FOLDER_ENCODED=$(echo $PROJECT_FROZEN_FOLDER | sed -f $ROOT/lib/urlencode.sed)
PROJECT_GROUP="${PROJECT}"
PROJECT_USER="${PROJECT_USER_PREFIX}${PROJECT}"
PROJECT_USER_FULL_NAME="${PROJECT}"

export OC_PASS="$PROJECT_USER_PASS"

# execute

TEST_NAME=`echo "$PROJECT" | tr [:lower:] [:upper:]`
for DISALLOWED in $DISALLOWED_NAMES
do
    if [ "$TEST_NAME" = "$DISALLOWED" ]; then
        errorExit "Name \"$PROJECT\" not allowed"
    fi
done

if [ "$OPERATION" = "ADD" ]; then

    echoAndLog "Checking for existing share owner folder..."

    # If project folder exists, ensure link in data root is correct

    for STORAGE_VOLUME in ${STORAGE_CANDIDATES[*]}
    do
        if [ -d "$STORAGE_VOLUME/$PROJECT_USER" -a ! -L "$STORAGE_VOLUME/$PROJECT_USER" ]; then

            echoAndLog "Project share owner folder already exists: $STORAGE_VOLUME/$PROJECT_USER"

            if [ "$STORAGE_VOLUME" != "$STORAGE_OC_DATA_ROOT" ]; then

                echoAndLog "Creating new data root link to project share owner folder: $STORAGE_OC_DATA_ROOT/$PROJECT_USER -> $STORAGE_VOLUME/$PROJECT_USER"

                if [ -L "$STORAGE_OC_DATA_ROOT/$PROJECT_USER" ]; then
                    rm -f "$STORAGE_OC_DATA_ROOT/$PROJECT_USER"
                fi

                ln -s "$STORAGE_VOLUME/$PROJECT_USER" "$STORAGE_OC_DATA_ROOT"

                if [ ! -d "$STORAGE_OC_DATA_ROOT/$PROJECT_USER" ]; then
                    errorExit "Failed to create new data root link to project share owner folder: $STORAGE_OC_DATA_ROOT/$PROJECT_USER"
                fi
            fi

            break
        fi
    done

    # If project folder does not exist, create it

    if [ ! -e "$STORAGE_OC_DATA_ROOT/$PROJECT_USER" ]; then

        if [ -L "$STORAGE_OC_DATA_ROOT/$PROJECT_USER" ]; then
            rm -f "$STORAGE_OC_DATA_ROOT/$PROJECT_USER"
        fi

        # For non production environments, randomly select a storage volume for the new project
        if [ "$IDA_ENVIRONMENT" != "PRODUCTION" ]; then
            SC_SIZE=${#STORAGE_CANDIDATES[@]}
            SC_INDEX=$(($RANDOM % $SC_SIZE))
            STORAGE_VOLUME="${STORAGE_CANDIDATES[$SC_INDEX]}"
            echoAndLog "Creating new project in randomly selected volume $STORAGE_VOLUME"
        # Else in production, select the storage volume with the most available space
        else
            AVAILABLE_SPACE=0
            for CANDIDATE_STORAGE_VOLUME in ${STORAGE_CANDIDATES[*]}
            do
                CANDIDATE_AVAILABLE_SPACE=`df -k "$CANDIDATE_STORAGE_VOLUME" | tail -1 | sed -e 's/  */\t/g' | cut -f 4 | sed -e 's/[^0-9]//g'`
                if [ "$CANDIDATE_AVAILABLE_SPACE" = "" ]; then
                    errorExit "Failed to determine available space of volume: $CANDIDATE_STORAGE_VOLUME"
                fi
                if [ $CANDIDATE_AVAILABLE_SPACE -ge $AVAILABLE_SPACE ]; then
                    AVAILABLE_SPACE=$CANDIDATE_AVAILABLE_SPACE
                    STORAGE_VOLUME=$CANDIDATE_STORAGE_VOLUME
                fi
            done
            echoAndLog "Creating new project in least full volume $STORAGE_VOLUME"
        fi

        echoAndLog "Creating new project share owner folder: $STORAGE_VOLUME/$PROJECT_USER"

        mkdir -p -m g+rw,o-rwx "$STORAGE_VOLUME/$PROJECT_USER"

        if [ ! -d "$STORAGE_VOLUME/$PROJECT_USER" ]; then
            errorExit "Failed to create project share owner folder: $STORAGE_VOLUME/$PROJECT_USER"
        fi

        if [ "$STORAGE_VOLUME" != "$STORAGE_OC_DATA_ROOT" ]; then

            echoAndLog "Creating data root link to project share owner folder: $STORAGE_OC_DATA_ROOT/$PROJECT_USER -> $STORAGE_VOLUME/$PROJECT_USER"

            ln -s "$STORAGE_VOLUME/$PROJECT_USER" "$STORAGE_OC_DATA_ROOT"

            if [ ! -d "$STORAGE_OC_DATA_ROOT/$PROJECT_USER" ]; then
                errorExit "Failed to create data root link to project share owner folder: $STORAGE_OC_DATA_ROOT/$PROJECT_USER"
            fi
        fi
    fi

    echoAndLog "Creating project share owner user account ${PROJECT_USER} with quota ${PROJECT_QUOTA} GiB"

    OUT=`php "$OCC" user:add "$PROJECT_USER" -g "$PROJECT_GROUP" --display-name "$PROJECT_USER_FULL_NAME" --password-from-env 2>&1`
    addToLog $OUT
    HITS=`echo $OUT | grep 'created successfully' | wc -l`
    if [ "$HITS" -ne 1 ]; then
        errorExit "$OUT"
    fi

    # check that quota input is only digits
    NUMS=`echo "$PROJECT_QUOTA" | tr -cd '[:digit:]'`
    if [ "$PROJECT_QUOTA" != "$NUMS" ]; then
        errorExit "Quota \"$PROJECT_QUOTA\" is not a number"
    fi

    # set quota, value is in GiB though Nextcloud expects GB designator
    OUT=`php "$OCC" user:setting "$PROJECT_USER" files quota "$PROJECT_QUOTA GB" 2>&1`
    if [ -n "$OUT" ]; then
        errorExit "$OUT"
    fi

    # force initialization of user root directory, because Nextcloud won't do it until first login otherwise
    mkdir -p -m g+rw,o-rwx "$STORAGE_VOLUME/$PROJECT_USER/files"
    php "$OCC" files:scan "$PROJECT_USER" >/dev/null

    echoAndLog "Creating project shared staging folder..."

    # create the project read-write staging directory to share under project users home
    OUT=`$CURL_MKCOL -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${FILE_API}/${PROJECT_STAGING_FOLDER_ENCODED}" -H "OCS-APIRequest: true" 2>&1`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        errorExit "Failed to create staging directory, curl error $CURL_ERROR $OUT"
    fi
    # log but continue on "already exists" error message, error on other output
    if [ -n "$OUT" ]; then
        addToLog "$OUT"
        HITS=`echo $OUT | grep 'The resource you tried to create already exists' | wc -l`
        if [ "$HITS" -ne 1 ]; then
            errorExit "$OUT"
        fi
    fi

    # share the project staging directory to the group with read-write privileges
    echoAndLog "Sharing project shared staging folder..."
    OUT=`$CURL_POST -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}?path=/${PROJECT_STAGING_FOLDER_ENCODED}&shareType=1&shareWith=${PROJECT_GROUP}&permissions=31&publicUpload=false" -H "OCS-APIRequest: true" 2>&1`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        errorExit "Share staging directory, curl error $CURL_ERROR $OUT"
    fi
    HITS=`echo $OUT | grep '<status>ok</status>' | wc -l`
    if [ "$HITS" -ne 1 ]; then
        errorExit "$OUT"
    fi

    echoAndLog "Creating project shared frozen folder..."

    # create the project frozen directory to share under project users home
    OUT=`$CURL_MKCOL -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${FILE_API}/${PROJECT_FROZEN_FOLDER_ENCODED}" -H "OCS-APIRequest: true" 2>&1`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        errorExit "Create frozen directory, curl error $CURL_ERROR $OUT"
    fi
    # log but continue on "already exists" error message, error on other output
    if [ -n "$OUT" ]; then
        addToLog "$OUT"
        HITS=`echo $OUT | grep 'The resource you tried to create already exists' | wc -l`
        if [ "$HITS" -ne 1 ]; then
            errorExit "$OUT"
        fi
    fi

    # share the project frozen directory to the group with read-write privileges
    echoAndLog "Sharing project shared frozen folder..."
    OUT=`$CURL_POST -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}?path=/${PROJECT_FROZEN_FOLDER_ENCODED}&shareType=1&shareWith=${PROJECT_GROUP}&permissions=16&publicUpload=false" -H "OCS-APIRequest: true" 2>&1`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        errorExit "Share frozen directory, curl error $CURL_ERROR $OUT"
    fi
    HITS=`echo $OUT | grep '<status>ok</status>' | wc -l`
    if [ "$HITS" -ne 1 ]; then
        errorExit "$OUT"
    fi

    # record project initialization in data changes table
    echoAndLog "Recording project initialization data change event..."
    DATA="{ \"project\": \"${PROJECT}\", \"user\": \"service\", \"change\": \"init\", \"pathname\": \"/\", \"timestamp\": \"${START}\", \"mode\": \"system\" }"
    OUT=`$CURL_POST -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" -H "Content-Type: application/json" -d "$DATA" "${IDA_API}/dataChanges" 2>&1`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        errorExit "Project initialization data change, curl error $CURL_ERROR $OUT"
    fi

fi

if [ "$OPERATION" = "SHARE" ]; then

    # share the staging directory to the group with read-write privileges
    OUT=`$CURL_POST -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}?path=/${PROJECT_STAGING_FOLDER_ENCODED}&shareType=1&shareWith=${PROJECT_GROUP}&permissions=31&publicUpload=false" -H "OCS-APIRequest: true" 2>&1`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        errorExit "Share staging directory failed, curl error $CURL_ERROR $OUT"
    fi
    HITS=`echo $OUT | grep '<status>ok</status>' | wc -l`
    if [ "$HITS" -ne 1 ]; then
        errorExit "$OUT"
    fi

    # share the project frozen directory to the group with read-only privileges
    OUT=`$CURL_POST -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}?path=/${PROJECT_FROZEN_FOLDER_ENCODED}&shareType=1&shareWith=${PROJECT_GROUP}&permissions=16&publicUpload=false" -H "OCS-APIRequest: true" 2>&1`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        errorExit "Share frozen directory failed, curl error $CURL_ERROR $OUT"
    fi
    HITS=`echo $OUT | grep '<status>ok</status>' | wc -l`
    if [ "$HITS" -ne 1 ]; then
        errorExit "$OUT"
    fi

fi

if [ "$OPERATION" = "UNSHARE" ]; then

    # get the share id of the project staging directory
    SHARE_ID=`$CURL_GET -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}?path=/${PROJECT_STAGING_FOLDER_ENCODED}&reshares=false&subfiles=false" -H "OCS-APIRequest: true" | grep '^ *<id>' | sed 's/^ *<id>\([0-9]*\)<\/id>/\1/'`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        echoAndLog "Warning: Failed to get staging directory share ID, curl error $CURL_ERROR $OUT"
    else
        # delete staging directory if it exists
        if [ "$SHARE_ID" ]; then
            NUMS=`echo "$SHARE_ID" | tr -cd '[:digit:]'`
            if [ -z "$NUMS" -o "$SHARE_ID" != "$NUMS" ]; then
                echoAndLog "Warning: Project folder \"$PROJECT_STAGING_FOLDER\" share ID \"$SHARE_ID\" is not a number"
            else
                # unshare project staging directory (delete sharing relationship)
                OUT=`$CURL_DELETE -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}/${SHARE_ID}" -H "OCS-APIRequest: true" 2>&1`
                CURL_ERROR="$?"
                if [ "$CURL_ERROR" -ne "0" ]; then
                    echoAndLog "Warning: Failed to unshare staging directory, curl error $CURL_ERROR $OUT"
                fi
                HITS=`echo $OUT | grep '<status>ok</status>' | wc -l`
                if [ "$HITS" -ne 1 ]; then
                    errorExit "$OUT"
                fi
            fi
        fi
    fi

    # get the share id of the project frozen directory
    SHARE_ID=`$CURL_GET -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}?path=/${PROJECT_FROZEN_FOLDER_ENCODED}&reshares=false&subfiles=false" -H "OCS-APIRequest: true" | grep '^ *<id>' | sed 's/^ *<id>\([0-9]*\)<\/id>/\1/'`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        echoAndLog "Warning: Failed to get frozen directory share ID, curl error $CURL_ERROR $OUT"
    else
        # delete frozen directory if it exists
        if [ "$SHARE_ID" ]; then
            NUMS=`echo "$SHARE_ID" | tr -cd '[:digit:]'`
            if [ -z "$NUMS" -o "$SHARE_ID" != "$NUMS" ]; then
                echoAndLog "Warning: Project folder \"$PROJECT_FROZEN_FOLDER\" share ID \"$SHARE_ID\" is not a number"
            else
                # unshare project frozen directory (delete sharing relationship)
                OUT=`$CURL_DELETE -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}/${SHARE_ID}" -H "OCS-APIRequest: true" 2>&1`
                CURL_ERROR="$?"
                if [ "$CURL_ERROR" -ne "0" ]; then
                    echoAndLog "Warning: Failed to unshare frozen directory, curl error $CURL_ERROR $OUT"
                fi
                HITS=`echo $OUT | grep '<status>ok</status>' | wc -l`
                if [ "$HITS" -ne 1 ]; then
                    errorExit "$OUT"
                fi
            fi
        fi
    fi

fi

if [ "$OPERATION" = "MODIFY" ]; then
    # check that quota input is only digits
    NUMS=`echo "$PROJECT_QUOTA" | tr -cd '[:digit:]'`
    if [ "$PROJECT_QUOTA" != "$NUMS" ]; then
        errorExit "Quota \"$PROJECT_QUOTA\" is not a number"
    fi

    # set quota, value is in GiB though Nextcloud expects GB designator
    OUT=`php "$OCC" user:setting "$PROJECT_USER" files quota "$PROJECT_QUOTA GB" 2>&1`
    if [ -n "$OUT" ]; then
        errorExit "$OUT"
    fi
fi

if [ "$OPERATION" = "DISABLE" ]; then
    OUT=`php "$OCC" user:resetpassword --password-from-env "$PROJECT_USER" 2>&1`
    HITS=`echo $OUT | grep 'Successfully reset password' | wc -l`
    if [ "$HITS" -ne 1 ]; then
        errorExit "$OUT"
    fi

    # get the share id of the project staging directory
    SHARE_ID=`$CURL_GET -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}?path=/${PROJECT_STAGING_FOLDER_ENCODED}&reshares=false&subfiles=false" -H "OCS-APIRequest: true" | grep '^ *<id>' | sed 's/^ *<id>\([0-9]*\)<\/id>/\1/'`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        echoAndLog "Warning: Failed to get staging directory share ID, curl error $CURL_ERROR $OUT"
    else
        # unshare staging directory if it exists
        if [ "$SHARE_ID" ]; then
            NUMS=`echo "$SHARE_ID" | tr -cd '[:digit:]'`
            if [ -z "$NUMS" -o "$SHARE_ID" != "$NUMS" ]; then
                echoAndLog "Warning: Project folder \"$PROJECT_STAGING_FOLDER\" share ID \"$SHARE_ID\" is not a number"
            else
                # unshare project staging directory (delete sharing relationship)
                OUT=`$CURL_DELETE -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}/${SHARE_ID}" -H "OCS-APIRequest: true" 2>&1`
                CURL_ERROR="$?"
                if [ "$CURL_ERROR" -ne "0" ]; then
                    echoAndLog "Warning: Failed to unshare staging directory, curl error $CURL_ERROR $OUT"
                fi
                HITS=`echo $OUT | grep '<status>ok</status>' | wc -l`
                if [ "$HITS" -ne 1 ]; then
                    errorExit "$OUT"
                fi
            fi
        fi
    fi

    # get the share id of the project frozen directory
    SHARE_ID=`$CURL_GET -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}?path=/${PROJECT_FROZEN_FOLDER_ENCODED}&reshares=false&subfiles=false" -H "OCS-APIRequest: true" | grep '^ *<id>' | sed 's/^ *<id>\([0-9]*\)<\/id>/\1/'`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        echoAndLog "Warning: Failed to get frozen directory share ID, curl error $CURL_ERROR $OUT"
    else
        # unshare frozen directory if it exists
        if [ "$SHARE_ID" ]; then
            NUMS=`echo "$SHARE_ID" | tr -cd '[:digit:]'`
            if [ -z "$NUMS" -o "$SHARE_ID" != "$NUMS" ]; then
                echoAndLog "Warning: Project \"$PROJECT_FROZEN_FOLDER\" share ID \"$SHARE_ID\" is not a number"
            else
                # unshare project frozen directory (delete sharing relationship)
                OUT=`$CURL_DELETE -u "${PROJECT_USER}:${OC_PASS}" -H "$IDA_MODE_HEADER" "${SHARE_API}/${SHARE_ID}" -H "OCS-APIRequest: true" 2>&1`
                CURL_ERROR="$?"
                if [ "$CURL_ERROR" -ne "0" ]; then
                    echoAndLog "Warning: Failed to unshare frozen directory, curl error $CURL_ERROR $OUT"
                fi
                HITS=`echo $OUT | grep '<status>ok</status>' | wc -l`
                if [ "$HITS" -ne 1 ]; then
                    errorExit "$OUT"
                fi
            fi
        fi
    fi

    # disable project share owner
    OUT=`php "$OCC" user:disable "$PROJECT_USER" 2>&1`
    HITS=`echo $OUT | grep 'The specified user is disabled' | wc -l`
    if [ "$HITS" -ne 1 ]; then
        errorExit "$OUT"
    fi

    # delete group
    OUT=`$CURL_DELETE -u "${NC_ADMIN_USER}:${NC_ADMIN_PASS}" -H "$IDA_MODE_HEADER" "${GROUP_API}/${PROJECT_GROUP}" -H "OCS-APIRequest: true" 2>&1`
    CURL_ERROR="$?"
    if [ "$CURL_ERROR" -ne "0" ]; then
        errorExit "Delete group, curl error $CURL_ERROR $OUT"
    fi
    HITS=`echo $OUT | grep '<status>ok</status>' | wc -l`
    if [ "$HITS" -ne 1 ]; then
        errorExit "$OUT"
    fi

    # Data is not deleted
    echoAndLog "NOTE: Project \"$PROJECT_USER\" data is kept on purpose"
fi

if [ "$OPERATION" = "TITLE" ]; then
    # Set project title
    echoAndLog "Setting project $PROJECT title to \"$PROJECT_QUOTA\""
    if [ ! -d "$STORAGE_OC_DATA_ROOT/$PROJECT_USER/files" ]; then
        errorExit "Project $PROJECT does not exist!"
    fi
    echo "$3" > "$STORAGE_OC_DATA_ROOT/$PROJECT_USER/files/TITLE"
fi
