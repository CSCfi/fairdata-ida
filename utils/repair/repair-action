#!/bin/bash
#--------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2018 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
#
#--------------------------------------------------------------------------------
#
# This script will repair the frozen file details for a project, to reflect the
# current file storage organization in the project's frozen space, updating both
# the Nextcloud IDA app database as well as METAX accordingly.
#
# The repair operations are limited to files within the scope of a particular
# failed action, such that the state of the project, file storage, and metadata
# storage are modified to correspond to the state that would have been if the
# action had succeeded.
#
# This script is only needed in the rare case that the initialization of an
# action is interrupted while it is registering the action and associated files
# or while moving the files physically.
#
# WARNING! THIS SCRIPT IS A LAST-RESORT OPERATION CAUSING A PROJECT SERVICE BREAK!
#
# While the script is running, users will not be able to access any project
# files, as it unshares the staging and frozen folders to ensure that there is
# no chance of any user actions further confusing the project state while it is
# being repaird. For very large projects, executing this script can take days,
# or when millions of files are concerned, for the largest projects, weeks!
#
# DO NOTE EXECUTE THIS SCRIPT WITHOUT FIRST COORDINATING WITH THE IDA PO!!!!
#
#--------------------------------------------------------------------------------
# Initialize script with common definitions

INIT_FILE=`dirname $0`/../../lib/init_script.sh

if [ -e $INIT_FILE ]
then
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting." >&2
    exit 1
fi

#--------------------------------------------------------------------------------
# Process input and get project name, per default script behavior

USAGE="Usage: $SCRIPT project_name action_pid"

if [ "$PROJECT" == "" ]; then
    PROJECT=`echo "$1" | sed -e 's/ *//g' `
fi

if [ "$PROJECT" == "" ]; then
    echo "$USAGE" >&2
    exit 1
fi

if [ "$ACTION" == "" ]; then
    PROJECT=`echo "$2" | sed -e 's/ *//g' `
fi

if [ "$ACTION" == "" ]; then
    echo "$USAGE" >&2
    exit 1
fi

PROJECT_USER="${PROJECT_USER_PREFIX}${PROJECT}"

#--------------------------------------------------------------------------------
# Verify required variables are defined

if [ "$ROOT" == "" ]; then
    echo "Error: The variable ROOT must be defined." >&2
    exit 1
fi

if [ "$PROJECT_USER" == "" ]; then
    echo "Error: The variable PROJECT_USER must be defined." >&2
    exit 1
fi

if [ "$PROJECT_USER_PASS" == "" ]; then
    echo "Error: The variable PROJECT_USER_PASS must be defined." >&2
    exit 1
fi

if [ "$URL_BASE_IDA" == "" ]; then
    echo "Error: The variable URL_BASE_IDA must be defined." >&2
    exit 1
fi

if [ "$OCC" == "" ]; then
    echo "Error: The variable OCC must be defined." >&2
    exit 1
fi

if [ "$METAX_API_ROOT_URL" == "" ]; then
    echo "Error: The variable METAX_API_ROOT_URL must be defined." >&2
    exit 1
fi

if [ "$DATA_REPLICATION_ROOT" == "" ]; then
    echo "Error: The variable DATA_REPLICATION_ROOT must be defined." >&2
    exit 1
fi

# TODO: Finish revising this script, based on repair-project, to be limited to
# the scope of the specified action...

echo "This script is not finished..."
exit 0


#--------------------------------------------------------------------------------
echoAndLog "Unsharing project shared folders..."

OUT=`$ROOT/admin/ida_project UNSHARE $PROJECT 2>&1`

if [ "$?" -ne 0 ]; then
    errorExit "Failed to unshare project folders: $OUT"
fi

#--------------------------------------------------------------------------------
echoAndLog "Rescanning project files in data root..."

OUT=`sudo -u apache $OCC files:scan "$PROJECT_USER" 2>&1`

ERROR=`echo $OUT | grep "Unknown user"`
if [ "$ERROR" != "" ]; then
    errorExit "$OUT"
fi

#--------------------------------------------------------------------------------
echoAndLog "Repairing project data in Nextcloud per action..."

# Normalize JSON response from repair operation so that details for each file are on a single line,
# to facilitate calculating total file count and import into METAX...

$CURL_POST $PROJECT_USER:$PROJECT_USER_PASS -H "Content-Type: application/json" "$URL_BASE_IDA/api/action/$ACTION/repair" 2>&1 | \
    sed -e 's/\n//g' | \
    sed -e 's/},/},\n/g' | \
    sed -e 's/\\\//\//g' | \
    ascii2uni -q -a U | \
    grep -v '^ *$' > $TMPDIR/$SCRIPT-$PROJECT-frozen-files.json

FAILED=`grep '"status":"error"' $TMPDIR/$SCRIPT-$PROJECT-frozen-files.json`

if [ "$FAILED" != "" ]; then
    errorExit "Failed to repair project data for action in Nextcloud!"
fi

FROZEN_FILE_COUNT=`wc -l < $TMPDIR/$SCRIPT-$PROJECT-frozen-files.json`

echoAndLog "Total frozen files after repair: $FROZEN_FILE_COUNT"

#--------------------------------------------------------------------------------
echoAndLog "Repairing frozen file metadata in METAX..."

if [ "$METAX_AVAILABLE" != "0" ]; then

    echo "[]" > "$TMPDIR/$SCRIPT-$PROJECT-dummy-metadata.json" # Currently required by repair-metadata script

    # TODO: Update the behavior of the repair-metadata script and/or METAX as documented at the top of the script
    # OUT=`$IDA_ROOT/utils/repair/lib/repair-metadata "$PROJECT" "$TMPDIR/$SCRIPT-$PROJECT-frozen-files.json" "$CONFIG_FILE" "0" 2>&1`
    OUT=`$IDA_ROOT/utils/repair/lib/repair-metadata "$TMPDIR/$SCRIPT-$PROJECT-frozen-files.json" "$TMPDIR/$SCRIPT-$PROJECT-dummy-metadata.json" "$CONFIG_FILE" 2>&1`

    if [ "$?" -ne 0 ]; then
        errorExit "Failed to repair metadata in METAX: $OUT"
    else
        echoAndLog "$OUT"
    fi
else
    echoAndLog "METAX unavailable. Skipping..."
fi

#--------------------------------------------------------------------------------
echoAndLog "Replicating repaired frozen files..."

# Ensure replication root exists

if [ ! -d "$DATA_REPLICATION_ROOT" ]; then
    errorExit "Data replication root folder does not exist!"
fi

# Ensure project folder exists in replication storage

if [ ! -d "$DATA_REPLICATION_ROOT/$PROJECT" ]; then
    mkdir "$DATA_REPLICATION_ROOT/$PROJECT" 2>/dev/null
    if [ "$?" -ne 0 ]; then
        errorExit "Failed to create project folder in data replication root: $DATA_REPLICATION_ROOT/$PROJECT"
    fi
fi

FROZEN_FOLDER="${STORAGE_OC_DATA_ROOT}/${PROJECT_USER}/files/${PROJECT}"

# Recursively copy any missing or updated files and folders from project frozen folder to project folder in replication storage

OUT=`rsync --archive --checksum --verbose "$FROZEN_FOLDER/" "$DATA_REPLICATION_ROOT/$PROJECT"`

if [ "$?" -ne 0 ]; then
    errorExit "Failed to replicate frozen files: $OUT"
fi

#--------------------------------------------------------------------------------
echoAndLog "Resharing project shared folders..."

OUT=`$ROOT/admin/ida_project SHARE $PROJECT 2>&1`

if [ "$?" -ne 0 ]; then
    errorExit "Failed to reshare project folders: $OUT"
fi

#--------------------------------------------------------------------------------
echoAndLog "Project $PROJECT repaired successfully."

