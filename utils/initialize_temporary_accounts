#!/bin/bash
#--------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2018 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
#--------------------------------------------------------------------------------
#
# This script initializes a set of temporary user accounts (project groups, users,
# group memberships, and files) which are used for demos, training, usability
# testing and general review of the IDA service.
#
# Project and user accounts will be created for 50 distinct projects, named
#
# Temporary_Project_1    temporary_user_1
# Temporary_Project_2    temporary_user_2
# ...
# Temporary_Project_50   temporary_user_50
#
# The password for all temporary_user_# accounts is the sha256 hash of the username.
# Username::Password pairs are output to standard output as the script executes, for
# copying and later distribution to users.
#
# All projects will be initialized without any data.
#
# If the argument "flush" is given, then only the existing accounts and data
# are purged and no new accounts will be created.
#
#--------------------------------------------------------------------------------
. `dirname $0`/../lib/init_script.sh

PROJECT_MAX="50"

#--------------------------------------------------------------------------------

unset OC_PASS
export OC_PASS=""

PADDING="-45"

function failure {
    echo "FAILED: " "$@"
}

function success {
    echo "OK"
}

#--------------------------------------------------------------------------------

# flush all action and frozen node data from database for all projects

echo "Flushing all action and frozen node records from database..."

COUNT=1; while [ $COUNT -le $PROJECT_MAX ]; do
    PROJECT="Temporary_Project_$COUNT"
    # Use the PSO account when flushing the project data, NOT the admin account
    # This ensures we never accidentally flush any data other than belonging to
    # a temporary project!
    PROJECT_USER="${PROJECT_USER_PREFIX}${PROJECT}"
    STEP="   Flushing $PROJECT"
    printf "%${PADDING}s" "$STEP"
    $CURL_POST $PROJECT_USER:$PROJECT_USER_PASS "$URL_BASE_IDA/api/flush?project=$PROJECT" 2>&1 >/dev/null
    if [ "$?" -ne 0 ]; then
        failure "Failed to flush records for $PROJECT. (ignored)."
    else
        success
    fi
    COUNT=$(( $COUNT + 1 ))
done

#--------------------------------------------------------------------------------

echo "Cleaning up any existing temporary projects..."
echo "Deleting any existing temporary users..."

COUNT=1; while [ $COUNT -le $PROJECT_MAX ]; do
    USER="temporary_user_$COUNT"
    STEP="   Deleting $USER"
    printf "%${PADDING}s" "$STEP"
    OUT=`$ROOT/admin/ida_user DELETE $USER 2>&1`
    if [ "$?" -ne 0 ]; then
        OUT="$OUT (ignored)"
        failure "$OUT"
    else
        success
    fi
    COUNT=$(( $COUNT + 1 ))
done

echo "Deleting any existing temporary projects..."

COUNT=1; while [ $COUNT -le $PROJECT_MAX ]; do
    PROJECT="Temporary_Project_$COUNT"
    STEP="   Deleting $PROJECT"
    printf "%${PADDING}s" "$STEP"
    OUT=`$ROOT/admin/ida_project DISABLE $PROJECT 2>&1`
    if [ "$?" -ne 0 ]; then
        OUT="$OUT (ignored)"
        failure "$OUT"
    else
        success
    fi
    COUNT=$(( $COUNT + 1 ))
done

echo "Deleting any existing project share owners..."

COUNT=1; while [ $COUNT -le $PROJECT_MAX ]; do
    PROJECT="Temporary_Project_$COUNT"
    USER="$PROJECT_USER_PREFIX""$PROJECT"
    STEP="   Deleting $USER"
    printf "%${PADDING}s" "$STEP"
    OUT=`$OCC user:delete $USER 2>&1`
    if [ "$?" -ne 0 ]; then
        OUT="$OUT (ignored)"
        failure "$OUT"
    else
        success
    fi
    COUNT=$(( $COUNT + 1 ))
done

#--------------------------------------------------------------------------------

if [ "$1" = "flush" ]; then
    exit
fi

#--------------------------------------------------------------------------------

echo "Creating temporary accounts..."
echo "Creating projects..."

COUNT=1; while [ $COUNT -le $PROJECT_MAX ]; do
    PROJECT="Temporary_Project_$COUNT"
    STEP="   Creating $PROJECT"
    printf "%${PADDING}s" "$STEP"
    OUT=`$ROOT/admin/ida_project ADD $PROJECT 1 2>&1`
    if [ "$?" -ne 0 ]; then
        failure "$OUT"
    else
        success
    fi
    COUNT=$(( $COUNT + 1 ))
done

#--------------------------------------------------------------------------------

echo "Creating users..."

SERVER=`hostname -s`
HEADER="Temporary Account Credentials - Generated ${TIMESTAMP} on ${SERVER}"

PWFILE="/tmp/temporary_users.${TIMESTAMP}.${SERVER}"

if [ "${EMAIL_SENDER}${EMAIL_RECIPIENTS}" != "" ]; then
    echo "$HEADER" > $PWFILE
fi

COUNT=1; while [ $COUNT -le $PROJECT_MAX ]; do
    PROJECT="Temporary_Project_$COUNT"
    export OC_PASS=`tr -cd '[:alnum:]' < /dev/urandom | head -c6`
    USER="temporary_user_$COUNT"
    CREDENTIALS=$(printf "   %-20s%s" "$USER" "$OC_PASS")
    echo "$CREDENTIALS" >> $PWFILE
    printf "%${PADDING}s" "$CREDENTIALS"
    OUT=`$ROOT/admin/ida_user ADD $USER $PROJECT 2>&1`
    if [ "$?" -ne 0 ]; then
        failure "$OUT"
    else
        echo ""
    fi
    COUNT=$(( $COUNT + 1 ))
done

if [ "${EMAIL_SENDER}${EMAIL_RECIPIENTS}" != "" ]; then
    echo " " | mail -r $EMAIL_SENDER -s "$HEADER" -a $PWFILE $EMAIL_RECIPIENTS
fi

