#!/bin/bash
# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2020 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------
#
# This script reports which projects have had any project data changes during
# the specified period, if defined, or during the past 24 hours by default. 
#
# --------------------------------------------------------------------------------

SCRIPT=`basename "$(realpath $0)"`

USAGE="
Usage: $SCRIPT [ ( after | days-after | 'week' | 'month' | 'year' ) [ ( before | days-before ) ] ] 
       $SCRIPT -h

       after        an ISO date or datetime string /YYYY-MM-DD(Thh:mm:ssZ])?/
       before       an ISO date or datetime string /YYYY-MM-DD(Thh:mm:ssZ])?/
       days-after   calculate a after timestamp the specified number of days in the past
       days-before  calculate a before timestamp the specified number of days in the past
       week         calculate a after timestamp one week in the past
       month        calculate a after timestamp one month in the past
       year         calculate a after timestamp one year in the past

If no after time is specified, a period corresponding to the past 24 hours is used by default.
If an before time is specified, only projects active between the after and before times will be included.
"

PROJECT="null"

# --------------------------------------------------------------------------------
# Initialize script with common definitions

INIT_FILE=`dirname "$(realpath $0)"`/lib/init_audit_script.sh

if [ -e $INIT_FILE ]
then
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting." >&2
    exit 1
fi

#--------------------------------------------------------------------------------

TZ=UTC
AFTER=""
BEFORE=""

if [ "$1" ]; then
    if [ "$DEBUG" = "true" ]; then
        echo "ARG 1:  $1"
    fi
    if [[ "$1" =~ ^(week|month|year)$ ]]; then
        AFTER=`date -d "$START - 1 $1" +"%Y-%m-%dT%H:%M:%SZ"`
    elif [[ "$1" =~ ^[[:digit:]][[:digit:]]*$ ]]; then
        AFTER=`date -d "$START - $1 days" +"%Y-%m-%dT%H:%M:%SZ"`
    elif [[ "$1" =~ ^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}T[[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}Z$ ]]; then
        AFTER="$1"
    elif [[ "$1" =~ ^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}$ ]]; then
        AFTER="$1""T00:00:00Z"
    else
        echo "Invalid parameter: $1"
        exit 1
    fi

    if [ "$2" ]; then
        if [ "$DEBUG" = "true" ]; then
            echo "ARG 2:  $2"
        fi
        if [[ "$2" =~ ^[[:digit:]][[:digit:]]*$ ]]; then
            BEFORE=`date -d "$START - $2 days" +"%Y-%m-%dT%H:%M:%SZ"`
        elif [[ "$2" =~ ^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}T[[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}Z$ ]]; then
            BEFORE="$2"
        elif [[ "$2" =~ ^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}$ ]]; then
            BEFORE="$2""T00:00:00Z"
        else
            echo "Invalid parameter: $2"
            exit 1
        fi
    fi
fi

# Set defaults if not defined elsewhere, allowing the configuration or environment to override defaults

if [ "$AFTER" = "" ]; then
    if [ "$AUDIT_ACTIVE_DAYS_AFTER" ]; then
        AFTER=`date -d "$START - $AUDIT_ACTIVE_DAYS_AFTER days" +"%Y-%m-%dT%H:%M:%SZ"`
    else
        AFTER=`date -d "$START - 1 day" +"%Y-%m-%dT%H:%M:%SZ"`
    fi
fi

if [ "$BEFORE" = "" ]; then
    if [ "$AUDIT_ACTIVE_DAYS_BEFORE" ]; then
        BEFORE=`date -d "$START - $AUDIT_ACTIVE_DAYS_BEFORE days" +"%Y-%m-%dT%H:%M:%SZ"`
    else
        BEFORE="$START"
    fi
fi

if [ "$DEBUG" = "true" ]; then
    echo "AFTER:  $AFTER"
    echo "BEFORE: $BEFORE"
    echo "START:  $START"
fi

if [[ "$AFTER" == "$START" || "$AFTER" > "$START" ]]; then
    errorExit "Specified after timestamp $AFTER must be in the past"
fi

if [ "$BEFORE" != "$START" ]; then
    if [[ "$AFTER" == "$BEFORE" || "$AFTER" > "$BEFORE" ]]; then
        errorExit "Specified after timestamp $AFTER must be earlier than the specified before timestamp $BEFORE"
    fi
fi

PROJECTS=`DEBUG=false $ROOT/utils/admin/list-projects`

if [ $? -ne 0 ]; then
    errorExit "Failed to retrieve listing of projects"
fi

for PROJECT in $PROJECTS; do

    if [ "$DEBUG" = "true" ]; then
        echo "$CURL_GET $ADMIN_CREDENTIALS -H \"$IDA_MODE_HEADER\" \"${IDA_API}/dataChanges/${PROJECT}/last\" | jq -r '.timestamp'"
    fi

    LAST_CHANGE=`$CURL_GET $ADMIN_CREDENTIALS -H "$IDA_MODE_HEADER" "${IDA_API}/dataChanges/${PROJECT}/last" | jq -r '.timestamp'`

    if [ $? -ne 0 ]; then
        errorExit "Failed to retrieve last data change for project $PROJECT"
    fi

    if [ "$DEBUG" = "true" ]; then
        echo "LAST_CHANGE: $LAST_CHANGE"
    fi

    if [[ "$LAST_CHANGE" > "$AFTER" && "$LAST_CHANGE" < "$BEFORE" ]]; then
        echo "${PROJECT}"
    fi

done

addToLog "DONE"
