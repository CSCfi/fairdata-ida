#!/bin/bash
# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2020 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------
# This script audits the specified project in the IDA service, limited to nodes
# created or modified before the start of the auditing process.
#
# The script directly queries the database tables and filesystems, and it is
# not necessary for Apache/Nextcloud/IDA to be running in order to execute this
# script; only the database needs to be running.
# --------------------------------------------------------------------------------

SCRIPT=`basename "$(realpath $0)"`

USAGE="
Usage: $SCRIPT project [ ( --staging | --frozen ) ] [ --check-timestamps ] [ ( --report | --report-errors ) [ email ] ]
       $SCRIPT -h

       project             the project to be audited
       --staging           auditing will be limited to files in the staging area
       --frozen            auditing will be limited to files in the frozen area
       --check-timestamps  comparisons will be made between disk timestamps and database values
       --report            auditing results will be emailed
       --report-errors     auditing results will be emailed, but only if errors are detected
       email               the email address where audit reports should be sent (defaults to dev team)
"

# --------------------------------------------------------------------------------

INIT_FILE=`dirname "$(realpath $0)"`/lib/init_audit_script.sh

if [ -e $INIT_FILE ]
then
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting."
    exit 1
fi

#DEBUG="true" # TEMP HACK

#--------------------------------------------------------------------------------

REPORT_REQ=""
RECIPIENTS=""
FILE_AREA=""
CHECK_TIMESTAMPS=""

shift # got PROJECT from first argument via init_audit_script.sh

while [ "$1" ]; do

    case "$1" in
        "--staging" | "--frozen")
            if [ "$FILE_AREA" ]; then
                echo "Only one of --staging or --frozen is allowed"
                exit 1
            fi
            FILE_AREA="$1"
            ;;
        "--check-timestamps")
            CHECK_TIMESTAMPS="$1"
            ;;
        "--report" | "--report-errors")
            if [ "$REPORT_REQ" ]; then
                echo "Only one of --report or --report-errors is allowed"
                exit 1
            fi
            REPORT_REQ="$1"
            ;;
        *)
            if [ "$REPORT_REQ" != "" ] && [ "$RECIPIENTS" = "" ]; then
                RECIPIENTS="$1"
            else
                echo "Invalid argument: $1"
                exit 1
            fi
            ;;
    esac

    shift

done

if [ "$REPORT_REQ" != "" ]; then
    if [ "$RECIPIENTS" = "" ]; then
        RECIPIENTS="$EMAIL_RECIPIENTS"
    fi
fi

AUDIT_ARGS="${FILE_AREA} ${CHECK_TIMESTAMPS}"

#--------------------------------------------------------------------------------

if [ "$DEBUG" = "true" ]; then
    echo "ROOT:       $ROOT"
    echo "PROJECT:    $PROJECT"
    echo "START:      $START"
    echo "AUDIT_ARGS: $AUDIT_ARGS"
    echo "REPORT_REQ: $REPORT_REQ"
    echo "RECIPIENTS: $RECIPIENTS"
fi

#--------------------------------------------------------------------------------

if [ ! -d "$PROJECT_STORAGE_OC_DATA_ROOT" ]; then
    errorExit "The specified project ${PROJECT} does not exist"
fi

LOG_ROOT=`dirname "$(realpath $LOG)"`
YEAR=`date -u +"%Y"`
MONTH=`date -u +"%m"`
REPORT_ROOT="${LOG_ROOT}/audits"
REPORT_BASE="${LOG_ROOT}/audits/${YEAR}/${MONTH}/${START}_${PROJECT}"

mkdir -p $REPORT_ROOT/$YEAR/$MONTH 2>/dev/null

source $ROOT/venv/bin/activate

python -u $ROOT/utils/admin/lib/audit-project.py $ROOT $PROJECT $START $AUDIT_ARGS > $$.out

if [ $? -ne 0 ]; then
    rm $$.out 2>/dev/null
    errorExit "Auditing of project $PROJECT failed"
fi

cat $$.out | jq --indent 4 > $REPORT_BASE

if [ $? -ne 0 ]; then
    if [ -f $REPORT_BASE ]; then
        if [ -s $REPORT_BASE ]; then
            mv $$.out $REPORT_BASE.err
        else
            mv $REPORT_BASE $REPORT_BASE.err
        fi
    fi
    rm $$.out 2>/dev/null
    errorExit "Formatting of auditing report for project $PROJECT failed"
fi

rm $$.out 2>/dev/null

SEND_REPORT="false"

if [ "$REPORT_REQ" = "--report" ]; then
    SEND_REPORT="true"
fi

OK=`head -15 $REPORT_BASE | grep "\"invalidNodeCount\" *: *0\b"`

if [ "$OK" ]; then

    REPORT="$REPORT_BASE.ok"
    mv $REPORT_BASE $REPORT

else

    if [ "$REPORT_REQ" = "--report-errors" ]; then
        SEND_REPORT="true"
    fi

    REPORT="$REPORT_BASE.err"
    mv $REPORT_BASE $REPORT

    $ROOT/utils/admin/analyze-audit-errors "$REPORT"

    if [ $? -ne 0 ]; then
        errorExit "Analysis of audit error report $REPORT failed"
    fi
fi

# Send email if specified

if [ "$DEBUG" = "true" ]; then
    echo "--- $SCRIPT ---"
    echo "REPORT:        $REPORT"
    echo "SEND_REPORT:   $SEND_REPORT"
    echo "RECIPIENTS:    $RECIPIENTS"
fi

if [ "$SEND_REPORT" = "true" ] && [ "$RECIPIENTS" != "" ]; then

    HOSTNAME=`hostname`

    SUBJECT="Auditing report for project $PROJECT"

    if [ "$IDA_ENVIRONMENT" != "PRODUCTION" ]; then
        SUBJECT="${IDA_ENVIRONMENT} (${HOSTNAME}) ${SUBJECT}"
    fi

    if [ "$OK" ]; then
        SUBJECT="${SUBJECT} - OK"
        MESSAGE_FILE="$REPORT"
    else
        SUBJECT="${SUBJECT} - Errors Reported"
        MESSAGE_FILE="$REPORT.analysis.summary"
    fi

    cat "$MESSAGE_FILE" | mail -s "$SUBJECT" -r $EMAIL_SENDER $RECIPIENTS 
fi

echo "Audit results saved to file $REPORT" 

addToLog "DONE"
