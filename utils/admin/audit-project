#!/bin/bash
# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2020 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------
# This script audits the specified project in the IDA service, limited to nodes
# created or modified before the start of the auditing process.
#
# The script directly queries the database tables and filesystems, and it is
# not necessary for Apache/Nextcloud/IDA to be running in order to execute this
# script; only the database needs to be running.
# --------------------------------------------------------------------------------

SCRIPT=`basename "$(realpath $0)"`

USAGE="
Usage: $SCRIPT project [ OPTIONS ]
       $SCRIPT -h

       OPTIONS:

       --full
       --changed-since date[time] 
       ( --staging | --frozen ) 
       --timestamps 
       --checksums 
       ( --report | --report-errors ) [ email ] 

       WHERE:

       project          the project to be audited
       --full           full audit, overrides any options --changed-since --staging --frozen; implies --timestamps --checksums
       --changed-since  auditing will be limited to files uploaded or frozen since the specified date[time]
       date[time]       an ISO date or datetime string /YYYY-MM-DD(Thh:mm:ssZ])?/
       --staging        auditing will be limited to files in the staging area
       --frozen         auditing will be limited to files in the frozen area
       --timestamps     comparisons will be made between disk timestamps and database values
       --checksums      comparisons will be made between new filesystem checksum and recorded cache, IDA, and Metax checksums
       --report         auditing results will be emailed
       --report-errors  auditing results will be emailed, but only if errors are detected
       email            the email address where audit reports should be sent (defaults to configured recipient list)

If --changed-since is specified, files and folders which are outside the scope of files uploaded or frozen
since the specified datetime, including changes only occurring in the filesystem and not known to Nextcloud,
will not not be reported; only changes which can be identified by timestamp updates in the Nextcloud or Metax
databases which are later than the specified since timestamp will be audited. To detect filesystem only changes
you must perform an unrestricted audit without specifying any --changed-since parameter.
"

# --------------------------------------------------------------------------------

INIT_FILE=`dirname "$(realpath $0)"`/lib/init_audit_script.sh

if [ -e $INIT_FILE ]
then
    sleep 1 # ensure a unique START timestamp for each audit
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting."
    exit 1
fi

#--------------------------------------------------------------------------------

REPORT_REQ=""
RECIPIENTS=""
FILE_AREA=""
SINCE=""
FULL_AUDIT=""
AUDIT_TIMESTAMPS=""
AUDIT_CHECKSUMS=""

shift # got PROJECT from first argument via init_audit_script.sh

while [ "$1" ]; do

    case "$1" in
        "--full")
            if [ "$SINCE" ]; then
                echo "Only one of --full or --changed-since is allowed"
                exit 1
            fi
            if [ "$FILE_AREA" ]; then
                echo "Only one of --full or $FILE_AREA is allowed"
                exit 1
            fi
            FULL_AUDIT="$1"
            AUDIT_TIMESTAMPS=""
            AUDIT_CHECKSUMS=""
            SINCE=""
            FILE_AREA=""
            ;;
        "--changed-since")
            if [ "$FULL_AUDIT" ]; then
                echo "Only one of --full or --changed-since is allowed"
                exit 1
            fi
            if [ "$2" = "" ]; then
                echo "Missing date[time] argument"
                exit 1
            fi
            if [[ "$2" =~ ^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}T[[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}Z$ ]]; then
                SINCE="$2"
            elif [[ "$2" =~ ^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}$ ]]; then
                SINCE="$2""T00:00:00Z"
            else
                echo "Invalid date[time]: $2"
                exit 1
            fi
            shift
            ;;
        "--staging" | "--frozen")
            if [ "$FULL_AUDIT" ]; then
                echo "Only one of --full or $1 is allowed"
                exit 1
            fi
            if [ "$FILE_AREA" ]; then
                echo "Only one of --staging or --frozen is allowed"
                exit 1
            fi
            FILE_AREA="$1"
            ;;
        "--timestamps")
            AUDIT_TIMESTAMPS="$1"
            ;;
        "--checksums")
            AUDIT_CHECKSUMS="$1"
            ;;
        "--report" | "--report-errors")
            if [ "$REPORT_REQ" ]; then
                echo "Only one of --report or --report-errors is allowed"
                exit 1
            fi
            REPORT_REQ="$1"
            ;;
        *)
            if [ "$REPORT_REQ" != "" ] && [ "$RECIPIENTS" = "" ]; then
                RECIPIENTS="$1"
            else
                echo "Invalid argument: $1"
                exit 1
            fi
            ;;
    esac

    shift

done

if [ "$REPORT_REQ" != "" ]; then
    if [ "$RECIPIENTS" = "" ]; then
        RECIPIENTS="$EMAIL_RECIPIENTS"
    fi
fi

# If date(time) not specified, use the unix epoch
if [ "$SINCE" = "" ]; then
    SINCE="1970-01-01T00:00:00Z"
fi

AUDIT_ARGS="${FULL_AUDIT} ${FILE_AREA} ${AUDIT_TIMESTAMPS} ${AUDIT_CHECKSUMS}"

#--------------------------------------------------------------------------------

if [ "$DEBUG" = "true" ]; then
    echo "ROOT:       $ROOT"
    echo "PROJECT:    $PROJECT"
    echo "START:      $START"
    echo "SINCE:      $SINCE"
    echo "AUDIT_ARGS: $AUDIT_ARGS"
    echo "REPORT_REQ: $REPORT_REQ"
    echo "RECIPIENTS: $RECIPIENTS"
fi

#--------------------------------------------------------------------------------

if [ ! -d "$PROJECT_STORAGE_OC_DATA_ROOT" ]; then
    errorExit "The specified project ${PROJECT} does not exist"
fi

LOG_ROOT=`dirname "$(realpath $LOG)"`
YEAR=`date -u +"%Y"`
MONTH=`date -u +"%m"`
REPORT_ROOT="${LOG_ROOT}/audits"
REPORT_BASE="${LOG_ROOT}/audits/${YEAR}/${MONTH}/${START}_${PROJECT}"

mkdir -p $REPORT_ROOT/$YEAR/$MONTH 2>/dev/null

#--------------------------------------------------------------------------------

OUTPUT="/var/tmp/$$.out"
SUMMARY="$OUTPUT.summary"

source $ROOT/venv/bin/activate

python -u $ROOT/utils/admin/lib/audit_project.py $ROOT $PROJECT $START $SINCE $AUDIT_ARGS > $OUTPUT

if [ $? -ne 0 ]; then
    rm $OUTPUT 2>/dev/null
    errorExit "Auditing of project $PROJECT failed"
fi

if [ $(stat -c %s "$OUTPUT") -eq 0 ]; then
    cat $OUTPUT > $REPORT_BASE
else
    cat $OUTPUT | jq --indent 4 > $REPORT_BASE
fi

if [ $? -ne 0 ]; then
    if [ -f $REPORT_BASE ]; then
        if [ -s $REPORT_BASE ]; then
            mv $OUTPUT $REPORT_BASE.err
        else
            mv $REPORT_BASE $REPORT_BASE.err
        fi
    fi
    rm $OUTPUT 2>/dev/null
    errorExit "Formatting of auditing report for project $PROJECT failed"
fi

SEND_REPORT="false"

if [ "$REPORT_REQ" = "--report" ]; then
    SEND_REPORT="true"
fi

OK=`head -15 $REPORT_BASE | grep "\"invalidNodeCount\" *: *0\b"`

if [ "$OK" != "" ]; then
   OK="true"
else
   OK="false"
fi

if [ "$OK" = "true" ]; then
    REPORT="$REPORT_BASE.OK.json"
else
    REPORT="$REPORT_BASE.ERR.json"
    if [ "$REPORT_REQ" = "--report-errors" ]; then
        SEND_REPORT="true"
    fi
fi

mv $REPORT_BASE $REPORT

echo "Audit results saved to file $REPORT" 

if [ "$OK" = "true" ]; then
    jq 'del(.invalidNodes, .errors, .oldest, .newest)' --indent 4 < $REPORT > $SUMMARY
else
    jq 'del(.invalidNodes) | walk(if type == "object" then with_entries(select(.key != "nodes")) else . end)' --indent 4 < $REPORT > $SUMMARY
fi

if [ $? -ne 0 ]; then
    errorExit "Generation of auditing report summary $REPORT failed"
fi

# Send email if specified

if [ "$DEBUG" = "true" ]; then
    echo "--- $SCRIPT ---"
    echo "REPORT:        $REPORT"
    echo "SEND_REPORT:   $SEND_REPORT"
    echo "RECIPIENTS:    $RECIPIENTS"
fi

if [ "$SEND_REPORT" = "true" ] && [ "$RECIPIENTS" != "" ]; then

    HOSTNAME=`hostname`

    SUBJECT="Auditing report for project $PROJECT"

    if [ "$IDA_ENVIRONMENT" != "PRODUCTION" ]; then
        SUBJECT="${IDA_ENVIRONMENT} (${HOSTNAME}) ${SUBJECT}"
    fi

    if [ "$OK" = "true" ]; then
        SUBJECT="${SUBJECT} - OK"
    else
        SUBJECT="${SUBJECT} - Errors Reported"
    fi

    cat "$SUMMARY" | mail -s "$SUBJECT" -r $EMAIL_SENDER $RECIPIENTS 
fi

cat $SUMMARY

rm $OUTPUT 2>/dev/null
rm $SUMMARY 2>/dev/null

addToLog "DONE"
