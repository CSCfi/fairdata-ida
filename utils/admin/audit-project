#!/bin/bash
# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2020 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------
#
# This script audits the specified project in the IDA service, limited to nodes
# created or modified before the start of the auditing process.
#
# The script directly queries the database tables and filesystems, and it is
# not necessary for Apache/Nextcloud/IDA to be running in order to execute this
# script; only the database needs to be running.
#
# --------------------------------------------------------------------------------

SCRIPT=`basename "$(realpath $0)"`

USAGE="
Usage: $SCRIPT project [ ( --report | --report-errors ) [ email ] ] [ --ignore-timestamps ]
       $SCRIPT -h

       project    the project to be audited
       email      the email address where audit reports should be sent (defaults to dev team)

If --report is specified, the auditing results will be emailed, even if successful.

If --report-errors is specified, the auditing results will be emailed, but only if errors are detected.

Emails will be sent to the default distribution list unless an alternative email address is specified.

If --ignore-timestamps is specified, no comparison will be made between disk timestamps and database values.
"

# --------------------------------------------------------------------------------

INIT_FILE=`dirname "$(realpath $0)"`/lib/init_audit_script.sh

if [ -e $INIT_FILE ]
then
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting." >&2
    exit 1
fi

#--------------------------------------------------------------------------------

REPORT_REQ=""
RECIPIENTS=""
IGNORE_TIMESTAMPS=""

if [ "$2" = "--report" ] || [ "$2" = "--report-errors" ]; then

    REPORT_REQ="$2"

    if [ "$3" = "--ignore-timestamps" ]; then
        IGNORE_TIMESTAMPS="$3"
        RECIPIENTS="$EMAIL_RECIPIENTS"
    else
        RECIPIENTS="$3"
        IGNORE_TIMESTAMPS="$4"
    fi
fi

if [ "$2" = "--ignore-timestamps" ]; then
    IGNORE_TIMESTAMPS="$2"
fi

if [ "$REPORT_REQ" != "" ]; then
    if [ "$RECIPIENTS" = "" ]; then
        RECIPIENTS="$EMAIL_RECIPIENTS"
    fi
    if [ "$RECIPIENTS" = "" ]; then
        RECIPIENTS="$EMAIL_RECIPIENTS"
    fi
fi

#DEBUG="true" # TEMP HACK

if [ "$DEBUG" = "true" ]; then
    echo "PROJECT:    $PROJECT" >&2
    echo "REPORT_REQ: $REPORT_REQ $RECIPIENTS" >&2
    echo "IGNORE_TS:  $IGNORE_TIMESTAMPS" >&2
fi

#--------------------------------------------------------------------------------

PROJECT_STORAGE_OC_DATA_ROOT="${STORAGE_OC_DATA_ROOT}/${PROJECT_USER_PREFIX}${PROJECT}/files"
if [ ! -d "$PROJECT_STORAGE_OC_DATA_ROOT" ]; then
    errorExit "The specified project ${PROJECT} does not exist"
fi

LOG_ROOT=`dirname "$(realpath $LOG)"`
YEAR=`date -u +"%Y"`
MONTH=`date -u +"%m"`
REPORT_ROOT="${LOG_ROOT}/audits"
REPORT_BASE="${LOG_ROOT}/audits/${YEAR}/${MONTH}/${START}_${PROJECT}"

mkdir -p $REPORT_ROOT/$YEAR/$MONTH 2>/dev/null

source $ROOT/venv/bin/activate

python -u $ROOT/utils/admin/lib/audit-project.py $ROOT $PROJECT $START $IGNORE_TIMESTAMPS | python -m json.tool > $REPORT_BASE

if [ $? -ne 0 ]; then
    if [ -f $REPORT_BASE ]; then
        if [ -s $REPORT_BASE ]; then
            rm $REPORT_BASE
        else
            mv $REPORT_BASE $REPORT_BASE.err
        fi
    fi
    errorExit "Auditing of project $PROJECT failed"
fi

REPORT="$REPORT_BASE.ok"

SEND_REPORT="false"

if [ "$REPORT_REQ" = "--report" ]; then
    SEND_REPORT="true"
fi

OK=`head $REPORT_BASE | grep "\"invalidNodeCount\" *: *0\b"`

if [ "$OK" = "" ]; then
    REPORT="$REPORT_BASE.err"
    if [ "$REPORT_REQ" = "--report-errors" ]; then
        SEND_REPORT="true"
    fi
fi

mv $REPORT_BASE $REPORT

if [ "$DEBUG" = "true" ]; then
    echo "--- $SCRIPT ---" >&2
    echo "REPORT:        $REPORT" >&2
    echo "SEND_REPORT:   $SEND_REPORT" >&2
fi

if [ "$SEND_REPORT" = "true" ]; then
    if [ "$RECIPIENTS" != "" ]; then
        mail -s "$REPORT" -r $EMAIL_SENDER $RECIPIENTS < $REPORT
    fi
fi

echo "Audit results saved to file $REPORT" 

addToLog "DONE"
