#!/bin/bash
# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2023 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------
# This script will query the CSC Data Deletion Process microservice to obtain a
# list of all projects which are closed and have either a grace or deletedata
# substate, and then will suspend each project which is not yet suspended and
# will delete each project which has a deletedata substate.
#
# Internal projects and projects which do not exist in IDA are skipped.
#
# It is expected that this script will be executed nightly.
# --------------------------------------------------------------------------------

SCRIPT=`basename $0`
USAGE="Usage: $SCRIPT"
PROJECT="null"

INIT_FILE=`dirname $0`/lib/init_admin_script.sh

if [ -e $INIT_FILE ]
then
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting." >&2
    exit 1
fi

#--------------------------------------------------------------------------------

echo "Retrieving list of projects with a CSC data deletion process substate 'grace'..."

GRACE_PROJECTS=`$ROOT/utils/admin/list-grace-projects 2>$ERR`

if [ -s $ERR ]; then
    MSG=`cat $ERR | tr "\n" " " `
    addToLog "$MSG"
    errorExit "Failed to retrieve grace projects"
fi

echo "Retrieving list of projects with a CSC data deletion process substate 'deletedata'..."

DELETEDATA_PROJECTS=`$ROOT/utils/admin/list-deletedata-projects 2>$ERR`

if [ -s $ERR ]; then
    MSG=`cat $ERR | tr "\n" " " `
    addToLog "$MSG"
    errorExit "Failed to retrieve deletedata projects"
fi

echo "Retrieving list of projects which are already suspended..."

SUSPENDED_PROJECTS=`$ROOT/utils/admin/list-suspended-projects 2>$ERR`

if [ -s $ERR ]; then
    MSG=`cat $ERR | tr "\n" " " `
    addToLog "$MSG"
    errorExit "Failed to retrieve suspended projects"
fi

echo "Retrieving list of projects which are internal..."

INTERNAL_PROJECTS=`$ROOT/utils/admin/list-internal-projects 2>$ERR`

if [ -s $ERR ]; then
    MSG=`cat $ERR | tr "\n" " " `
    addToLog "$MSG"
    errorExit "Failed to retrieve internal projects"
fi

for PROJECT in $GRACE_PROJECTS; do

    IS_INTERNAL=`echo "$INTERNAL_PROJECTS" | grep "$PROJECT"`

    if [ "$IS_INTERNAL" ]; then
        echo "Project ${PROJECT} is internal (skipped)"
        continue
    fi

    if [ ! -d "${STORAGE_OC_DATA_ROOT}/${PROJECT_USER_PREFIX}${PROJECT}/files" ]; then
        echo "Project ${PROJECT} does not exist in IDA (ignored)"
        continue
    fi

    IS_SUSPENDED=`echo "$SUSPENDED_PROJECTS" | grep "$PROJECT"`

    if [ "$IS_SUSPENDED" ]; then
        echo "Project ${PROJECT} is already suspended"
        continue
    fi

    # Only actually suspend the project if in production, otherwise just inform about appropriate actions but do nothing

    if [ "$IDA_ENVIRONMENT" != "PRODUCTION" ]; then
        echo "Project ${PROJECT} should be suspended"
        continue
    fi

    $ROOT/utils/admin/suspend-project $PROJECT --delete 2>$ERR

    if [ -s $ERR ]; then
        MSG=`cat $ERR | tr "\n" " " `
        addToLog "$MSG"
        errorExit "Failed to suspend project ${PROJECT}"
    fi

    echoAndLog "Project ${PROJECT} has been suspended"

done

for PROJECT in $DELETEDATA_PROJECTS; do

    IS_INTERNAL=`echo "$INTERNAL_PROJECTS" | grep "$PROJECT"`

    if [ "$IS_INTERNAL" ]; then
        echo "Project ${PROJECT} is internal (skipped)"
        continue
    fi

    if [ ! -d "${STORAGE_OC_DATA_ROOT}/${PROJECT_USER_PREFIX}${PROJECT}/files" ]; then
        echo "Project ${PROJECT} does not exist in IDA (ignored)" >&2
        continue
    fi

    if [ "$IDA_ENVIRONMENT" != "PRODUCTION" ]; then
        echo "Project ${PROJECT} should be deleted"
        continue
    fi

    $ROOT/utils/admin/delete-project $PROJECT 2>$ERR

    if [ -s $ERR ]; then
        MSG=`cat $ERR | tr "\n" " " `
        addToLog "$MSG"
        errorExit "Failed to delete project ${PROJECT}"
    fi

    echoAndLog "Project ${PROJECT} has been deleted"

done

#--------------------------------------------------------------------------------

addToLog "DONE"
