#!/bin/bash
# --------------------------------------------------------------------------------
# This file is part of the Fairdata IDA research data storage service.
#
# Copyright (C) 2019 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://www.fairdata.fi/en/ida
# --------------------------------------------------------------------------------
# Initialize script with common definitions

SCRIPT=$(basename $0)
USAGE="Usage: $SCRIPT project [ --json ]"

INIT_FILE=$(dirname $0)/lib/init_admin_script.sh

if [ -e $INIT_FILE ]
then
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting." >&2
    exit 1
fi

#--------------------------------------------------------------------------------

JSON=$(echo "$*" | grep -- "--json" || true)

if [ ! -d "${STORAGE_OC_DATA_ROOT}/${PROJECT_USER_PREFIX}${PROJECT}/files" ]; then
    errorExit "The project '${PROJECT}' does not exist"
fi

DATA=$($ROOT/utils/admin/fetch-project-stats $PROJECT)

if [ "$DATA" ]; then
    QUOTA=$(echo "$DATA" | jq -r '.quotaBytes')
    USED=$(echo "$DATA" | jq -r '.totalBytes')
    STAGED_VOLUME=$(echo "$DATA" | jq -r '.stagedBytes')
    FROZEN_VOLUME=$(echo "$DATA" | jq -r '.frozenBytes')
    TOTAL_FILES=$(echo "$DATA" | jq -r '.totalFiles')
    STAGED_FILES=$(echo "$DATA" | jq -r '.stagedFiles')
    FROZEN_FILES=$(echo "$DATA" | jq -r '.frozenFiles')
    CREATED_IN_IDA=$(echo "$DATA" | jq -r '.createdInIDA' | sed -e 's/T.*$//')
    LAST_DATA_CHANGE=$(echo "$DATA" | jq -r '.lastDataChange' | sed -e 's/T.*$//')
    STORAGE_VOLUME=$(echo "$DATA" | jq -r '.storageVolume')
else
    errorExit "Error: Failed to retrieve project stats"
fi

USERS=$($CURL_GET $ADMIN_CREDENTIALS -H "$IDA_MODE_HEADER" -H "OCS-APIRequest: true" "${GROUP_API}/${PROJECT}")

if [ "$USERS" ]; then
    USERS=$(echo "$USERS" | \
            grep "<element>" | \
            grep -v "<element>${PROJECT_USER_PREFIX}" | \
            sed -e 's/^.*<element>/    /' | \
            sed -e 's/<.*$//' |
            grep -v '^[[:space:]]*$')
else
    errorExit "Error: Failed to retrieve project users"
fi

ACTION_STATUS=$($CURL_GET $PROJECT_USER_CREDENTIALS -H "$IDA_MODE_HEADER" "$IDA_API/status")

if [ "$ACTION_STATUS" ]; then
    ACTION_STATUS=$(echo "$ACTION_STATUS" | jq --indent 4 | \
    grep -e '"failed"' -e '"pending"' -e '"suspended"' | sed -e 's/, *$//' -e 's/"//g' | sort -r)
else
    errorExit "Error: Failed to retrieve project action status"
fi

if [ "$JSON" ]; then
    USERS=$(format_token_list_as_json "$USERS" 8)
    ACTION_STATUS=$(format_field_list_as_json "$ACTION_STATUS" 8)
    echo "{"
    echo "    \"project\": \"${PROJECT}\","
    echo "    \"quota\": ${QUOTA},"
    echo "    \"used\": ${USED},"
    echo "    \"staged\": ${STAGED_VOLUME},"
    echo "    \"frozen\": ${FROZEN_VOLUME},"
    echo "    \"totalFiles\": ${TOTAL_FILES},"
    echo "    \"stagedFiles\": ${STAGED_FILES},"
    echo "    \"frozenFiles\": ${FROZEN_FILES},"
    echo "    \"created\": \"${CREATED_IN_IDA}\","
    echo "    \"lastDataChange\": \"${LAST_DATA_CHANGE}\","
    echo "    \"storageVolume\": \"${STORAGE_VOLUME}\","
    echo "    \"users\": ["
    printf "%s\n" "$USERS"
    echo "    ],"
    echo "    \"actionStatus\": {"
    printf "%s\n" "$ACTION_STATUS"
    echo "    }"
    echo "}"
else
    QUOTA=$(bytesToHR "0${QUOTA}")
    USED=$(bytesToHR "0${USED}")
    STAGED_VOLUME=$(bytesToHR "0${STAGED_VOLUME}")
    FROZEN_VOLUME=$(bytesToHR "0${FROZEN_VOLUME}")
    echo "Quota:"
    echo "    ${QUOTA}"
    echo "Used:"
    echo "    ${USED}"
    echo "Staged:"
    echo "    ${STAGED_VOLUME}"
    echo "Frozen:"
    echo "    ${FROZEN_VOLUME}"
    echo "Total files:"
    echo "    ${TOTAL_FILES}"
    echo "Staged files:"
    echo "    ${STAGED_FILES}"
    echo "Frozen files:"
    echo "    ${FROZEN_FILES}"
    echo "Created in IDA:"
    echo "    ${CREATED_IN_IDA}"
    echo "Last data change:"
    echo "    ${LAST_DATA_CHANGE}"
    echo "Storage volume:"
    echo "    ${STORAGE_VOLUME}"
    echo "Users: "
    if [ "$USERS" ]; then
        echo "$USERS"
    fi
    echo "Action status: "
    echo "$ACTION_STATUS"
fi

addToLog "DONE"
