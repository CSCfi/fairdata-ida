# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2023 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------
# This script loads a project audit error file (encoded in JSON) and for each
# checksum error will update the checksums in Nextcloud, IDA, and Metax as
# appropriate, ensuring they match the checksum generated by the auditing
# process which produced the report.
# --------------------------------------------------------------------------------

import os
import sys
import json
import logging
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from utils import *

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def main():

    try:

        # Arguments: ROOT ERROR_FILE

        argc = len(sys.argv)

        if argc != 3:
            raise Exception('Invalid number of arguments')
    
        # Load service configuration, and add command arguments
        # and global values needed for auditing

        config = load_configuration("%s/config/config.sh" % sys.argv[1])
        constants = load_configuration("%s/lib/constants.sh" % sys.argv[1])

        if config.IDA_API.startswith("https://localhost/"):
            config.VERIFY_SSL = False
        else:
            config.VERIFY_SSL = True

        config.PROJECT_USER_PREFIX = constants.PROJECT_USER_PREFIX

        # Initialize logging using UTC timestamps

        if config.DEBUG:
            config.LOG_LEVEL = logging.DEBUG
        else:
            config.LOG_LEVEL = logging.INFO

        logging.basicConfig(
            filename=config.LOG,
            level=config.LOG_LEVEL,
            format=LOG_ENTRY_FORMAT,
            datefmt=TIMESTAMP_FORMAT)

        logging.Formatter.converter = time.gmtime

        config.HEADERS = { 'IDA-Mode': 'System' }

        # load report file data

        with open(sys.argv[2]) as f:
           data = json.load(f)

        config.PROJECT = data['project']
        config.CHECKSUMS_CHECKED = data['end']

        nodes = data.get('invalidNodes', {})

        logging.info("START %s %s" % (config.PROJECT, generate_timestamp()))

        for pathname, node in list(nodes.items()):

            if config.DEBUG:
                sys.stderr.write("NODE PATHNAME: %s\n" % pathname)

            checksum_errors = []

            for error in node.get('errors', []):
                if error.startswith('Node checksum '):
                    checksum_errors.append(error)

            if len(checksum_errors) > 0:

                checksum = None
                file_pid = None

                filesystem = node.get('filesystem')
                ida = node.get('ida')

                if filesystem:
                    checksum = filesystem.get('checksum')

                if ida:
                    file_pid = ida.get('pid')

                if checksum is None:
                    sys.stderr.write("Warning: no filesystem checksum found for pathname %s\n" % pathname)
                    continue

                if ida and file_pid is None:
                    sys.stderr.write("Warning: no file PID found for pathname %s\n" % pathname)
                    continue

                for error in checksum_errors:

                    if config.DEBUG:
                        sys.stderr.write("ERROR: %s\n" % error)

                    if error == 'Node checksum missing for IDA':
                        update_checksum_in_ida(config, pathname, file_pid, checksum)

                    elif error == 'Node checksum missing for Metax':
                        update_checksum_in_metax(config, pathname, file_pid, checksum)

                    elif error == 'Node checksum different for filesystem and Nextcloud':
                        update_checksum_in_nextcloud(config, pathname, checksum)

                    elif error == 'Node checksum different for filesystem and IDA':
                        update_checksum_in_ida(config, pathname, file_pid, checksum)

                    elif error == 'Node checksum different for filesystem and Metax':
                        update_checksum_in_metax(config, pathname, file_pid, checksum)

                    elif error == 'Node checksum different for Nextcloud and IDA':
                        update_checksum_in_nextcloud(config, pathname, checksum)
                        update_checksum_in_ida(config, pathname, file_pid, checksum)

                    elif error == 'Node checksum different for Nextcloud and Metax':
                        update_checksum_in_nextcloud(config, pathname, checksum)
                        update_checksum_in_metax(config, pathname, file_pid, checksum)

                    elif error == 'Node checksum different for IDA and Metax':
                        update_checksum_in_ida(config, pathname, file_pid, checksum)
                        update_checksum_in_metax(config, pathname, file_pid, checksum)

        logging.info("DONE")

    except Exception as error:
        try:
            logging.error(str(error))
        except Exception as logerror:
            sys.stderr.write("ERROR: %s\n" % str(logerror))
        sys.stderr.write("ERROR: %s\n" % str(error))
        sys.exit(1)


def update_checksum_in_nextcloud(config, pathname, checksum):

    url = "%s/repairCacheChecksum" % config.IDA_API
    data = { "pathname": pathname, "checksum": checksum }
    auth = ("%s%s" % (config.PROJECT_USER_PREFIX, config.PROJECT), config.PROJECT_USER_PASS)

    response = requests.post(url, auth=auth, headers=config.HEADERS, json=data, verify=config.VERIFY_SSL)

    if response.status_code < 200 or response.status_code > 299:
        sys.stderr.write("Warning: Failed to update checksum in Nextcloud to %s for pathname %s: %d %s\n" % (
            checksum,
            get_project_pathname(config.PROJECT, pathname),
            response.status_code,
            response.content.decode(sys.stdout.encoding)
        ))
    else:
        msg = "Updated checksum in Nextcloud to %s for %s" % (checksum, get_project_pathname(config.PROJECT, pathname))
        logging.info(msg)
        sys.stderr.write("%s\n" % msg)


def update_checksum_in_ida(config, pathname, file_pid, checksum):

    url = "%s/files/%s" % (config.IDA_API, file_pid)
    data = { 'checksum': checksum }
    auth = ("%s%s" % (config.PROJECT_USER_PREFIX, config.PROJECT), config.PROJECT_USER_PASS)

    response = requests.post(url, auth=auth, headers=config.HEADERS, json=data, verify=config.VERIFY_SSL)

    if response.status_code < 200 or response.status_code > 299:
        sys.stderr.write("Warning: Failed to update checksum in IDA to %s for pathname %s: %d %s\n" % (
            checksum,
            get_project_pathname(config.PROJECT, pathname),
            response.status_code,
            response.content.decode(sys.stdout.encoding)
        ))
    else:
        msg = "Updated checksum in IDA to %s for %s" % (checksum, get_project_pathname(config.PROJECT, pathname))
        logging.info(msg)
        sys.stderr.write("%s\n" % msg)


def update_checksum_in_metax(config, pathname, file_pid, checksum):

    if config.METAX_API_VERSION >= 3:
        url = "%s/files/patch-many" % config.METAX_API
        data = [{ "storage_service": "ida", "storage_identifier": file_pid, "checksum": "sha256:%s" % checksum }]
        headers = { "Authorization": "Token %s" % config.METAX_PASS }
        response = requests.post(url, headers=headers, json=data)
    else:
        url = "%s/files/%s" % (config.METAX_API, file_pid)
        data = { "checksum": { "algorithm": "SHA-256", "value": checksum, "checked": config.CHECKSUMS_CHECKED } }
        auth = ( config.METAX_USER, config.METAX_PASS )
        response = requests.patch(url, auth=auth, json=data)

    if response.status_code < 200 or response.status_code > 299:
        sys.stderr.write("Warning: Failed to update checksum in Metax to %s for %s: %d %s\n" % (
            checksum,
            get_project_pathname(config.PROJECT, pathname),
            response.status_code,
            response.content.decode(sys.stdout.encoding)
       ))
    else:
        msg = "Updated checksum in Metax to %s for %s" % (checksum, get_project_pathname(config.PROJECT, pathname))
        logging.info(msg)
        sys.stderr.write("%s\n" % msg)


if __name__ == "__main__":
    main()
