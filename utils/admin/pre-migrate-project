#!/bin/bash
# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2020 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------
#
# This script pre-migrates the specified project from its current storage volume
# to the specified new storage volume. It is intended for use prior to executing
# the migrate-project script, in order to shorten the time required to migrate
# a project by pre-syncing as much of the project data as possible in advance.
# 
# The pre-migration process can be executed for any project at any time, and as
# often as desired, with no impact to the current project users (other than the
# additional system load imposed).
# 
# If any of the following conditions are true, pre-migration will NOT be initiated
# and the script will exit with an error:
# - the project already resides on the specified target volume
# - the target volume has insufficient space for the project's full quota
#
# The volume must be specified as the complete pathname from root ending with the
# 'ida' folder name, e.g. '/mnt/storage_vol03/ida'.
#
# The pre-migrated project data PSO root folder will be named with the suffix '_pre'.
# During actual migration, if such a named folder exists, it will be renamed by
# removing the suffix '_pre' prior to syncing the existing project folder data.
# 
# The pre-migration process will be logged in the subdirectory 'migrations' located in
# the main IDA logging directory. E.g. /mnt/storage_vol01/log/migrations and will have a
# timestamped filename with the format 'YYYY-MM-DDThh:mm:ssZ_${PROJECT}_pre.log'.
#
# --------------------------------------------------------------------------------

USAGE="
Usage: $SCRIPT project volume
       $SCRIPT -h

       project  the project to be audited
       volume   the target volume pathname to which the project data is to be pre-migrated
"

# --------------------------------------------------------------------------------
# Initialize script with common definitions

INIT_FILE=`dirname "$(realpath $0)"`/lib/init_admin_script.sh

if [ -e $INIT_FILE ]
then
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting." >&2
    exit 1
fi

VOLUME="$2"

if [ "$VOLUME" = "" ]; then
    echo "$USAGE" >&2
    exit 1
fi

#--------------------------------------------------------------------------------
# Verify project exists

PROJECT_STORAGE_OC_DATA_ROOT="$(realpath ${STORAGE_OC_DATA_ROOT}/${PROJECT_USER_PREFIX}${PROJECT})"

if [ ! -d "$PROJECT_STORAGE_OC_DATA_ROOT" ]; then
    errorExit "The specified project ${PROJECT} does not exist"
fi

#--------------------------------------------------------------------------------
# Special variants of logging functions, to write to migration log rather than
# main log.

function addToLogM {
    MSG=`echo "$@" | tr '\n' ' '`
    echo "$MSG" 2>/dev/null >>"$MIGRATION_LOG"
}

function echoAndLogM {
    MSG=`echo "$@" | tr '\n' ' '`
    echo "$MSG"
    echo "$MSG" 2>/dev/null >>"$MIGRATION_LOG"
}

function errorExitM {
    MSG=`echo "$@" | tr '\n' ' '`
    echoAndLogM "$MSG"
    addToLog "$MSG"
    errorExit "Migration of project $PROJECT failed. See $MIGRATION_LOG for details."
}

#--------------------------------------------------------------------------------
# Initialize loging and audit reporting

START="$TIMESTAMP"

LOG_ROOT=`dirname "$(realpath $LOG)"`
LOG_BASE="${LOG_ROOT}/migrations/${START}_${PROJECT}"
MIGRATION_LOG="${LOG_BASE}_pre.log"

mkdir -p "$LOG_ROOT/migrations" 2>/dev/null

echoAndLogM "START:         $START"
echoAndLogM "PROJECT:       $PROJECT"
echoAndLogM "VOLUME:        $VOLUME"
echoAndLogM "MIGRATION LOG: $MIGRATION_LOG"
echoAndLogM "DATA_ROOT:     $PROJECT_STORAGE_OC_DATA_ROOT"

#--------------------------------------------------------------------------------
# Verify target volume is valid 

OUT=`echo "$VOLUME" | grep '^/.*/ida$'`

if [ "$OUT" = "" ]; then
    errorExitM "Error: The specified volume does not have a valid pathname: $VOLUME"
fi

OUT=`cat "$ROOT/config/config.sh" | grep "STORAGE_CANDIDATES=" | grep "[\(\" ]${VOLUME}[\)\" ]"`

if [ "$OUT" = "" ]; then
    errorExitM "Error: The specified volume is not a valid storage candidate volume: $VOLUME"
fi

#--------------------------------------------------------------------------------
# Verify project data does not already reside on target volume

NEW_PROJECT_STORAGE_OC_DATA_ROOT="${VOLUME}/${PROJECT_USER_PREFIX}${PROJECT}"

echoAndLogM "NEW_DATA_ROOT: ${NEW_PROJECT_STORAGE_OC_DATA_ROOT}_pre"

if [ "$NEW_PROJECT_STORAGE_OC_DATA_ROOT" = "$PROJECT_STORAGE_OC_DATA_ROOT" ]; then
    errorExitM "Error: The project $PROJECT data already resides in the specified volume: $VOLUME"
fi

#--------------------------------------------------------------------------------
# Verify target volume has sufficient space for entire project quota

QUOTA=`$ROOT/utils/admin/fetch-project-stats $PROJECT \
       | grep "quotaBytes" \
       | sed -e 's/^[^0-9]*\([0-9][0-9]*\)[^0-9]*$/\1/'`

if [ "$QUOTA" = "" ]; then
    errorExitM "Error: Failed to retrieve project $PROJECT quota!"
fi

echoAndLogM "QUOTA:         $QUOTA"

AVAILABLE=`df -B1 --output=avail "$VOLUME" | tail -1`

if [ "$AVAILABLE" = "" ]; then
    errorExitM "Error: Failed to retrieve available space for target volume!"
fi

echoAndLogM "AVAILABLE:     $AVAILABLE"

if [ $AVAILABLE -lt $QUOTA ]; then
    errorExitM "Error: Insufficient space on target volume: Available: $AVAILABLE, Project $PROJECT quota: $QUOTA"
fi

#--------------------------------------------------------------------------------
# Execute rsync of project data from current volume to target volume, with
# archival mirroring. Exit if any errors are reported.

echoAndLogM "Syncing project data..."

# Perform (final) mirroring of project data to new project folder on target volume
rsync --archive --force --delete --itemize-changes --info=name2,stats \
    "$PROJECT_STORAGE_OC_DATA_ROOT/" "${NEW_PROJECT_STORAGE_OC_DATA_ROOT}_pre" \
    2>"$TMPDIR/$SCRIPT.$$.err" | tee -a "$MIGRATION_LOG"

if [ "$?" -ne 0 ]; then
    cat "$TMPDIR/$SCRIPT.$$.err" >> "$MIGRATION_LOG"
    errorExitM "Error: Failed to sync project $PROJECT data!"
fi

rm -f "$TMPDIR/$SCRIPT.$$.err" 2>/dev/null

#--------------------------------------------------------------------------------

END=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
echoAndLogM "Pre-migration of project $PROJECT to volume $VOLUME successful."
addToLogM "END:           $END"

addToLog "DONE"
