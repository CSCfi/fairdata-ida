#!/bin/bash
# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2019 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------
# Initialize script with common definitions

INIT_FILE=`dirname $0`/lib/init_admin_script.sh

if [ -e $INIT_FILE ]
then
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting." >&2
    exit 1
fi

for NEEDS_PROG in jq
do
    PROG_LOCATION=`/usr/bin/which $NEEDS_PROG 2>/dev/null`
    if [ ! -e "$PROG_LOCATION" ]; then
        errorExit "Can't find $NEEDS_PROG in your \$PATH. Aborting."
    fi
done

#--------------------------------------------------------------------------------
echo "Verifying project ${PROJECT} exists..."

if [ ! -d $PROJECT_STORAGE_OC_DATA_ROOT ]; then
    errorExit "The specified project ${PROJECT} does not exist"
fi

#--------------------------------------------------------------------------------

if [ "$2" != "--force" ]; then

    echo "Verifying project ${PROJECT} has CSC Data Deletion Process state 'deletedata' and is active for IDA..."

    OUT=`curl --fail -k -s -S "$CSC_DATA_DELETION_MICROSERVICE/projects?projects=$PROJECT" 2>$ERR`

    if [ -s $ERR ]; then
        MSG=`echo "$ERR" | tr "\n" " " `
        addToLog "$MSG"
        errorExit "Failed to retrieve details of project $PROJECT from microservice. Aborting."
    fi

    PROJECT_STATE=`echo "$OUT" | jq '.[0].state' --raw-output 2>/dev/null`

    if [ "$PROJECT_STATE" != "deletedata" ]
    then
        errorExit "Project $PROJECT does not have a data deletion process state of 'deletedata'. Aborting."
    fi

    PROJECT_IDA=`echo "$OUT" | jq '.[0].services[] | select(. == "IDA")' --raw-output 2>/dev/null`

    if [ "$PROJECT_IDA" != "IDA" ]
    then
        errorExit "Project $PROJECT is not active in the IDA service. Aborting."
    fi

    echo "Verifying project ${PROJECT} is suspended..."
    
    SUSPENDED=`$CURL_GET $ADMIN_CREDENTIALS "$IDA_API_ROOT_URL/actions?status=suspend" 2>$ERR | \
               tr "\n" " " | tr "{" "\n" | grep "\"action\": *\"suspend*\"" | grep "\"project\": *\"$PROJECT\"" | \
               sed -e 's/^.*"initiated": *"//' | sed -e 's/".*$//' | sort -u | tail -1`

    if [ -s $ERR ]; then
        MSG=`echo "$ERR" | tr "\n" " " `
        addToLog "$MSG"
        errorExit "Failed to retrieve pending actions for project!"
    fi

    if [ "$SUSPENDED" = "" ]; then
        errorExit "The specified project ${PROJECT} is not suspended"
    fi

    echo "Verifying project ${PROJECT} is past the quarantine (grace) period..."

    NOW=`date -u +"%s"`
    SECONDS=`date -u -d "$SUSPENDED" +"%s"`
    ELAPSED=`expr $NOW - $SECONDS`

    if [ "$DEBUG" = "true" ]; then
        echo ""
        echo "Project suspended: $SUSPENDED"
        echo "Project suspended: $SECONDS seconds"
        echo "Current time:      $NOW seconds"
        echo "Elapsed time:      $ELAPSED seconds"
        echo "Quarantine period: $QUARANTINE_PERIOD seconds"
        echo ""
    fi

    if [ $ELAPSED -lt $QUARANTINE_PERIOD ]; then
        errorExit "The specified project ${PROJECT} is still within the quarantine period and cannot be removed"
    fi
fi

#--------------------------------------------------------------------------------

echo "Creating project trash subfolder..."

mkdir -p $PROJECT_TRASH_DATA_ROOT 2>&1 >/dev/null

if [ ! -d $PROJECT_TRASH_DATA_ROOT ]; then
    errorExit "Failed to create project trash subfolder ${PROJECT_TRASH_DATA_ROOT}"
fi

#--------------------------------------------------------------------------------

echo "Moving project files to project trash subfolder..."

mv -t ${PROJECT_TRASH_DATA_ROOT} ${PROJECT_ROOT}/* 2>$ERR

if [ -s $ERR ]; then
    MSG=`echo "$ERR" | tr "\n" " " `
    addToLog "$MSG"
    errorExit "Failed to move project files to trash!"
fi

#--------------------------------------------------------------------------------

echo "Exporting project action and frozen file records from database..."

$CURL_GET $ADMIN_CREDENTIALS "$IDA_API_ROOT_URL/actions?projects=${PROJECT}" 2>$ERR | \
    python -m json.tool > "${PROJECT_TRASH_DATA_ROOT}/actions.json"

if [ -s $ERR ]; then
    MSG=`echo "$ERR" | tr "\n" " " `
    addToLog "$MSG"
    errorExit "Failed to export action records!"
fi

$CURL_GET $ADMIN_CREDENTIALS "$IDA_API_ROOT_URL/files/action/all?projects=${PROJECT}" 2>$ERR | \
    python -m json.tool > "${PROJECT_TRASH_DATA_ROOT}/files.json"

if [ -s $ERR ]; then
    MSG=`echo "$ERR" | tr "\n" " " `
    addToLog "$MSG"
    errorExit "Failed to export file records!"
fi

echo "Flushing project action and frozen file records from the database..."

$CURL_POST $PROJECT_USER_CREDENTIALS "$IDA_API_ROOT_URL/flush?project=${PROJECT}" 2>$ERR >/dev/null

if [ -s $ERR ]; then
    MSG=`echo "$ERR" | tr "\n" " " `
    addToLog "$MSG"
    errorExit "Failed to flush project action and file records from database!"
fi

echo "Deleting project share owner account from Nextcloud..."

$OCC user:delete $PROJECT_USER 2>$ERR

if [ -s $ERR ]; then
    MSG=`echo "$ERR" | tr "\n" " " `
    addToLog "$MSG"
    errorExit "Failed to delete project share owner account!"
fi

echo "Deleting residual project share owner directory and link (if any)..."

for CANDIDATE_STORAGE_VOLUME in ${STORAGE_CANDIDATES[*]}; do
    TARGET="${CANDIDATE_STORAGE_VOLUME}/${PROJECT_USER_PREFIX}${PROJECT}"
    if [ -e $TARGET ]; then
        MSG="Deleting ${TARGET}"
        addToLog "$MSG"
        rm -fr $TARGET 2>$ERR
        if [ -s $ERR ]; then
            MSG=`echo "$ERR" | tr "\n" " " `
            addToLog "$MSG"
            MSG="WARNING: Failed to fully delete project share owner directory ${TARGET}!"
            addToLog "$MSG"
            echo "${MSG}"
        fi
    fi
done

#--------------------------------------------------------------------------------

if [ "$METAX_AVAILABLE" != "0" ]; then
    
    if [ "$IDA_ENVIRONMENT" = "PRODUCTION" ]; then
        echo "Marking all project files as deleted in METAX..."
        METAX_ENDPOINT="delete_project"
    else
        echo "Flushing all project records from METAX..."
        METAX_ENDPOINT="flush_project"
    fi
    
    $CURL_POST $METAX_CREDENTIALS "${METAX_API_RPC_URL}/files/${METAX_ENDPOINT}?project_identifier=${PROJECT}" 2>$ERR >/dev/null

    if [ -s $ERR ]; then
        MSG=`echo "$ERR" | tr "\n" " " `
        addToLog "$MSG"
        echoAndLog "Failed to update file metadata in METAX!"
    fi
fi

#--------------------------------------------------------------------------------

echo "Deleting project files from tape replication cache..."

if [ -d "$PROJECT_REPLICATION_ROOT" ]; then

    rm -fr "$PROJECT_REPLICATION_ROOT" 2>$ERR

    if [ -s $ERR ]; then
        MSG=`echo "$ERR" | tr "\n" " " `
        echoAndLog "$MSG"
        errorExit "Failed to delete project files from tape replication cache!"
    fi
fi

#--------------------------------------------------------------------------------

echo "Reporting data deleted for project..."

$ROOT/utils/admin/report-datadeleted $PROJECT 2>$ERR

if [ -s $ERR ]; then
    MSG=`echo "$ERR" | tr "\n" " " `
    addToLog "$MSG"
    echoAndLog "Error: Failed to report data deleted! (ignored)"
fi

#--------------------------------------------------------------------------------

echo "Sending email to project users..."

$ROOT/utils/admin/email-project-users $PROJECT \
    "Project ${PROJECT} removed." \
    "The project ${PROJECT} has been REMOVED from the IDA service and is no longer accessible. If the project had any data in IDA, that data has now been DELETED as agreed with the project manager and/or organization's IDA contact person."

#--------------------------------------------------------------------------------

echoAndLog "Project ${PROJECT} removed. Project data copied to trash subfolder ${PROJECT_TRASH_DATA_ROOT}"

rm $ERR 2>/dev/null

addToLog "DONE"
