#!/bin/bash
# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2020 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------
# This script audits all projects in the IDA service which have had any activity
# during the specified period or since the specified date(time), if given, or
# during the past 24 hours if nothing is specified. If only a date is specified,
# the time T00:00:00Z is used. Auditing is also limited to nodes which have been
# created or modified since the beginning of the script execution time.
# --------------------------------------------------------------------------------

SCRIPT=`basename "$(realpath $0)"`

USAGE="
Usage: $SCRIPT [ ( date[time] | week | month | year ) ] [ ( --staging | --frozen ) ] [ --timestamps ] [ ( --report | --report-errors ) [ email ] ]
       $SCRIPT -h

       date[time]       auditing will be limted to projects active the specified date[time]
       week             auditing will be limted to projects active during the past week
       month            auditing will be limted to projects active during the past month
       year             auditing will be limted to projects active during the past year
       --staging        auditing will be limited to files in the staging area
       --frozen         auditing will be limited to files in the frozen area
       --timestamps     comparisons will be made between disk timestamps and database values
       --report         auditing results will be emailed
       --report-errors  auditing results will be emailed, but only if errors are detected
       email            the email address where audit reports should be sent (defaults to configured recipient list)

If no active time period is specified, a period corresponding to the past 24 hours is used by default.

Auditing will be limited to files uploaded or frozen during specified or default period of activity, and
their ancestor folders.
"

PROJECT="null"
SINCE=""
AUDIT_ARGS=""

# --------------------------------------------------------------------------------
# Initialize script with common definitions

INIT_FILE=`dirname "$(realpath $0)"`/lib/init_audit_script.sh

if [ -e $INIT_FILE ]
then
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting." >&2
    exit 1
fi

# --------------------------------------------------------------------------------
# Process command line options

if [ $# -gt 0 ]; then
    case "$1" in
        "--staging" | "--frozen" | "--timestamps" | "--report" | "--report-errors" )
            AUDIT_ARGS="$*"
            ;;
        *)
            if [[ "$1" =~ ^(week|month|year)$ ]]; then
                SINCE=`date -d "$START - 1 $1" +"%Y-%m-%dT%H:%M:%SZ"`
            elif [[ "$1" =~ ^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}T[[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}Z$ ]]; then
                SINCE="$1"
            elif [[ "$1" =~ ^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}$ ]]; then
                SINCE="$1""T00:00:00Z"
            else
                echo "Invalid date[time]: $SINCE"
                exit 1
            fi
            shift
            AUDIT_ARGS="$*"
            ;;
    esac
fi

# If date(time) not specified, calculate datetime for 24 hours ago.
if [ "$SINCE" = "" ]; then
    SINCE=`date -d "$START - 24 hours" +"%Y-%m-%dT%H:%M:%SZ"`
fi

AUDIT_ARGS="--changed-since $SINCE $AUDIT_ARGS"

# --------------------------------------------------------------------------------

PROJECTS=`$ROOT/utils/admin/list-active-projects $SINCE`

INTERNAL_PROJECTS=""

if [ "$IDA_ENVIRONMENT" = "PRODUCTION" ]; then
    INTERNAL_PROJECTS=`$ROOT/utils/admin/list-internal-projects | tr '\n' ' '`
fi

if [ "$DEBUG" = "true" ]; then
    echo "AUDIT_ARGS: $AUDIT_ARGS"
    echo "INTERNAL:   $INTERNAL_PROJECTS"
fi

for PROJECT in $PROJECTS; do
    INTERNAL=`echo " $INTERNAL_PROJECTS " | grep " $PROJECT "`
    if [ "$INTERNAL" = "" ]; then
        $ROOT/utils/admin/audit-project $PROJECT $AUDIT_ARGS
    fi
done

addToLog "DONE"
