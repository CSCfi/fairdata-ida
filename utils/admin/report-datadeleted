#!/bin/bash
# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2022 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------
# Initialize script with common definitions

SCRIPT=`basename $0`

INIT_FILE=`dirname $0`/lib/init_admin_script.sh

if [ -e $INIT_FILE ]
then
    . $INIT_FILE
else
    echo "The initialization file $INIT_FILE cannot be found. Aborting." >&2
    exit 1
fi

if [ "$CSC_DATA_DELETION_MICROSERVICE" == "" ]; then
    errorExit "The variable CSC_DATA_DELETION_MICROSERVICE is not defined in the configuration. Aborting." >&2
fi

if [ "$CSC_DATA_DELETION_SECURITY_TOKEN" == "" ]; then
    errorExit "The variable CSC_DATA_DELETION_SECURITY_TOKEN is not defined in the configuration. Aborting." >&2
fi

#--------------------------------------------------------------------------------

for NEEDS_PROG in jq
do
    PROG_LOCATION=`/usr/bin/which $NEEDS_PROG 2>/dev/null`
    if [ ! -e "$PROG_LOCATION" ]; then
        errorExit "Can't find $NEEDS_PROG in your \$PATH. Aborting."
    fi
done

OUT=`curl --fail -k -s -S "$CSC_DATA_DELETION_MICROSERVICE/projects?projects=$PROJECT" 2>$ERR`

if [ -s $ERR ]; then
    MSG=`cat $ERR | tr "\n" " " `
    addToLog "$MSG"
    errorExit "Failed to retrieve details of project $PROJECT from microservice. Aborting."
fi

PROJECT_STATE=`echo "$OUT" | jq '.[0].state' --raw-output 2>/dev/null`

if [ "$PROJECT_STATE" != "deletedata" ]
then
    errorExit "Project $PROJECT does not have a data deletion process state of 'deletedata'. Aborting."
fi

PROJECT_IDA=`echo "$OUT" | jq '.[0].services[] | select(. == "IDA")' --raw-output 2>/dev/null`

if [ "$PROJECT_IDA" != "IDA" ]
then
    errorExit "Project $PROJECT is not active in the IDA service. Aborting."
fi

#--------------------------------------------------------------------------------

OUT=`curl --fail -k -s -S -X POST "$CSC_DATA_DELETION_MICROSERVICE/report?service=IDA&action=datadeleted&project=$PROJECT&token=$CSC_DATA_DELETION_SECURITY_TOKEN" 2>$ERR`

if [ -s $ERR ]; then
    MSG=`cat $ERR | tr "\n" " " `
    addToLog "$MSG"
    echo "$MSG" >&2
    errorExit "Failed to report data deleted for project"
fi

MSG=`echo "$OUT" | tr "\n" " " `
echoAndLog "$MSG"

PID=`echo "$OUT" | jq '.["workflow"]' --raw-output`

if [ -z "$PID" ]; then
    errorExit "Failed to extract workflow PID! (ignored)"
fi

LOOP=1

while true; do

    OUT=`$ROOT/utils/admin/fetch-workflow-details $PID 2>$ERR`

    if [ -s $ERR ]; then
        MSG=`cat $ERR | tr "\n" " " `
        addToLog "$MSG"
        echo "$MSG" >&2
        errorExit "Failed to check status of workflow from IdM"
    fi

    echo "$OUT"

    RUNNING=`echo "$OUT" | grep 'status: running'`

    if [ -z "$RUNNING" ]; then
        break
    fi

    LOOP=$(( LOOP + 1 ))

    if [ $LOOP -gt 15 ]; then
        errorExit "Timeout exceeded while waiting for IdM workflow to complete"
    fi
done

addToLog "DONE"
