# --------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2019 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
# --------------------------------------------------------------------------------

The scripts in this directory are to be used by service admins to perform various
important operations on projects, such as repair a project which has ended up in an
unstable state, suspend/unsuspend a project, and safely delete projects and their
data from the service.

#---------------------------------------------------------------------------------

Project deletion:

The safe deletion process consists of several steps, which aim to minimize the impact
by human errors of removing a project by mistake.


STEP 1: Suspend the project in the service when it is closed

When a project is closed and enters the grace substate of the CSC data deletion process,
an RT ticket will be automatically created by the IdM service notifying the IDA team.
At such time, the project should be suspended in the IDA service using the "suspend-project"
script, rendering access to the project data read-only.

The "suspend-project" script takes a single project identifier argument and will:

a. Lock the specified project, preventing any further freeze/unfreeze/delete actions.

b. Create a special "suspend" action with scope '/', preventing any further changes
   to data in the project's staging area.

This step will leave the user accounts and project data unchanged, and allows for
any changes in project membership coming from the CSC IdM, but puts the project in
a read-only state, such that project data may only be viewed and downloaded.
 
Normally, the suspend-project script is given a second parameter "--delete" whereby a
more detailed message will be emailed to project users, informing them of the upcoming
deletion of the project.

If a project is suspended in error, or the project is re-opened, the "unsuspend-project"
script can be used to remove the lock and clear the special "suspend" action, which will
fully reinstate the project without any loss of data or change in project membership.

In short, this first step makes any errors, or cases of projects being re-opened during
the grace period, essentially "painless" and easily recoverable.

The script "list-suspended-projects" will provide a summary of all projects which
are currently suspended, and when they were suspended.

Even in cases where a closed project is not given a grace period and is expected to be 
deleted immediately, it must first be suspended.
 

STEP 2: Delete the project and project data from the service when its grace period expires

When the grace period of a project has expired and the project enters the deletedata
substate of the CSC data deletion process, it should be deleted from the IDA service.

A list of projects to be deleted can be conveniently queried from the CSC data deletion
process microserver using the "list-deletedata-projects" utility script located in this
directory and subsequently deleted using the "delete-project" script.

The "delete-project" script takes a single project identifier argument
and will:

a. Check whether the project exists, is associated with IDA and has the CSC Data
   Deletion Process state 'deletedata', is suspended, and that it has been suspended
   longer than a configured "quarantine" (grace) period of time. If any of these tests
   fail, the script will exit with an error.

b. Create a dated project subdirectory in a special "trash" directory, and move the
   frozen and staging project directories to the project trash subdirectory.

c. Take a backup dump of all IDA action records associated with the project, in JSON
   format, saving them to a file "actions.json" in the project trash subdirectory,
   and take a backup dump of all IDA file records associated with the project, in JSON
   format, saving them to a file "files.json" in the project trash subdirectory.

d. Delete the PSO user and the project group, and if relevant, deleting any symbolic
   link for the PSO user directory.

e. Flush all project records from the IDA database.

f. Mark all project frozen files and datasets as deleted in METAX.

g. Delete all project frozen files from the DMF cache (this will not delete any files written to tape).
 
h. Report the project data as datadeleted for IDA to the IdM

i. Notify all project users and IDA devs by email that the project has been deleted

If an error is caught after this second step, or the project owners wish the project
to be reinstated, or wish some of the data to be recovered, it is still doable. All
database records and project files will still exist in the "trash".

At present, there is no script to "unremove" a project, though if ever needed, it is
expected that one will be created.

Note: The tape replication cache defined at the pathname $DATA_REPLICATION_ROOT must
grant group write permissions to the defined $HTTPD_USER.


STEP 3: Permanently delete all project data from trash

On a monthly basis, we should manually delete all project trash subfolders which are older
than one month, to free up disk space and to ensure project data is not unintentionally
preserved.

Once this third step is executed for a project, it is gone, gone, gone (except what
remains on tape in the DMF service).
 
#---------------------------------------------------------------------------------

Common admin script configuration:

Configuration for these scripts is controlled by the following variables which must
be defined in, and are taken from, the $ROOT/config/config.sh file and the
$ROOT/lib/constants.sh file of the service:

ROOT
OCC
LOG
HTTPD_USER
NC_ADMIN_USER
NC_ADMIN_PASS
PROJECT_USER_PASS
PROJECT_USER_PREFIX
STAGING_FOLDER_SUFFIX
STORAGE_OC_DATA_ROOT
DATA_REPLICATION_ROOT
METAX_USER
METAX_PASS
METAX_API
CSC_DATA_DELETION_MICROSERVICE
CSC_DATA_DELETION_SECURITY_TOKEN
EMAIL_SENDER       (optional, but used if defined)
EMAIL_RECIPIENTS   (optional, but used if defined)
TRASH_DATA_ROOT    (will be created if does not exist)
QUARANTINE_PERIOD  (defined in seconds, e.g. 30 days = 2592000 seconds)

These common variables, along with validation of configuration variables and
default processing of parameters is handled by the initialization script
$ROOT/utils/admin/lib/init_admin_script.sh which is loaded by all admin scripts, 
and which itself loads $ROOT/lib/init_script.sh

#---------------------------------------------------------------------------------

Auditing utilities:

Auditing utilities have an additional common initialization handled by the
script $ROOT/utils/admin/lib/init_audit_script.sh which is loaded by all audit
scripts, and itself loads $ROOT/utils/admin/lib/init_admin_script.sh

In addition to the environment variables specified above, configuration for
auditing scripts is controlled by the following variables which must
be defined in, and are taken from, the $ROOT/config/config.sh:

DBTYPE
DBNAME
DBHOST
DBPORT
DBTABLEPREFIX
DBUSER
DBPASSWORD

Additionally, the python virtual environment utilized by the core python
script must first be configured manually before running any of the auditing
utilities by executing the script $ROOT/utils/initialize_venv
as root to configure or update the virtual environment on each server instance
where the auditing utilities are executed.
