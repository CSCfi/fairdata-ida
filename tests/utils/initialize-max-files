#!/bin/bash
#--------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2018 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
#--------------------------------------------------------------------------------
#
# This script initializes a folder named "MaxFiles" in the root folder of the
# staging area of the project specified as the first argument to the script,
# containing empty files.
#
# This script is safe to execute in any environment, including production.
#

# The project must ALREADY exist and the folder "MaxFiles" folder must NOT exist;
# or else the script will exit with an error. This ensures against accidental
# corruption of existing data or creation of new projects in production.
#
# The test data is organized so that the IDA freeze/unfreeze/delete operations
# can be tested on scopes with varying large numbers of files.
#
# The script uses the defined MAX_FILE_COUNT limit defined for the service,
# but optionally will take a second argument for another limit, which should
# be a multiple of 500 (e.g. 500, 1000, 1500, 2000, etc.)
#
# The total number of files in the scope of the "MaxFiles" folder will be
# one file more than the maximum allowed number of files, and therefore should
# be rejected if an attempt is made to freeze the entire root folder. The total
# number of files in the scope of each subfolder below the "MaxFiles" folder
# reflects the total number of files in that folder.
#
# E.g. if the limit is 500 files, then the generated hierarchy is as follows:
#
# /testdata/MaxFiles/test_file.dat
# /testdata/MaxFiles/5000_files/500_files_1/100_files_1/10_files_1/test_file_1.dat
# /testdata/MaxFiles/5000_files/500_files_1/100_files_1/10_files_1/...
# /testdata/MaxFiles/5000_files/500_files_1/100_files_1/10_files_1/test_file_10.dat
# /testdata/MaxFiles/5000_files/500_files_1/100_files_1/10_files_2/test_file_1.dat
# /testdata/MaxFiles/5000_files/500_files_1/100_files_1/...
# /testdata/MaxFiles/5000_files/500_files_1/100_files_1/10_files_10/test_file_10.dat
# /testdata/MaxFiles/5000_files/500_files_2/...
# /testdata/MaxFiles/5000_files/500_files_2/100_files_2/10_files_1/test_file_1.dat
# /testdata/MaxFiles/5000_files/500_files_5/...
# /testdata/MaxFiles/5000_files/500_files_5/100_files_5/10_files_10/test_file_10.dat
#
#--------------------------------------------------------------------------------
. `dirname $0`/../../lib/init_script.sh

if [ "$ROOT" = "" ]; then
    echo "Error: Failed to properly initialize script. Aborting." >&2
    exit 1
fi

#--------------------------------------------------------------------------------

PROJECT="$1"

if [ "$1" = "" ]; then
    errorExit "Error: The project name must be specified as the first argument to the script"
fi

#--------------------------------------------------------------------------------

if [ "$ROOT" = "" ]; then
    errorExit "Error: The ROOT configuration variable must be defined"
fi

if [ "$STAGING_FOLDER_SUFFIX" = "" ]; then
    errorExit "Error: The STAGING_FOLDER_SUFFIX configuration variable must be defined"
fi

if [ "$PROJECT_USER_PREFIX" = "" ]; then
    errorExit "Error: The PROJECT_USER_PREFIX configuration variable must be defined"
fi

if [ "$STORAGE_OC_DATA_ROOT" = "" ]; then
    errorExit "Error: The STORAGE_OC_DATA_ROOT configuration variable must be defined"
fi

#--------------------------------------------------------------------------------

PSO_USER="${PROJECT_USER_PREFIX}${PROJECT}"
PROJECT_STAGING_FOLDER="${STORAGE_OC_DATA_ROOT}/${PSO_USER}/files/${PROJECT}${STAGING_FOLDER_SUFFIX}"
MAX_FILES_FOLDER="${PROJECT_STAGING_FOLDER}/testdata/MaxFiles"

echo "Generating MaxFiles test data for project ${PROJECT}..."
echo "Target folder: $MAX_FILES_FOLDER"

#--------------------------------------------------------------------------------

echo "Ensuring project exists and MaxFiles folder does not exist..."

if [ ! -d "$PROJECT_STAGING_FOLDER" ]; then
    errorExit "Error: The project ${PROJECT} does not exist"
fi

if [ -d "$MAX_FILES_FOLDER" ]; then
    errorExit "Error: The target folder already exists in the root of the staging area of project ${PROJECT}"
fi

#--------------------------------------------------------------------------------

MAX_SET_COUNT=`echo "$MAX_FILE_COUNT / 500" | bc`

if [ "$2" != "" ]; then
    MAX_FILE_COUNT="$2"
    MAX_SET_COUNT=`echo "$MAX_FILE_COUNT / 500" | bc`
    if [ "$MAX_SET_COUNT" = 0 ]; then
        errorExit "Error: Invalid max file count specified: $2"
    fi
fi

if [ "$MAX_SET_COUNT" = 1 ]; then
    echo "Generating single multiple of 500 files"
else
    echo "Generating $MAX_SET_COUNT multiples of 500 files"
fi

#--------------------------------------------------------------------------------

mkdir -p "${MAX_FILES_FOLDER}"
touch "${MAX_FILES_FOLDER}/test_file.dat"

mkdir -p "${MAX_FILES_FOLDER}/${MAX_FILE_COUNT}_files"

while [ $MAX_SET_COUNT -gt 0 ]; do
    echo -n "."
    SET_DIR="${MAX_FILES_FOLDER}/${MAX_FILE_COUNT}_files/500_files_${MAX_SET_COUNT}"
    mkdir -p "${SET_DIR}"
    for i in "1" "2" "3" "4" "5"; do
        mkdir -p "${SET_DIR}/100_files_${i}"
        for j in "1" "2" "3" "4" "5" "6" "7" "8" "9" "10"; do
            mkdir -p "${SET_DIR}/100_files_${i}/10_files_${j}"
            for k in "1" "2" "3" "4" "5" "6" "7" "8" "9" "10"; do
                touch "${SET_DIR}/100_files_${i}/10_files_${j}/test_file_${k}.dat"
            done
        done
    done
    MAX_SET_COUNT=`echo "$MAX_SET_COUNT - 1" | bc`
done

echo ""

#--------------------------------------------------------------------------------

echo "Updating Nextcloud file cache..."

$OCC files:scan -q $PSO_USER

