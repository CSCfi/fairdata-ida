#!/bin/bash
#--------------------------------------------------------------------------------
# This file is part of the IDA research data storage service
#
# Copyright (C) 2018 Ministry of Education and Culture, Finland
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# @author   CSC - IT Center for Science Ltd., Espoo Finland <servicedesk@csc.fi>
# @license  GNU Affero General Public License, version 3
# @link     https://research.csc.fi/
#--------------------------------------------------------------------------------
#
# This script initializes a set of explicit test accounts (project groups, users,
# group memberships, and files) which provide a baseline for both manual testing
# and evaluation / demos, as well as for automated tests. If any of the accounts
# alredy exist, they will first be purged, such that every time this script is
# run, the same baseline configuration for these accounts will exist.
#
# An optional account configuration can be specified as an initial parameter.
#
# The following default project and user configuration will be created:
#
#               test_project_a  test_project_b  test_project_c  test_project_d
# test_user_a         X
# test_user_b                         X
# test_user_c                                         X
# test_user_d                                                         X
# test_user_x         X               X               X               X
#
# All projects will be initialized with the same data in their staging area,
# as defined in /ida/tests/testdata
#
# The test data folder 2017-11/Experiment_7 will contain an empty subfolder
# but no files, allowing for testing restrictions against freezing folders with
# no files.
#
# If the argument "flush" is given, then only the existing accounts and data
# are purged and no new accounts created.
#
#--------------------------------------------------------------------------------
. `dirname $0`/../../lib/init_script.sh

if [ "$ROOT" = "" ]; then
    echo "Error: Failed to properly initialize script. Aborting." >&2
    exit 1
fi

#--------------------------------------------------------------------------------
# Verify that we are in a test environment

if [ "$IDA_ENVIRONMENT" != "TEST" ]; then
    errorExit "Error: This script can only be run in a test environment. Aborting."
fi

#--------------------------------------------------------------------------------

CONFIG=""

if [ "$1" = "flush" ]; then
    if [ "$2" != "" ]; then
        CONFIG="$2"
    fi
else
    if [ "$1" != "" ]; then
        CONFIG="$1"
    fi
fi

if [ "$CONFIG" != "" ]; then
    if [ -s "$CONFIG" ]; then
        . "$CONFIG"
    else
        errorExit "Error: The specified configuration file does not exist or is empty. Aborting"
    fi
else
    PROJECTS="test_project_a test_project_b test_project_c test_project_d"
    USERS="test_user_a test_user_b test_user_c test_user_d test_user_x"
    BASIC_RELATIONS="test_user_a:test_project_a test_user_b:test_project_b test_user_c:test_project_c test_user_d:test_project_d test_user_x:test_project_a"
    EXTRA_RELATIONS="test_user_x:test_project_b test_user_x:test_project_c test_user_x:test_project_d"
fi

#--------------------------------------------------------------------------------

PADDING="-45"

function failure {
    echo "FAILED: " "$@"
}

function success {
    echo "OK"
}

#--------------------------------------------------------------------------------

echo "Flushing all action and file records from IDA service database..."

for PROJECT in $PROJECTS; do
    STEP="   Flushing $PROJECT"
    printf "%${PADDING}s" "$STEP"
    OUT=`$CURL_POST $NC_ADMIN_USER:$NC_ADMIN_PASS "$URL_BASE_IDA/api/flush?project=$PROJECT" 2>&1`
    if [ "$?" -ne 0 ]; then
        failure "$OUT (ignored)"
    else
        success
    fi
done

if [ "$METAX_AVAILABLE" = "1" ]; then

    echo "Flushing all frozen file records from METAX database..."

    for PROJECT in $PROJECTS; do
        STEP="   Flushing $PROJECT"
        printf "%${PADDING}s" "$STEP"
        OUT=`$CURL_POST $METAX_API_USER:$METAX_API_PASS "$METAX_API_RPC_URL/files/flush_project?project_identifier=$PROJECT" 2>&1`
        if [ "$?" -ne 0 ]; then
            failure "$OUT (ignored)"
        else
            success
        fi
    done

fi

#--------------------------------------------------------------------------------

echo "Cleaning up any existing test projects..."
echo "Deleting any existing test users..."

for USER in $USERS; do
    STEP="   Deleting $USER"
    printf "%${PADDING}s" "$STEP"
    OUT=`$ROOT/admin/ida_user DELETE $USER 2>&1`
    if [ "$?" -ne 0 ]; then
        failure "$OUT (ignored)"
    else
        success
    fi
done

echo "Deleting any existing test projects..."

for PROJECT in $PROJECTS; do
    STEP="   Deleting $PROJECT"
    printf "%${PADDING}s" "$STEP"
    OUT=`$ROOT/admin/ida_project DISABLE $PROJECT 2>&1`
    if [ "$?" -ne 0 ]; then
        failure "$OUT (ignored)"
    else
        success
    fi
done

echo "Deleting any existing project share owners..."

for PROJECT in $PROJECTS; do
    USER="$PROJECT_USER_PREFIX""$PROJECT"
    STEP="   Deleting $USER"
    printf "%${PADDING}s" "$STEP"
    OUT=`$ROOT/admin/ida_user DELETE $USER 2>&1`
    if [ "$?" -ne 0 ]; then
        failure "$OUT (ignored)"
    else
        success
    fi
done

#--------------------------------------------------------------------------------

if [ "$1" = "flush" ]; then
    exit
fi

#--------------------------------------------------------------------------------

echo "Creating test accounts..."
echo "Creating projects..."

for PROJECT in $PROJECTS; do
    STEP="   Creating $PROJECT"
    printf "%${PADDING}s" "$STEP"
    OUT=`$ROOT/admin/ida_project ADD $PROJECT 1 2>&1`
    if [ "$?" -ne 0 ]; then
        failure "$OUT"
        exit 1
    else
        success
    fi
done

#--------------------------------------------------------------------------------

echo "Initializing test data for each project..."

for PROJECT in $PROJECTS; do

    STEP="   Initializing data for $PROJECT"
    printf "%${PADDING}s" "$STEP"

    if [ "$STAGING_FOLDER_SUFFIX" = "" ]; then
        errorExit "Error: The STAGING_FOLDER_SUFFIX must be defined"
    fi

    USER="$PROJECT_USER_PREFIX""$PROJECT"
    PROJECT_STAGING_FOLDER="$PROJECT$STAGING_FOLDER_SUFFIX"

    OUT=`cp -r $ROOT/tests/testdata/* $STORAGE_OC_DATA_ROOT/$USER/files/$PROJECT_STAGING_FOLDER`

    if [ "$?" -ne 0 ]; then
        failure "$OUT"
        exit 1
        continue
    fi

    rm -fr `find $STORAGE_OC_DATA_ROOT/$USER/files -name .DS_Store`

    chmod -R u+w,g+rw,o-rwx "$STORAGE_OC_DATA_ROOT/$USER/files"

    # Update Nextcloud filesystem records
    OUT=`$OCC files:scan -q $USER`
    if [ "$?" -ne 0 ]; then
        failure "$OUT"
        exit 1
    else
        success
    fi

done

#--------------------------------------------------------------------------------

echo "Creating users..."

for RELATION in $BASIC_RELATIONS; do
    USER=`echo $RELATION | sed -e 's/:.*$//'`
    PROJECT=`echo $RELATION | sed -e 's/^.*://'`
    STEP="   Creating $USER in $PROJECT"
    printf "%${PADDING}s" "$STEP"
    OUT=`$ROOT/admin/ida_user ADD $USER $PROJECT 2>&1`
    if [ "$?" -ne 0 ]; then
        failure "$OUT"
        exit 1
    else
        success
    fi
done

#--------------------------------------------------------------------------------

echo "Creating additional project relations..."

for RELATION in $EXTRA_RELATIONS; do
    USER=`echo $RELATION | sed -e 's/:.*$//'`
    PROJECT=`echo $RELATION | sed -e 's/^.*://'`
    STEP="   Adding $USER to $PROJECT"
    printf "%${PADDING}s" "$STEP"
    OUT=`$ROOT/admin/ida_user JOIN $USER $PROJECT 2>&1`
    if [ "$?" -ne 0 ]; then
        failure "$OUT"
        exit 1
    else
        success
    fi
done
